; ModuleID = 'mg.amd64.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_407980__rodata_type = type <{ [4 x i8], [27 x i8], [46 x i8], [38 x i8], [44 x i8], [37 x i8], [39 x i8], [39 x i8], [25 x i8], [45 x i8], [45 x i8], [45 x i8], [37 x i8], [37 x i8], [20 x i8], [23 x i8], [23 x i8], [23 x i8], [23 x i8], [64 x i8], [39 x i8], [34 x i8], [21 x i8], [30 x i8], [176 x i8], [8 x i8], [80 x i8], [24 x i8], [11 x i8], [5 x i8], [8 x i8], [5 x i8], [7 x i8], [6 x i8], [6 x i8], [59 x i8], [9 x i8], [35 x i8], [4 x i8], [7 x i8], [42 x i8], [32 x i8], [18 x i8], [39 x i8], [12 x i8], [23 x i8], [26 x i8], [21 x i8], [22 x i8], [33 x i8], [12 x i8], [21 x i8], [23 x i8], [28 x i8], [3 x i8], [25 x i8], [6 x i8], [12 x i8], [4 x i8], [6 x i8], [4 x i8], [12 x i8], [29 x i8], [7 x i8], [25 x i8], [30 x i8], [9 x i8], [25 x i8], [13 x i8], [56 x i8], [44 x i8], [9 x i8], [46 x i8], [24 x i8], [9 x i8], [9 x i8], [7 x i8], [2 x i8], [9 x i8], [28 x i8], [37 x i8], [8 x i8], [34 x i8], [37 x i8], [42 x i8], [40 x i8], [37 x i8], [37 x i8], [13 x i8], [19 x i8], [23 x i8], [23 x i8], [227 x i8] }>
%seg_608e00__init_array_type = type <{ i64, i64 }>
%seg_608ff0__got_type = type <{ i64, i64 }>
%seg_609000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%seg_609078__data_type = type <{ [16 x i8], [4 x i8] }>
%__bss_start_type = type <{ [4 x i8] }>
%__TMC_END___type = type <{ [16 x i8] }>
%seg_6090a0__bss_type = type <{ [8 x i8], [8 x i8], [512 x i8], [512 x i8], [4 x i8], [12 x i8], [48 x i8], [48 x i8], [48 x i8], [32 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [8 x i8], [48 x i8], [48 x i8], [40 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [40 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 32
@seg_407980__rodata = internal constant %seg_407980__rodata_type <{ [4 x i8] c"\01\00\02\00", [27 x i8] c"\0A\0A %s Benchmark Completed\0A\00", [46 x i8] c" Class           =                        %c\0A\00", [38 x i8] c" Size            =             %12ld\0A\00", [44 x i8] c" Size            =             %4dx%4dx%4d\0A\00", [37 x i8] c" Iterations      =             %12d\0A\00", [39 x i8] c" Time in seconds =             %12.2f\0A\00", [39 x i8] c" Mop/s total     =             %12.2f\0A\00", [25 x i8] c" Operation type  = %24s\0A\00", [45 x i8] c" Verification    =            NOT PERFORMED\0A\00", [45 x i8] c" Verification    =               SUCCESSFUL\0A\00", [45 x i8] c" Verification    =             UNSUCCESSFUL\0A\00", [37 x i8] c" Version         =             %12s\0A\00", [37 x i8] c" Compile date    =             %12s\0A\00", [20 x i8] c"\0A Compile options:\0A\00", [23 x i8] c"    CLINK        = %s\0A\00", [23 x i8] c"    C_LIB        = %s\0A\00", [23 x i8] c"    C_INC        = %s\0A\00", [23 x i8] c"    CFLAGS       = %s\0A\00", [64 x i8] c"    CLINKFLAGS   = %s\0A\00\0A--------------------------------------\0A\00", [39 x i8] c" Please send all errors/feedbacks to:\0A\00", [34 x i8] c" Center for Manycore Programming\0A\00", [21 x i8] c" cmp@aces.snu.ac.kr\0A\00", [30 x i8] c" http://aces.snu.ac.kr\0A\00\00\00\00\00\00\00", [176 x i8] c"UUUUUU\B5?UUUUUU\C5?UUUUUU\05\C0;\DA\BCOq\C9\90\BF\08\1F|\F0\C1\07\9F?\97\96\96\96\96\96\C6\BF\00\00\00\00\00\00\90\BF\00\00\00\00\00\00\A0?\00\00\00\00\00\00\D8\BF:\8C0\E2\8EyE>\AA\CB/2el\D6=\DBP\FAd\A7\C2\E5=C\CCq\B3\0B&\A3>\BC\FB\EF~]5\BE>~o\D9\B9\9Ci\C4>\99oS\F6= \DB>\BB\13\92=\E2\D3\0B?\00\00\00\00\00\00\F0?\8D\ED\B5\A0\F7\C6\B0>\00\00\00\00\00\00M@\00\00\00\00\00\00Y@\00\00\00\A1\B0\B9\B2A", [8 x i8] c"\00\00\00\00\00\00\14@", [80 x i8] c"\00\00\00\00\00\00*@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\00@\00\00\00\00\00\00\B0?\00\00\00\00\00\00\C0?\00\00\00\00\00\00\D0?\00\00\00\00\00\00\E0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [24 x i8] c"Cannot allocate memory\0A\00", [11 x i8] c"timer.flag\00", [5 x i8] c"init\00", [8 x i8] c"benchmk\00", [5 x i8] c"mg3P\00", [7 x i8] c"interp\00", [6 x i8] c"norm2\00", [6 x i8] c"comm3\00", [59 x i8] c"\0A\0A NAS Parallel Benchmarks (NPB3.3-SER-C) - MG Benchmark\0A\0A\00", [9 x i8] c"mg.input\00", [35 x i8] c" Reading from input file mg.input\0A\00", [4 x i8] c"%d\0A\00", [7 x i8] c"%d%d%d\00", [42 x i8] c" No input file. Using compiled defaults \0A\00", [32 x i8] c" Size: %4dx%4dx%4d  (class %c)\0A\00", [18 x i8] c" Iterations: %3d\0A\00", [39 x i8] c" Initialization time: %15.3f seconds\0A\0A\00", [12 x i8] c"  iter %3d\0A\00", [23 x i8] c"\0A Benchmark completed\0A\00", [26 x i8] c" VERIFICATION SUCCESSFUL\0A\00", [21 x i8] c" Error is   %20.13E\0A\00", [22 x i8] c" VERIFICATION FAILED\0A\00", [33 x i8] c" L2 Norm is             %20.13E\0A\00", [12 x i8] c" The correct", [21 x i8] c" L2 Norm is %20.13E\0A\00", [23 x i8] c" Problem size unknown\0A\00", [28 x i8] c" NO VERIFICATION PERFORMED\0A\00", [3 x i8] c"MG\00", [25 x i8] c"          floating point\00", [6 x i8] c"3.3.1\00", [12 x i8] c"03 Nov 2017\00", [4 x i8] c"gcc\00", [6 x i8] c"$(CC)\00", [4 x i8] c"-lm\00", [12 x i8] c"-I../common\00", [29 x i8] c"-g -Wall -O3 -mcmodel=medium\00", [7 x i8] c"randdp\00", [25 x i8] c"  SECTION   Time (secs)\0A\00", [30 x i8] c"    --> %8s:%9.3f  (%6.2f%%)\0A\00", [9 x i8] c"mg-resid\00", [25 x i8] c"  %-8s:%9.3f  (%6.2f%%)\0A\00", [13 x i8] c" in setup, \0A\00", [56 x i8] c" k  lt  nx  ny  nz  n1  n2  n3 is1 is2 is3 ie1 ie2 ie3\0A\00", [44 x i8] c"%4d%4d%4d%4d%4d%4d%4d%4d%4d%4d%4d%4d%4d%4d\0A\00", [9 x i8] c"   rprj3\00", [46 x i8] c" Level%2d in %8s: norms =%21.14E%21.14E\0A\00   \0A\00", [24 x i8] c"%6.3f\00  - - - - - - - \0A\00", [9 x i8] c"   psinv\00", [9 x i8] c"z: inter\00", [7 x i8] c"u: inte", [2 x i8] c"r\00", [9 x i8] c"   resid\00", [28 x i8] c"\0A\0A %s Benchmark Completed.\0A\00", [37 x i8] c" Class           =             %12c\0A\00", [8 x i8] c"%15.0lf\00", [34 x i8] c" Size            =          %15s\0A\00", [37 x i8] c" Size            =             %12d\0A\00", [42 x i8] c" Size            =           %4dx%4dx%4d\0A\00", [40 x i8] c" Time in seconds =             %12.2lf\0A\00", [37 x i8] c" Mop/s total     =          %15.2lf\0A\00", [37 x i8] c" Verification    =             %12s\0A\00", [13 x i8] c"UNSUCCESSFUL\00", [19 x i8] c"\0A Compile options:\0A", [23 x i8] c"    CC           = %s\0A\00", [23 x i8] c"    RAND         = %s\0A\00", [227 x i8] c"\0A--------------------------------------\0A Please send all errors/feedbacks to:\0A Center for Manycore Programming\0A cmp@aces.snu.ac.kr\0A http://aces.snu.ac.kr\0A--------------------------------------\0A\0A\00\00\00\00\00\00\00\10=\00\00\00\00\00\00\D0B\00\00\00\00\00\00`A\00\00\00\00\00\00\80>" }>
@seg_608e00__init_array = internal global %seg_608e00__init_array_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_400870_frame_dummy to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_400840___do_global_dtors_aux to i64) }>
@seg_608ff0__got = internal global %seg_608ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_609000__got_plt = internal global %seg_609000__got_plt_type <{ [24 x i8] c"\10\8E`\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_fscanf to i64), i64 ptrtoint (i64 (i64)* @fclose to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64)* @pow to i64), i64 ptrtoint (i64 (i64)* @fgetc to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), i64 ptrtoint (i64 (i64)* @malloc to i64), i64 ptrtoint (i64 (i64, i64)* @fopen to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @sprintf to i64), i64 ptrtoint (double (double)* @sqrt to i64) }>
@seg_609078__data = internal global %seg_609078__data_type <{ [16 x i8] zeroinitializer, [4 x i8] c"\FF\FF\FF\FF" }>
@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@seg_6090a0__bss = internal global %seg_6090a0__bss_type zeroinitializer
@__mcsema_reg_state = internal thread_local global %struct.State zeroinitializer
@__mcsema_stack = internal thread_local global [131072 x i64] zeroinitializer
@__mcsema_tls = internal thread_local global [512 x i64] zeroinitializer
@0 = internal global i1 false
@llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
define %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1 {
  call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #0

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__isoc99_fscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fopen(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fclose(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fgetc(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @malloc(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @sprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @pow(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #3

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_407970___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
block_407970:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403460_resid(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403460:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %20 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %21 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %29 = load i64, i64* %19, align 8
  %30 = load i64, i64* %18, align 8, !tbaa !1240
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %29, i64* %32
  store i64 %31, i64* %19, align 8, !tbaa !1240
  %33 = load i64, i64* %25, align 8
  %34 = add i64 %30, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = load i64, i64* %24, align 8
  %37 = add i64 %30, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %13, align 8
  %40 = add i64 %30, -32
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = add i64 %30, -4328
  store i64 %42, i64* %18, align 8, !tbaa !1240
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = add i64 %30, 16
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50
  %52 = zext i32 %51 to i64
  store i64 %52, i64* %12, align 8, !tbaa !1240
  %53 = add i64 %30, 8
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %22, align 8, !tbaa !1240
  %56 = add i64 %30, -40
  %57 = load i64, i64* %17, align 8
  %58 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %58
  %59 = add i64 %30, -48
  %60 = load i64, i64* %16, align 8
  %61 = inttoptr i64 %59 to i64*
  store i64 %60, i64* %61
  %62 = add i64 %30, -56
  %63 = load i64, i64* %15, align 8
  %64 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %64
  %65 = add i64 %30, -60
  %66 = load i32, i32* %7, align 4
  %67 = inttoptr i64 %65 to i32*
  store i32 %66, i32* %67
  %68 = add i64 %30, -64
  %69 = load i32, i32* %9, align 4
  %70 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %70
  %71 = add i64 %30, -68
  %72 = load i32, i32* %11, align 4
  %73 = inttoptr i64 %71 to i32*
  store i32 %72, i32* %73
  %74 = inttoptr i64 %68 to i32*
  %75 = load i32, i32* %74
  %76 = zext i32 %75 to i64
  store i64 %76, i64* %15, align 8, !tbaa !1240
  %77 = load i64, i64* %19, align 8
  %78 = add i64 %77, -52
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %16, align 8, !tbaa !1240
  %82 = add i64 %77, -32
  %83 = inttoptr i64 %82 to i64*
  %84 = load i64, i64* %83
  %85 = add i64 %77, -72
  %86 = inttoptr i64 %85 to i64*
  store i64 %84, i64* %86
  %87 = add i64 %77, -56
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88
  %90 = zext i32 %89 to i64
  %91 = inttoptr i64 %78 to i32*
  %92 = load i32, i32* %91
  %93 = zext i32 %92 to i64
  store i64 %93, i64* %23, align 8, !tbaa !1240
  %94 = add i64 %77, -40
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %77, -80
  %98 = inttoptr i64 %97 to i64*
  store i64 %96, i64* %98
  %99 = inttoptr i64 %87 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %13, align 8, !tbaa !1240
  %102 = inttoptr i64 %78 to i32*
  %103 = load i32, i32* %102
  %104 = zext i32 %103 to i64
  store i64 %104, i64* %24, align 8, !tbaa !1240
  %105 = add i64 %77, -48
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %25, align 8, !tbaa !1240
  %108 = add i64 %77, -88
  %109 = inttoptr i64 %108 to i64*
  store i64 %107, i64* %109
  %110 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %111 = icmp eq i32 %110, 0
  %112 = add i64 %77, -4264
  %113 = load i64, i64* %22, align 8
  %114 = inttoptr i64 %112 to i64*
  store i64 %113, i64* %114
  %115 = load i64, i64* %19, align 8
  %116 = add i64 %115, -4268
  %117 = load i32, i32* %5, align 4
  %118 = inttoptr i64 %116 to i32*
  store i32 %117, i32* %118
  %119 = add i64 %115, -4280
  %120 = load i64, i64* %15, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %121
  %122 = add i64 %115, -4288
  %123 = load i64, i64* %16, align 8
  %124 = inttoptr i64 %122 to i64*
  store i64 %123, i64* %124
  %125 = add i64 %115, -4296
  %126 = inttoptr i64 %125 to i64*
  store i64 %90, i64* %126
  %127 = add i64 %115, -4304
  %128 = inttoptr i64 %127 to i64*
  store i64 %93, i64* %128
  %129 = add i64 %115, -4312
  %130 = inttoptr i64 %129 to i64*
  store i64 %101, i64* %130
  %131 = add i64 %115, -4320
  %132 = inttoptr i64 %131 to i64*
  store i64 %104, i64* %132
  %133 = select i1 %111, i64 181, i64 171
  %134 = add i64 %133, %1
  br i1 %111, label %block_403515, label %block_40350b

block_403973:                                     ; preds = %block_403963
  %135 = add i64 %539, -88
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %539, -52
  %139 = inttoptr i64 %138 to i32*
  %140 = load i32, i32* %139
  %141 = zext i32 %140 to i64
  store i64 %141, i64* %16, align 8, !tbaa !1240
  %142 = add i64 %539, -56
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143
  %145 = zext i32 %144 to i64
  store i64 %145, i64* %15, align 8, !tbaa !1240
  %146 = add i64 %539, -60
  %147 = inttoptr i64 %146 to i32*
  %148 = load i32, i32* %147
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %14, align 8, !tbaa !1240
  store i64 %137, i64* %17, align 8, !tbaa !1240
  %150 = add i64 %555, 12637
  %151 = add i64 %555, 21
  %152 = load i64, i64* %18, align 8, !tbaa !1240
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154
  store i64 %153, i64* %18, align 8, !tbaa !1240
  %155 = tail call %struct.Memory* @sub_406ad0_showall(%struct.State* nonnull %0, i64 %150, %struct.Memory* %536)
  br label %block_403988

block_4038ee:                                     ; preds = %block_403534
  %156 = inttoptr i64 %559 to i32*
  %157 = load i32, i32* %156
  %158 = add i32 %157, 1
  %159 = inttoptr i64 %559 to i32*
  store i32 %158, i32* %159
  %160 = add i64 %452, -978
  br label %block_40351c

block_4038db:                                     ; preds = %block_40377a
  %161 = inttoptr i64 %563 to i32*
  %162 = load i32, i32* %161
  %163 = add i32 %162, 1
  %164 = inttoptr i64 %563 to i32*
  store i32 %163, i32* %164
  %165 = add i64 %301, -935
  br label %block_403534

block_403558:                                     ; preds = %block_40354c
  %166 = inttoptr i64 %567 to i64*
  %167 = load i64, i64* %166
  %168 = inttoptr i64 %559 to i32*
  %169 = load i32, i32* %168
  %170 = sext i32 %169 to i64
  %171 = inttoptr i64 %568 to i64*
  %172 = load i64, i64* %171
  %173 = inttoptr i64 %569 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %16, align 8, !tbaa !1240
  %175 = mul i64 %174, %172
  %176 = mul i64 %175, %170
  %177 = shl i64 %176, 3
  %178 = add i64 %177, %167
  %179 = inttoptr i64 %563 to i32*
  %180 = load i32, i32* %179
  %181 = add i32 %180, -1
  %182 = sext i32 %181 to i64
  %183 = mul i64 %174, %182
  %184 = shl i64 %183, 3
  %185 = add i64 %184, %178
  %186 = sext i32 %456 to i64
  %187 = shl nsw i64 %186, 3
  %188 = add i64 %187, %185
  %189 = inttoptr i64 %188 to double*
  %190 = load double, double* %189
  %191 = add i32 %180, 1
  %192 = sext i32 %191 to i64
  %193 = mul i64 %174, %192
  %194 = shl i64 %193, 3
  %195 = add i64 %194, %178
  %196 = add i64 %187, %195
  %197 = inttoptr i64 %196 to double*
  %198 = load double, double* %197
  %199 = fadd double %190, %198
  %200 = add i32 %169, -1
  %201 = sext i32 %200 to i64
  %202 = mul i64 %175, %201
  %203 = shl i64 %202, 3
  %204 = add i64 %203, %167
  %205 = sext i32 %180 to i64
  %206 = mul i64 %174, %205
  %207 = shl i64 %206, 3
  %208 = add i64 %207, %204
  %209 = add i64 %187, %208
  %210 = inttoptr i64 %209 to double*
  %211 = load double, double* %210
  %212 = fadd double %199, %211
  %213 = add i32 %169, 1
  %214 = sext i32 %213 to i64
  %215 = mul i64 %175, %214
  %216 = shl i64 %215, 3
  %217 = add i64 %216, %167
  %218 = add i64 %207, %217
  %219 = add i64 %187, %218
  %220 = inttoptr i64 %219 to double*
  %221 = load double, double* %220
  %222 = fadd double %212, %221
  %223 = add i64 %572, %187
  %224 = inttoptr i64 %223 to double*
  store double %222, double* %224
  %225 = inttoptr i64 %567 to i64*
  %226 = load i64, i64* %225
  %227 = inttoptr i64 %559 to i32*
  %228 = load i32, i32* %227
  %229 = add i32 %228, -1
  %230 = sext i32 %229 to i64
  %231 = inttoptr i64 %568 to i64*
  %232 = load i64, i64* %231
  %233 = load i64, i64* %16, align 8
  %234 = mul i64 %233, %232
  %235 = mul i64 %234, %230
  %236 = shl i64 %235, 3
  %237 = add i64 %236, %226
  %238 = inttoptr i64 %563 to i32*
  %239 = load i32, i32* %238
  %240 = add i32 %239, -1
  %241 = sext i32 %240 to i64
  %242 = mul i64 %233, %241
  %243 = shl i64 %242, 3
  %244 = add i64 %243, %237
  %245 = inttoptr i64 %565 to i32*
  %246 = load i32, i32* %245
  %247 = sext i32 %246 to i64
  %248 = shl nsw i64 %247, 3
  %249 = add i64 %248, %244
  %250 = inttoptr i64 %249 to double*
  %251 = load double, double* %250
  %252 = add i32 %239, 1
  %253 = sext i32 %252 to i64
  %254 = mul i64 %233, %253
  %255 = shl i64 %254, 3
  %256 = add i64 %255, %237
  %257 = add i64 %248, %256
  %258 = inttoptr i64 %257 to double*
  %259 = load double, double* %258
  %260 = fadd double %251, %259
  %261 = add i32 %228, 1
  %262 = sext i32 %261 to i64
  %263 = mul i64 %234, %262
  %264 = shl i64 %263, 3
  %265 = add i64 %264, %226
  %266 = add i64 %243, %265
  %267 = add i64 %248, %266
  %268 = inttoptr i64 %267 to double*
  %269 = load double, double* %268
  %270 = fadd double %260, %269
  store i64 %234, i64* %15, align 8, !tbaa !1240
  %271 = add i64 %255, %265
  %272 = add i64 %248, %271
  %273 = inttoptr i64 %272 to double*
  %274 = load double, double* %273
  %275 = fadd double %270, %274
  store double %275, double* %570, align 1, !tbaa !1244
  store i64 0, i64* %571, align 1, !tbaa !1244
  %276 = add i64 %573, %248
  %277 = inttoptr i64 %276 to double*
  store double %275, double* %277
  %278 = inttoptr i64 %565 to i32*
  %279 = load i32, i32* %278
  %280 = add i32 %279, 1
  %281 = inttoptr i64 %565 to i32*
  store i32 %280, i32* %281
  %282 = add i64 %470, -12
  br label %block_40354c

block_40377a:                                     ; preds = %block_403773, %block_40378b
  %283 = phi i64 [ %471, %block_403773 ], [ %406, %block_40378b ]
  %284 = phi %struct.Memory* [ %454, %block_403773 ], [ %284, %block_40378b ]
  %285 = inttoptr i64 %565 to i32*
  %286 = load i32, i32* %285
  %287 = inttoptr i64 %566 to i32*
  %288 = load i32, i32* %287
  %289 = add i32 %288, -1
  %290 = sub i32 %286, %289
  %291 = lshr i32 %290, 31
  %292 = lshr i32 %286, 31
  %293 = lshr i32 %289, 31
  %294 = xor i32 %293, %292
  %295 = xor i32 %291, %292
  %296 = add nuw nsw i32 %295, %294
  %297 = icmp eq i32 %296, 2
  %298 = icmp ne i32 %291, 0
  %299 = xor i1 %298, %297
  %300 = select i1 %299, i64 17, i64 353
  %301 = add i64 %283, %300
  br i1 %299, label %block_40378b, label %block_4038db

block_40378b:                                     ; preds = %block_40377a
  %302 = inttoptr i64 %574 to i64*
  %303 = load i64, i64* %302
  %304 = inttoptr i64 %559 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = inttoptr i64 %575 to i64*
  %308 = load i64, i64* %307
  %309 = inttoptr i64 %576 to i64*
  %310 = load i64, i64* %309
  %311 = mul i64 %310, %308
  %312 = mul i64 %311, %306
  %313 = shl i64 %312, 3
  %314 = add i64 %313, %303
  %315 = inttoptr i64 %563 to i32*
  %316 = load i32, i32* %315
  %317 = sext i32 %316 to i64
  %318 = mul i64 %310, %317
  %319 = shl i64 %318, 3
  %320 = add i64 %319, %314
  %321 = sext i32 %286 to i64
  %322 = shl nsw i64 %321, 3
  %323 = add i64 %322, %320
  %324 = inttoptr i64 %323 to double*
  %325 = load double, double* %324
  %326 = inttoptr i64 %577 to i64*
  %327 = load i64, i64* %326
  %328 = inttoptr i64 %327 to double*
  %329 = load double, double* %328
  %330 = inttoptr i64 %567 to i64*
  %331 = load i64, i64* %330
  %332 = inttoptr i64 %568 to i64*
  %333 = load i64, i64* %332
  %334 = inttoptr i64 %569 to i64*
  %335 = load i64, i64* %334
  %336 = mul i64 %335, %333
  %337 = mul i64 %336, %306
  %338 = shl i64 %337, 3
  %339 = add i64 %338, %331
  %340 = mul i64 %335, %317
  %341 = shl i64 %340, 3
  %342 = add i64 %341, %339
  %343 = add i64 %322, %342
  %344 = inttoptr i64 %343 to double*
  %345 = load double, double* %344
  %346 = fmul double %329, %345
  %347 = fsub double %325, %346
  %348 = add i64 %327, 16
  %349 = inttoptr i64 %348 to double*
  %350 = load double, double* %349
  %351 = add i64 %573, %322
  %352 = inttoptr i64 %351 to double*
  %353 = load double, double* %352
  %354 = add i32 %286, -1
  %355 = sext i32 %354 to i64
  %356 = shl nsw i64 %355, 3
  %357 = add nsw i64 %356, -2176
  %358 = add i64 %357, %557
  %359 = inttoptr i64 %358 to double*
  %360 = load double, double* %359
  %361 = fadd double %353, %360
  %362 = add i32 %286, 1
  %363 = zext i32 %362 to i64
  %364 = sext i32 %362 to i64
  %365 = shl nsw i64 %364, 3
  %366 = add nsw i64 %365, -2176
  %367 = add i64 %366, %557
  %368 = inttoptr i64 %367 to double*
  %369 = load double, double* %368
  %370 = fadd double %361, %369
  %371 = fmul double %350, %370
  %372 = fsub double %347, %371
  %373 = add i64 %327, 24
  %374 = inttoptr i64 %373 to double*
  %375 = load double, double* %374
  %376 = add nsw i64 %356, -4256
  %377 = add i64 %376, %557
  %378 = inttoptr i64 %377 to double*
  %379 = load double, double* %378
  store i64 %363, i64* %20, align 8, !tbaa !1240
  %380 = add nsw i64 %365, -4256
  %381 = add i64 %380, %557
  %382 = inttoptr i64 %381 to double*
  %383 = load double, double* %382
  %384 = fadd double %379, %383
  store double %384, double* %580, align 1, !tbaa !1244
  store i64 0, i64* %581, align 1, !tbaa !1244
  %385 = fmul double %375, %384
  store double %385, double* %578, align 1, !tbaa !1244
  store i64 0, i64* %579, align 1, !tbaa !1244
  %386 = fsub double %372, %385
  store double %386, double* %570, align 1, !tbaa !1244
  store i64 0, i64* %571, align 1, !tbaa !1244
  %387 = inttoptr i64 %582 to i64*
  %388 = load i64, i64* %387
  %389 = inttoptr i64 %583 to i64*
  %390 = load i64, i64* %389
  %391 = inttoptr i64 %584 to i64*
  %392 = load i64, i64* %391
  store i64 %392, i64* %21, align 8, !tbaa !1240
  %393 = mul i64 %392, %390
  store i64 %393, i64* %15, align 8, !tbaa !1240
  %394 = mul i64 %393, %306
  %395 = shl i64 %394, 3
  %396 = add i64 %395, %388
  %397 = mul i64 %392, %317
  %398 = shl i64 %397, 3
  %399 = add i64 %398, %396
  %400 = add i64 %322, %399
  %401 = inttoptr i64 %400 to double*
  store double %386, double* %401
  %402 = inttoptr i64 %565 to i32*
  %403 = load i32, i32* %402
  %404 = add i32 %403, 1
  %405 = inttoptr i64 %565 to i32*
  store i32 %404, i32* %405
  %406 = add i64 %301, -17
  br label %block_40377a

block_403940:                                     ; preds = %block_403919
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2026), i64* %20, align 8, !tbaa !1240
  %407 = load i64, i64* %19, align 8
  %408 = add i64 %407, -88
  %409 = inttoptr i64 %408 to i64*
  %410 = load i64, i64* %409
  %411 = add i64 %407, -52
  %412 = inttoptr i64 %411 to i32*
  %413 = load i32, i32* %412
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %16, align 8, !tbaa !1240
  %415 = add i64 %407, -56
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %15, align 8, !tbaa !1240
  %419 = add i64 %407, -60
  %420 = inttoptr i64 %419 to i32*
  %421 = load i32, i32* %420
  %422 = zext i32 %421 to i64
  store i64 %422, i64* %14, align 8, !tbaa !1240
  %423 = add i64 %407, 24
  %424 = inttoptr i64 %423 to i32*
  %425 = load i32, i32* %424
  %426 = zext i32 %425 to i64
  store i64 %426, i64* %21, align 8, !tbaa !1240
  store i64 %410, i64* %17, align 8, !tbaa !1240
  %427 = add i64 %534, 12512
  %428 = add i64 %534, 35
  %429 = load i64, i64* %18, align 8, !tbaa !1240
  %430 = add i64 %429, -8
  %431 = inttoptr i64 %430 to i64*
  store i64 %428, i64* %431
  store i64 %430, i64* %18, align 8, !tbaa !1240
  %432 = tail call %struct.Memory* @sub_406a20_rep_nrm(%struct.State* nonnull %0, i64 %427, %struct.Memory* %521)
  %433 = load i64, i64* %3, align 8
  br label %block_403963

block_403534:                                     ; preds = %block_40352d, %block_4038db
  %434 = phi i64 [ %473, %block_40352d ], [ %165, %block_4038db ]
  %435 = phi %struct.Memory* [ %476, %block_40352d ], [ %284, %block_4038db ]
  %436 = inttoptr i64 %563 to i32*
  %437 = load i32, i32* %436
  %438 = inttoptr i64 %564 to i32*
  %439 = load i32, i32* %438
  %440 = add i32 %439, -1
  %441 = sub i32 %437, %440
  %442 = lshr i32 %441, 31
  %443 = lshr i32 %437, 31
  %444 = lshr i32 %440, 31
  %445 = xor i32 %444, %443
  %446 = xor i32 %442, %443
  %447 = add nuw nsw i32 %446, %445
  %448 = icmp eq i32 %447, 2
  %449 = icmp ne i32 %442, 0
  %450 = xor i1 %449, %448
  %451 = select i1 %450, i64 17, i64 954
  %452 = add i64 %434, %451
  br i1 %450, label %block_403545, label %block_4038ee

block_40354c:                                     ; preds = %block_403545, %block_403558
  %453 = phi i64 [ %592, %block_403545 ], [ %282, %block_403558 ]
  %454 = phi %struct.Memory* [ %435, %block_403545 ], [ %454, %block_403558 ]
  %455 = inttoptr i64 %565 to i32*
  %456 = load i32, i32* %455
  %457 = inttoptr i64 %566 to i32*
  %458 = load i32, i32* %457
  %459 = sub i32 %456, %458
  %460 = lshr i32 %459, 31
  %461 = lshr i32 %456, 31
  %462 = lshr i32 %458, 31
  %463 = xor i32 %462, %461
  %464 = xor i32 %460, %461
  %465 = add nuw nsw i32 %464, %463
  %466 = icmp eq i32 %465, 2
  %467 = icmp ne i32 %460, 0
  %468 = xor i1 %467, %466
  %469 = select i1 %468, i64 12, i64 551
  %470 = add i64 %453, %469
  br i1 %468, label %block_403558, label %block_403773

block_403773:                                     ; preds = %block_40354c
  %471 = add i64 %470, 7
  %472 = inttoptr i64 %565 to i32*
  store i32 1, i32* %472
  br label %block_40377a

block_40352d:                                     ; preds = %block_40351c
  %473 = add i64 %493, 7
  %474 = inttoptr i64 %563 to i32*
  store i32 1, i32* %474
  br label %block_403534

block_40351c:                                     ; preds = %block_403515, %block_4038ee
  %475 = phi i64 [ %560, %block_403515 ], [ %160, %block_4038ee ]
  %476 = phi %struct.Memory* [ %558, %block_403515 ], [ %435, %block_4038ee ]
  %477 = inttoptr i64 %559 to i32*
  %478 = load i32, i32* %477
  %479 = inttoptr i64 %562 to i32*
  %480 = load i32, i32* %479
  %481 = add i32 %480, -1
  %482 = sub i32 %478, %481
  %483 = lshr i32 %482, 31
  %484 = lshr i32 %478, 31
  %485 = lshr i32 %481, 31
  %486 = xor i32 %485, %484
  %487 = xor i32 %483, %484
  %488 = add nuw nsw i32 %487, %486
  %489 = icmp eq i32 %488, 2
  %490 = icmp ne i32 %483, 0
  %491 = xor i1 %490, %489
  %492 = select i1 %491, i64 17, i64 997
  %493 = add i64 %475, %492
  br i1 %491, label %block_40352d, label %block_403901

block_403919:                                     ; preds = %block_403901, %block_40390f
  %494 = phi i64 [ %644, %block_403901 ], [ %591, %block_40390f ]
  %495 = phi %struct.Memory* [ %476, %block_403901 ], [ %590, %block_40390f ]
  %496 = load i64, i64* %19, align 8
  %497 = add i64 %496, -88
  %498 = inttoptr i64 %497 to i64*
  %499 = load i64, i64* %498
  %500 = add i64 %496, -52
  %501 = inttoptr i64 %500 to i32*
  %502 = load i32, i32* %501
  %503 = zext i32 %502 to i64
  store i64 %503, i64* %16, align 8, !tbaa !1240
  %504 = add i64 %496, -56
  %505 = inttoptr i64 %504 to i32*
  %506 = load i32, i32* %505
  %507 = zext i32 %506 to i64
  store i64 %507, i64* %15, align 8, !tbaa !1240
  %508 = add i64 %496, -60
  %509 = inttoptr i64 %508 to i32*
  %510 = load i32, i32* %509
  %511 = zext i32 %510 to i64
  store i64 %511, i64* %14, align 8, !tbaa !1240
  %512 = add i64 %496, 24
  %513 = inttoptr i64 %512 to i32*
  %514 = load i32, i32* %513
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %20, align 8, !tbaa !1240
  store i64 %499, i64* %17, align 8, !tbaa !1240
  %516 = add i64 %494, 11591
  %517 = add i64 %494, 25
  %518 = load i64, i64* %18, align 8, !tbaa !1240
  %519 = add i64 %518, -8
  %520 = inttoptr i64 %519 to i64*
  store i64 %517, i64* %520
  store i64 %519, i64* %18, align 8, !tbaa !1240
  %521 = tail call %struct.Memory* @sub_406660_comm3(%struct.State* nonnull %0, i64 %516, %struct.Memory* %495)
  %522 = load i64, i64* %3, align 8
  %523 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1200) to i32*)
  %524 = add i32 %523, -1
  %525 = lshr i32 %524, 31
  %526 = trunc i32 %525 to i8
  %527 = lshr i32 %523, 31
  %528 = xor i32 %525, %527
  %529 = add nuw nsw i32 %528, %527
  %530 = icmp eq i32 %529, 2
  %531 = icmp ne i8 %526, 0
  %532 = xor i1 %531, %530
  %533 = select i1 %532, i64 49, i64 14
  %534 = add i64 %522, %533
  br i1 %532, label %block_403963, label %block_403940

block_403963:                                     ; preds = %block_403919, %block_403940
  %535 = phi i64 [ %534, %block_403919 ], [ %433, %block_403940 ]
  %536 = phi %struct.Memory* [ %521, %block_403919 ], [ %432, %block_403940 ]
  %537 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1208) to i32*)
  %538 = zext i32 %537 to i64
  store i64 %538, i64* %12, align 8, !tbaa !1240
  %539 = load i64, i64* %19, align 8
  %540 = add i64 %539, 24
  %541 = inttoptr i64 %540 to i32*
  %542 = load i32, i32* %541
  %543 = sub i32 %537, %542
  %544 = lshr i32 %543, 31
  %545 = trunc i32 %544 to i8
  %546 = lshr i32 %537, 31
  %547 = lshr i32 %542, 31
  %548 = xor i32 %547, %546
  %549 = xor i32 %544, %546
  %550 = add nuw nsw i32 %549, %548
  %551 = icmp eq i32 %550, 2
  %552 = icmp ne i8 %545, 0
  %553 = xor i1 %552, %551
  %554 = select i1 %553, i64 37, i64 16
  %555 = add i64 %535, %554
  br i1 %553, label %block_403988, label %block_403973

block_403515:                                     ; preds = %block_40350b, %block_403460
  %556 = phi i64 [ %134, %block_403460 ], [ %601, %block_40350b ]
  %557 = phi i64 [ %115, %block_403460 ], [ %600, %block_40350b ]
  %558 = phi %struct.Memory* [ %2, %block_403460 ], [ %599, %block_40350b ]
  %559 = add i64 %557, -92
  %560 = add i64 %556, 7
  %561 = inttoptr i64 %559 to i32*
  store i32 1, i32* %561
  %562 = add i64 %557, -60
  %563 = add i64 %557, -96
  %564 = add i64 %557, -56
  %565 = add i64 %557, -100
  %566 = add i64 %557, -52
  %567 = add i64 %557, -72
  %568 = add i64 %557, -4280
  %569 = add i64 %557, -4288
  %570 = bitcast [32 x %union.VectorReg]* %26 to double*
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %572 = add i64 %557, -2176
  %573 = add i64 %557, -4256
  %574 = add i64 %557, -80
  %575 = add i64 %557, -4296
  %576 = add i64 %557, -4304
  %577 = add i64 %557, 16
  %578 = bitcast %union.VectorReg* %27 to double*
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %580 = bitcast %union.VectorReg* %28 to double*
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %582 = add i64 %557, -88
  %583 = add i64 %557, -4312
  %584 = add i64 %557, -4320
  br label %block_40351c

block_40390f:                                     ; preds = %block_403901
  store i64 4, i64* %17, align 8, !tbaa !1240
  %585 = add i64 %644, -11375
  %586 = add i64 %644, 10
  %587 = load i64, i64* %18, align 8, !tbaa !1240
  %588 = add i64 %587, -8
  %589 = inttoptr i64 %588 to i64*
  store i64 %586, i64* %589
  store i64 %588, i64* %18, align 8, !tbaa !1240
  %590 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %585, %struct.Memory* %476)
  %591 = load i64, i64* %3, align 8
  br label %block_403919

block_403545:                                     ; preds = %block_403534
  %592 = add i64 %452, 7
  %593 = inttoptr i64 %565 to i32*
  store i32 0, i32* %593
  br label %block_40354c

block_40350b:                                     ; preds = %block_403460
  store i64 4, i64* %17, align 8, !tbaa !1240
  %594 = add i64 %134, -10427
  %595 = add i64 %134, 10
  %596 = load i64, i64* %18, align 8, !tbaa !1240
  %597 = add i64 %596, -8
  %598 = inttoptr i64 %597 to i64*
  store i64 %595, i64* %598
  store i64 %597, i64* %18, align 8, !tbaa !1240
  %599 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %594, %struct.Memory* %2)
  %600 = load i64, i64* %19, align 8
  %601 = load i64, i64* %3, align 8
  br label %block_403515

block_403988:                                     ; preds = %block_403963, %block_403973
  %602 = phi %struct.Memory* [ %536, %block_403963 ], [ %155, %block_403973 ]
  %603 = load i64, i64* %18, align 8
  %604 = add i64 %603, 4296
  %605 = icmp ugt i64 %603, -4297
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %43, align 1, !tbaa !1246
  %607 = trunc i64 %604 to i32
  %608 = and i32 %607, 255
  %609 = tail call i32 @llvm.ctpop.i32(i32 %608) #11
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  %612 = xor i8 %611, 1
  store i8 %612, i8* %44, align 1, !tbaa !1260
  %613 = xor i64 %604, %603
  %614 = lshr i64 %613, 4
  %615 = trunc i64 %614 to i8
  %616 = and i8 %615, 1
  store i8 %616, i8* %45, align 1, !tbaa !1261
  %617 = icmp eq i64 %604, 0
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %46, align 1, !tbaa !1262
  %619 = lshr i64 %604, 63
  %620 = trunc i64 %619 to i8
  store i8 %620, i8* %47, align 1, !tbaa !1263
  %621 = lshr i64 %603, 63
  %622 = xor i64 %619, %621
  %623 = add nuw nsw i64 %622, %619
  %624 = icmp eq i64 %623, 2
  %625 = zext i1 %624 to i8
  store i8 %625, i8* %48, align 1, !tbaa !1264
  %626 = add i64 %603, 4304
  %627 = inttoptr i64 %604 to i64*
  %628 = load i64, i64* %627
  store i64 %628, i64* %13, align 8, !tbaa !1240
  %629 = add i64 %603, 4312
  %630 = inttoptr i64 %626 to i64*
  %631 = load i64, i64* %630
  store i64 %631, i64* %24, align 8, !tbaa !1240
  %632 = add i64 %603, 4320
  %633 = inttoptr i64 %629 to i64*
  %634 = load i64, i64* %633
  store i64 %634, i64* %25, align 8, !tbaa !1240
  %635 = add i64 %603, 4328
  %636 = inttoptr i64 %632 to i64*
  %637 = load i64, i64* %636
  store i64 %637, i64* %19, align 8, !tbaa !1240
  %638 = inttoptr i64 %635 to i64*
  %639 = load i64, i64* %638
  store i64 %639, i64* %3, align 8, !tbaa !1240
  %640 = add i64 %603, 4336
  store i64 %640, i64* %18, align 8, !tbaa !1240
  ret %struct.Memory* %602

block_403901:                                     ; preds = %block_40351c
  %641 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %642 = icmp eq i32 %641, 0
  %643 = select i1 %642, i64 24, i64 14
  %644 = add i64 %493, %643
  br i1 %642, label %block_403919, label %block_40390f
}

; Function Attrs: noinline
define %struct.Memory* @sub_406ad0_showall(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_406ad0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %10 = bitcast %union.anon* %9 to i32*
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %20 = load i64, i64* %17, align 8
  %21 = load i64, i64* %16, align 8, !tbaa !1240
  %22 = add i64 %21, -8
  %23 = inttoptr i64 %22 to i64*
  store i64 %20, i64* %23
  store i64 %22, i64* %17, align 8, !tbaa !1240
  %24 = add i64 %21, -120
  store i64 %24, i64* %16, align 8, !tbaa !1240
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %31 = add i64 %21, -16
  %32 = load i64, i64* %15, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %32, i64* %33
  %34 = add i64 %21, -20
  %35 = load i32, i32* %10, align 4
  %36 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %36
  %37 = add i64 %21, -24
  %38 = load i32, i32* %8, align 4
  %39 = inttoptr i64 %37 to i32*
  store i32 %38, i32* %39
  %40 = add i64 %21, -28
  %41 = load i32, i32* %6, align 4
  %42 = inttoptr i64 %40 to i32*
  store i32 %41, i32* %42
  %43 = inttoptr i64 %37 to i32*
  %44 = load i32, i32* %43
  %45 = zext i32 %44 to i64
  %46 = inttoptr i64 %34 to i32*
  %47 = load i32, i32* %46
  %48 = zext i32 %47 to i64
  store i64 %48, i64* %12, align 8, !tbaa !1240
  %49 = inttoptr i64 %31 to i64*
  %50 = load i64, i64* %49
  store i64 %50, i64* %18, align 8, !tbaa !1240
  %51 = add i64 %21, -40
  %52 = inttoptr i64 %51 to i64*
  store i64 %50, i64* %52
  %53 = inttoptr i64 %34 to i32*
  %54 = load i32, i32* %53
  %55 = add i32 %54, -18
  %56 = lshr i32 %55, 31
  %57 = trunc i32 %56 to i8
  %58 = lshr i32 %54, 31
  %59 = xor i32 %56, %58
  %60 = add nuw nsw i32 %59, %58
  %61 = icmp eq i32 %60, 2
  %62 = load i64, i64* %17, align 8
  %63 = add i64 %62, -64
  %64 = inttoptr i64 %63 to i64*
  store i64 %45, i64* %64
  %65 = add i64 %62, -72
  %66 = inttoptr i64 %65 to i64*
  store i64 %48, i64* %66
  %67 = icmp ne i8 %57, 0
  %68 = xor i1 %67, %61
  %69 = select i1 %68, i64 57, i64 68
  %70 = add i64 %69, %1
  br i1 %68, label %block_406b09, label %block_406b14

block_406bc4:                                     ; preds = %block_406bb8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1975), i64* %15, align 8, !tbaa !1240
  %71 = add i64 %175, -32
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %11, align 8, !tbaa !1240
  %74 = add i64 %175, -44
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75
  %77 = sext i32 %76 to i64
  %78 = add i64 %175, -64
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  %81 = add i64 %175, -72
  %82 = inttoptr i64 %81 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %14, align 8, !tbaa !1240
  %84 = sext i64 %80 to i128
  %85 = and i128 %84, -18446744073709551616
  %86 = sext i64 %83 to i128
  %87 = and i128 %86, -18446744073709551616
  %88 = zext i64 %80 to i128
  %89 = or i128 %85, %88
  %90 = zext i64 %83 to i128
  %91 = or i128 %87, %90
  %92 = mul nsw i128 %91, %89
  %93 = trunc i128 %92 to i64
  store i64 %93, i64* %13, align 8, !tbaa !1240
  %94 = sext i64 %93 to i128
  %95 = sext i32 %76 to i128
  %96 = and i128 %95, -18446744073709551616
  %97 = and i128 %94, -18446744073709551616
  %98 = zext i64 %77 to i128
  %99 = or i128 %96, %98
  %100 = and i128 %92, 18446744073709551615
  %101 = or i128 %97, %100
  %102 = mul nsw i128 %101, %99
  %103 = trunc i128 %102 to i64
  %104 = shl i64 %103, 3
  %105 = load i64, i64* %11, align 8
  %106 = add i64 %104, %105
  %107 = load i64, i64* %17, align 8
  %108 = add i64 %107, -40
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109
  %111 = sext i32 %110 to i64
  %112 = load i64, i64* %14, align 8
  %113 = mul i64 %112, %111
  %114 = shl i64 %113, 3
  %115 = add i64 %114, %106
  %116 = add i64 %107, -36
  %117 = inttoptr i64 %116 to i32*
  %118 = load i32, i32* %117
  %119 = sext i32 %118 to i64
  store i64 %119, i64* %12, align 8, !tbaa !1240
  %120 = shl nsw i64 %119, 3
  %121 = add i64 %120, %115
  %122 = inttoptr i64 %121 to double*
  %123 = load double, double* %122
  store double %123, double* %542, align 1, !tbaa !1244
  store double 0.000000e+00, double* %544, align 1, !tbaa !1244
  %124 = add i64 %195, 72
  %125 = load i64, i64* %16, align 8, !tbaa !1240
  %126 = add i64 %125, -8
  %127 = inttoptr i64 %126 to i64*
  store i64 %124, i64* %127
  %128 = load i64, i64* %15, align 8, !alias.scope !1265, !noalias !1268
  %129 = load i64, i64* %497, align 8, !alias.scope !1265, !noalias !1268
  %130 = load i64, i64* %496, align 8, !alias.scope !1265, !noalias !1268
  %131 = inttoptr i64 %125 to i64*
  %132 = load i64, i64* %131
  %133 = add i64 %125, 8
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  %136 = add i64 %125, 16
  %137 = inttoptr i64 %136 to i64*
  %138 = load i64, i64* %137
  %139 = add i64 %125, 24
  %140 = inttoptr i64 %139 to i64*
  %141 = load i64, i64* %140
  %142 = add i64 %125, 32
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  %145 = add i64 %125, 40
  %146 = inttoptr i64 %145 to i64*
  %147 = load i64, i64* %146
  %148 = add i64 %125, 48
  %149 = inttoptr i64 %148 to i64*
  %150 = load i64, i64* %149
  %151 = add i64 %125, 56
  %152 = inttoptr i64 %151 to i64*
  %153 = load i64, i64* %152
  %154 = add i64 %125, 64
  %155 = inttoptr i64 %154 to i64*
  %156 = load i64, i64* %155
  %157 = add i64 %125, 72
  %158 = inttoptr i64 %157 to i64*
  %159 = load i64, i64* %158
  %160 = inttoptr i64 %126 to i64*
  %161 = load i64, i64* %160
  store i64 %161, i64* %3, align 8, !alias.scope !1265, !noalias !1268
  store i64 %125, i64* %16, align 8, !alias.scope !1265, !noalias !1268
  %162 = tail call i64 @printf(i64 %128, i64 %129, i64 %130, i64 %119, i64 %199, i64 %200, i64 %132, i64 %135, i64 %138, i64 %141, i64 %144, i64 %147, i64 %150, i64 %153, i64 %156, i64 %159), !noalias !1265
  %163 = load i64, i64* %17, align 8
  %164 = add i64 %163, -92
  %165 = trunc i64 %162 to i32
  %166 = load i64, i64* %3, align 8
  %167 = inttoptr i64 %164 to i32*
  store i32 %165, i32* %167
  %168 = add i64 %163, -40
  %169 = inttoptr i64 %168 to i32*
  %170 = load i32, i32* %169
  %171 = add i32 %170, 1
  %172 = inttoptr i64 %168 to i32*
  store i32 %171, i32* %172
  %173 = add i64 %166, -84
  br label %block_406bb8

block_406bb8:                                     ; preds = %block_406bb1, %block_406bc4
  %174 = phi i64 [ %197, %block_406bb1 ], [ %173, %block_406bc4 ]
  %175 = phi i64 [ %314, %block_406bb1 ], [ %163, %block_406bc4 ]
  %176 = phi %struct.Memory* [ %315, %block_406bb1 ], [ %176, %block_406bc4 ]
  %177 = add i64 %175, -40
  %178 = inttoptr i64 %177 to i32*
  %179 = load i32, i32* %178
  %180 = add i64 %175, -52
  %181 = inttoptr i64 %180 to i32*
  %182 = load i32, i32* %181
  %183 = sub i32 %179, %182
  %184 = lshr i32 %183, 31
  %185 = trunc i32 %184 to i8
  %186 = lshr i32 %179, 31
  %187 = lshr i32 %182, 31
  %188 = xor i32 %187, %186
  %189 = xor i32 %184, %186
  %190 = add nuw nsw i32 %189, %188
  %191 = icmp eq i32 %190, 2
  %192 = icmp ne i8 %185, 0
  %193 = xor i1 %192, %191
  %194 = select i1 %193, i64 12, i64 101
  %195 = add i64 %174, %194
  br i1 %193, label %block_406bc4, label %block_406c1d

block_406bb1:                                     ; preds = %block_406ba5
  %196 = add i64 %314, -40
  %197 = add i64 %334, 7
  %198 = inttoptr i64 %196 to i32*
  store i32 0, i32* %198
  %199 = load i64, i64* %18, align 8
  %200 = load i64, i64* %498, align 8
  br label %block_406bb8

block_406b9e:                                     ; preds = %block_406b92
  %201 = add i64 %409, -36
  %202 = add i64 %429, 7
  %203 = inttoptr i64 %201 to i32*
  store i32 0, i32* %203
  br label %block_406ba5

block_406b14:                                     ; preds = %block_406ad0
  %204 = add i64 %70, 5
  br label %block_406b21

block_406c3f:                                     ; preds = %block_406ba5
  %205 = add i64 %334, 17
  %206 = load i64, i64* %16, align 8, !tbaa !1240
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %205, i64* %208
  %209 = load i64, i64* %497, align 8, !alias.scope !1270, !noalias !1273
  %210 = load i64, i64* %496, align 8, !alias.scope !1270, !noalias !1273
  %211 = load i64, i64* %495, align 8, !alias.scope !1270, !noalias !1273
  %212 = load i64, i64* %18, align 8, !alias.scope !1270, !noalias !1273
  %213 = load i64, i64* %498, align 8, !alias.scope !1270, !noalias !1273
  %214 = inttoptr i64 %206 to i64*
  %215 = load i64, i64* %214
  %216 = add i64 %206, 8
  %217 = inttoptr i64 %216 to i64*
  %218 = load i64, i64* %217
  %219 = add i64 %206, 16
  %220 = inttoptr i64 %219 to i64*
  %221 = load i64, i64* %220
  %222 = add i64 %206, 24
  %223 = inttoptr i64 %222 to i64*
  %224 = load i64, i64* %223
  %225 = add i64 %206, 32
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %206, 40
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %206, 48
  %232 = inttoptr i64 %231 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %206, 56
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235
  %237 = add i64 %206, 64
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %206, 72
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = inttoptr i64 %207 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %3, align 8, !alias.scope !1270, !noalias !1273
  store i64 %206, i64* %16, align 8, !alias.scope !1270, !noalias !1273
  %245 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1981), i64 %209, i64 %210, i64 %211, i64 %212, i64 %213, i64 %215, i64 %218, i64 %221, i64 %224, i64 %227, i64 %230, i64 %233, i64 %236, i64 %239, i64 %242), !noalias !1270
  %246 = load i64, i64* %17, align 8
  %247 = add i64 %246, -100
  %248 = trunc i64 %245 to i32
  %249 = load i64, i64* %3, align 8
  %250 = inttoptr i64 %247 to i32*
  store i32 %248, i32* %250
  %251 = add i64 %246, -44
  %252 = inttoptr i64 %251 to i32*
  %253 = load i32, i32* %252
  %254 = add i32 %253, 1
  %255 = inttoptr i64 %251 to i32*
  store i32 %254, i32* %255
  %256 = add i64 %249, -190
  br label %block_406b92

block_406c1d:                                     ; preds = %block_406bb8
  %257 = add i64 %195, 17
  %258 = load i64, i64* %16, align 8, !tbaa !1240
  %259 = add i64 %258, -8
  %260 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %260
  %261 = load i64, i64* %497, align 8, !alias.scope !1275, !noalias !1278
  %262 = load i64, i64* %496, align 8, !alias.scope !1275, !noalias !1278
  %263 = load i64, i64* %495, align 8, !alias.scope !1275, !noalias !1278
  %264 = load i64, i64* %18, align 8, !alias.scope !1275, !noalias !1278
  %265 = load i64, i64* %498, align 8, !alias.scope !1275, !noalias !1278
  %266 = inttoptr i64 %258 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %258, 8
  %269 = inttoptr i64 %268 to i64*
  %270 = load i64, i64* %269
  %271 = add i64 %258, 16
  %272 = inttoptr i64 %271 to i64*
  %273 = load i64, i64* %272
  %274 = add i64 %258, 24
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  %277 = add i64 %258, 32
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  %280 = add i64 %258, 40
  %281 = inttoptr i64 %280 to i64*
  %282 = load i64, i64* %281
  %283 = add i64 %258, 48
  %284 = inttoptr i64 %283 to i64*
  %285 = load i64, i64* %284
  %286 = add i64 %258, 56
  %287 = inttoptr i64 %286 to i64*
  %288 = load i64, i64* %287
  %289 = add i64 %258, 64
  %290 = inttoptr i64 %289 to i64*
  %291 = load i64, i64* %290
  %292 = add i64 %258, 72
  %293 = inttoptr i64 %292 to i64*
  %294 = load i64, i64* %293
  %295 = inttoptr i64 %259 to i64*
  %296 = load i64, i64* %295
  store i64 %296, i64* %3, align 8, !alias.scope !1275, !noalias !1278
  store i64 %258, i64* %16, align 8, !alias.scope !1275, !noalias !1278
  %297 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2606), i64 %261, i64 %262, i64 %263, i64 %264, i64 %265, i64 %267, i64 %270, i64 %273, i64 %276, i64 %279, i64 %282, i64 %285, i64 %288, i64 %291, i64 %294), !noalias !1275
  %298 = load i64, i64* %17, align 8
  %299 = add i64 %298, -96
  %300 = trunc i64 %297 to i32
  %301 = load i64, i64* %3, align 8
  %302 = inttoptr i64 %299 to i32*
  store i32 %300, i32* %302
  %303 = add i64 %298, -36
  %304 = inttoptr i64 %303 to i32*
  %305 = load i32, i32* %304
  %306 = add i32 %305, 1
  %307 = inttoptr i64 %303 to i32*
  store i32 %306, i32* %307
  %308 = add i64 %301, -137
  br label %block_406ba5

block_406b09:                                     ; preds = %block_406ad0
  %309 = add i64 %62, -12
  %310 = add i64 %70, 3
  %311 = inttoptr i64 %309 to i32*
  %312 = load i32, i32* %311
  br label %block_406b21

block_406ba5:                                     ; preds = %block_406c1d, %block_406b9e
  %313 = phi i64 [ %202, %block_406b9e ], [ %308, %block_406c1d ]
  %314 = phi i64 [ %409, %block_406b9e ], [ %298, %block_406c1d ]
  %315 = phi %struct.Memory* [ %410, %block_406b9e ], [ %176, %block_406c1d ]
  %316 = add i64 %314, -36
  %317 = inttoptr i64 %316 to i32*
  %318 = load i32, i32* %317
  %319 = add i64 %314, -48
  %320 = inttoptr i64 %319 to i32*
  %321 = load i32, i32* %320
  %322 = sub i32 %318, %321
  %323 = lshr i32 %322, 31
  %324 = trunc i32 %323 to i8
  %325 = lshr i32 %318, 31
  %326 = lshr i32 %321, 31
  %327 = xor i32 %326, %325
  %328 = xor i32 %323, %325
  %329 = add nuw nsw i32 %328, %327
  %330 = icmp eq i32 %329, 2
  %331 = icmp ne i8 %324, 0
  %332 = xor i1 %331, %330
  %333 = select i1 %332, i64 12, i64 154
  %334 = add i64 %313, %333
  br i1 %332, label %block_406bb1, label %block_406c3f

block_406c61:                                     ; preds = %block_406b92
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1970), i64* %15, align 8, !tbaa !1240
  %335 = add i64 %429, 17
  %336 = load i64, i64* %16, align 8, !tbaa !1240
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338
  %339 = load i64, i64* %497, align 8, !alias.scope !1280, !noalias !1283
  %340 = load i64, i64* %496, align 8, !alias.scope !1280, !noalias !1283
  %341 = load i64, i64* %495, align 8, !alias.scope !1280, !noalias !1283
  %342 = load i64, i64* %18, align 8, !alias.scope !1280, !noalias !1283
  %343 = load i64, i64* %498, align 8, !alias.scope !1280, !noalias !1283
  %344 = inttoptr i64 %336 to i64*
  %345 = load i64, i64* %344
  %346 = add i64 %336, 8
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = add i64 %336, 16
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = add i64 %336, 24
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %336, 32
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  %358 = add i64 %336, 40
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  %361 = add i64 %336, 48
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %336, 56
  %365 = inttoptr i64 %364 to i64*
  %366 = load i64, i64* %365
  %367 = add i64 %336, 64
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368
  %370 = add i64 %336, 72
  %371 = inttoptr i64 %370 to i64*
  %372 = load i64, i64* %371
  store i64 %336, i64* %16, align 8, !alias.scope !1280, !noalias !1283
  %373 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1970), i64 %339, i64 %340, i64 %341, i64 %342, i64 %343, i64 %345, i64 %348, i64 %351, i64 %354, i64 %357, i64 %360, i64 %363, i64 %366, i64 %369, i64 %372), !noalias !1280
  store i64 %373, i64* %494, align 8, !alias.scope !1280, !noalias !1283
  %374 = load i64, i64* %17, align 8
  %375 = add i64 %374, -104
  %376 = trunc i64 %373 to i32
  %377 = inttoptr i64 %375 to i32*
  store i32 %376, i32* %377
  %378 = load i64, i64* %16, align 8
  %379 = add i64 %378, 112
  %380 = icmp ugt i64 %378, -113
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %25, align 1, !tbaa !1246
  %382 = trunc i64 %379 to i32
  %383 = and i32 %382, 255
  %384 = tail call i32 @llvm.ctpop.i32(i32 %383) #11
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  %387 = xor i8 %386, 1
  store i8 %387, i8* %26, align 1, !tbaa !1260
  %388 = xor i64 %378, 16
  %389 = xor i64 %388, %379
  %390 = lshr i64 %389, 4
  %391 = trunc i64 %390 to i8
  %392 = and i8 %391, 1
  store i8 %392, i8* %27, align 1, !tbaa !1261
  %393 = icmp eq i64 %379, 0
  %394 = zext i1 %393 to i8
  store i8 %394, i8* %28, align 1, !tbaa !1262
  %395 = lshr i64 %379, 63
  %396 = trunc i64 %395 to i8
  store i8 %396, i8* %29, align 1, !tbaa !1263
  %397 = lshr i64 %378, 63
  %398 = xor i64 %395, %397
  %399 = add nuw nsw i64 %398, %395
  %400 = icmp eq i64 %399, 2
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %30, align 1, !tbaa !1264
  %402 = add i64 %378, 120
  %403 = inttoptr i64 %379 to i64*
  %404 = load i64, i64* %403
  store i64 %404, i64* %17, align 8, !tbaa !1240
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %3, align 8, !tbaa !1240
  %407 = add i64 %378, 128
  store i64 %407, i64* %16, align 8, !tbaa !1240
  ret %struct.Memory* %410

block_406b92:                                     ; preds = %block_406b21, %block_406c3f
  %408 = phi i64 [ %540, %block_406b21 ], [ %256, %block_406c3f ]
  %409 = phi i64 [ %534, %block_406b21 ], [ %246, %block_406c3f ]
  %410 = phi %struct.Memory* [ %2, %block_406b21 ], [ %315, %block_406c3f ]
  %411 = add i64 %409, -44
  %412 = inttoptr i64 %411 to i32*
  %413 = load i32, i32* %412
  %414 = add i64 %409, -56
  %415 = inttoptr i64 %414 to i32*
  %416 = load i32, i32* %415
  %417 = sub i32 %413, %416
  %418 = lshr i32 %417, 31
  %419 = trunc i32 %418 to i8
  %420 = lshr i32 %413, 31
  %421 = lshr i32 %416, 31
  %422 = xor i32 %421, %420
  %423 = xor i32 %418, %420
  %424 = add nuw nsw i32 %423, %422
  %425 = icmp eq i32 %424, 2
  %426 = icmp ne i8 %419, 0
  %427 = xor i1 %426, %425
  %428 = select i1 %427, i64 12, i64 207
  %429 = add i64 %408, %428
  br i1 %427, label %block_406b9e, label %block_406c61

block_406b21:                                     ; preds = %block_406b09, %block_406b14
  %430 = phi i64 [ %310, %block_406b09 ], [ %204, %block_406b14 ]
  %431 = phi i32 [ %312, %block_406b09 ], [ 18, %block_406b14 ]
  %432 = phi i64 [ 21, %block_406b09 ], [ 8, %block_406b14 ]
  %433 = add i64 %62, -76
  %434 = inttoptr i64 %433 to i32*
  store i32 %431, i32* %434
  %435 = add i64 %432, %430
  %436 = inttoptr i64 %433 to i32*
  %437 = load i32, i32* %436
  %438 = add i64 %62, -48
  %439 = inttoptr i64 %438 to i32*
  store i32 %437, i32* %439
  %440 = add i64 %62, -16
  %441 = inttoptr i64 %440 to i32*
  %442 = load i32, i32* %441
  %443 = add i32 %442, -14
  %444 = lshr i32 %443, 31
  %445 = trunc i32 %444 to i8
  %446 = lshr i32 %442, 31
  %447 = xor i32 %444, %446
  %448 = add nuw nsw i32 %447, %446
  %449 = icmp eq i32 %448, 2
  %450 = icmp ne i8 %445, 0
  %451 = xor i1 %450, %449
  %452 = select i1 %451, i64 16, i64 27
  %453 = add i64 %435, %452
  %454 = select i1 %451, i64 3, i64 5
  %455 = add i64 %453, %454
  %456 = select i1 %451, i32 %442, i32 14
  %457 = select i1 %451, i64 21, i64 8
  %458 = add i64 %62, -80
  %459 = inttoptr i64 %458 to i32*
  store i32 %456, i32* %459
  %460 = add i64 %457, %455
  %461 = inttoptr i64 %458 to i32*
  %462 = load i32, i32* %461
  %463 = add i64 %62, -52
  %464 = inttoptr i64 %463 to i32*
  store i32 %462, i32* %464
  %465 = add i64 %62, -20
  %466 = inttoptr i64 %465 to i32*
  %467 = load i32, i32* %466
  %468 = add i32 %467, -18
  %469 = lshr i32 %468, 31
  %470 = trunc i32 %469 to i8
  %471 = lshr i32 %467, 31
  %472 = xor i32 %469, %471
  %473 = add nuw nsw i32 %472, %471
  %474 = icmp eq i32 %473, 2
  %475 = icmp ne i8 %470, 0
  %476 = xor i1 %475, %474
  %477 = select i1 %476, i64 16, i64 27
  %478 = add i64 %460, %477
  %479 = select i1 %476, i64 3, i64 5
  %480 = add i64 %478, %479
  %481 = select i1 %476, i32 %467, i32 18
  %482 = select i1 %476, i64 21, i64 8
  %483 = add i64 %62, -84
  %484 = inttoptr i64 %483 to i32*
  store i32 %481, i32* %484
  %485 = add i64 %482, %480
  %486 = inttoptr i64 %483 to i32*
  %487 = load i32, i32* %486
  %488 = add i64 %62, -56
  %489 = inttoptr i64 %488 to i32*
  store i32 %487, i32* %489
  %490 = add i64 %485, 23
  %491 = load i64, i64* %16, align 8, !tbaa !1240
  %492 = add i64 %491, -8
  %493 = inttoptr i64 %492 to i64*
  store i64 %490, i64* %493
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %499 = load i64, i64* %497, align 8, !alias.scope !1285, !noalias !1288
  %500 = load i64, i64* %496, align 8, !alias.scope !1285, !noalias !1288
  %501 = load i64, i64* %498, align 8, !alias.scope !1285, !noalias !1288
  %502 = inttoptr i64 %491 to i64*
  %503 = load i64, i64* %502
  %504 = add i64 %491, 8
  %505 = inttoptr i64 %504 to i64*
  %506 = load i64, i64* %505
  %507 = add i64 %491, 16
  %508 = inttoptr i64 %507 to i64*
  %509 = load i64, i64* %508
  %510 = add i64 %491, 24
  %511 = inttoptr i64 %510 to i64*
  %512 = load i64, i64* %511
  %513 = add i64 %491, 32
  %514 = inttoptr i64 %513 to i64*
  %515 = load i64, i64* %514
  %516 = add i64 %491, 40
  %517 = inttoptr i64 %516 to i64*
  %518 = load i64, i64* %517
  %519 = add i64 %491, 48
  %520 = inttoptr i64 %519 to i64*
  %521 = load i64, i64* %520
  %522 = add i64 %491, 56
  %523 = inttoptr i64 %522 to i64*
  %524 = load i64, i64* %523
  %525 = add i64 %491, 64
  %526 = inttoptr i64 %525 to i64*
  %527 = load i64, i64* %526
  %528 = add i64 %491, 72
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = inttoptr i64 %492 to i64*
  %532 = load i64, i64* %531
  store i64 %532, i64* %3, align 8, !alias.scope !1285, !noalias !1288
  store i64 %491, i64* %16, align 8, !alias.scope !1285, !noalias !1288
  %533 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1970), i64 %499, i64 %500, i64 %48, i64 %50, i64 %501, i64 %503, i64 %506, i64 %509, i64 %512, i64 %515, i64 %518, i64 %521, i64 %524, i64 %527, i64 %530), !noalias !1285
  %534 = load i64, i64* %17, align 8
  %535 = add i64 %534, -44
  %536 = load i64, i64* %3, align 8
  %537 = inttoptr i64 %535 to i32*
  store i32 0, i32* %537
  %538 = add i64 %534, -88
  %539 = trunc i64 %533 to i32
  %540 = add i64 %536, 10
  %541 = inttoptr i64 %538 to i32*
  store i32 %539, i32* %541
  %542 = bitcast %union.VectorReg* %19 to double*
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %544 = bitcast i64* %543 to double*
  br label %block_406b92
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400840___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400840:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 8) to i8*)
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1, !tbaa !1246
  %7 = zext i8 %5 to i32
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) #11
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1, !tbaa !1260
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !1261
  %14 = icmp eq i8 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1, !tbaa !1262
  %17 = lshr i8 %5, 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %17, i8* %18, align 1, !tbaa !1263
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !1264
  %20 = select i1 %14, i64 9, i64 32
  %21 = add i64 %20, %1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  br i1 %14, label %block_400849, label %block_400860

block_400860:                                     ; preds = %block_400840
  %23 = load i64, i64* %22, align 8, !tbaa !1240
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  store i64 %25, i64* %3, align 8, !tbaa !1240
  %26 = add i64 %23, 8
  store i64 %26, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %2

block_400849:                                     ; preds = %block_400840
  %27 = load i64, i64* %4, align 8
  %28 = load i64, i64* %22, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %4, align 8, !tbaa !1240
  %31 = add i64 %21, -121
  %32 = add i64 %21, 9
  %33 = add i64 %28, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  store i64 %33, i64* %22, align 8, !tbaa !1240
  %35 = tail call %struct.Memory* @sub_4007d0_deregister_tm_clones(%struct.State* nonnull %0, i64 %31, %struct.Memory* %2)
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 8) to i8*)
  %36 = load i64, i64* %22, align 8, !tbaa !1240
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %4, align 8, !tbaa !1240
  %40 = inttoptr i64 %37 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %3, align 8, !tbaa !1240
  %42 = add i64 %36, 16
  store i64 %42, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %35
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4006c0(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4006c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_609000__got_plt_type* @seg_609000__got_plt to i64), i64 8) to i64*)
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8
  store i64 %7, i64* %5, align 8, !tbaa !1240
  %9 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_609000__got_plt_type* @seg_609000__got_plt to i64), i64 16) to i64*)
  store i64 %9, i64* %3, align 8, !tbaa !1240
  %10 = icmp eq i64 %9, 4196044
  br i1 %10, label %block_4006cc, label %12

block_4006cc:                                     ; preds = %block_4006c0
  store i64 4196048, i64* %3, align 8
  %11 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 4196048, %struct.Memory* %2)
  ret %struct.Memory* %11

; <label>:12:                                     ; preds = %block_4006c0
  %13 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %9, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
define %struct.Memory* @sub_400880_c_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400880:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %27 = load i64, i64* %18, align 8
  %28 = load i64, i64* %17, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %18, align 8, !tbaa !1240
  %31 = load i64, i64* %24, align 8
  %32 = add i64 %28, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  %34 = load i64, i64* %23, align 8
  %35 = add i64 %28, -24
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36
  %37 = load i64, i64* %22, align 8
  %38 = add i64 %28, -32
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  %40 = load i64, i64* %21, align 8
  %41 = add i64 %28, -40
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = load i64, i64* %14, align 8
  %44 = add i64 %28, -48
  %45 = inttoptr i64 %44 to i64*
  store i64 %43, i64* %45
  %46 = add i64 %28, -312
  store i64 %46, i64* %17, align 8, !tbaa !1240
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %53 = load i8, i8* %5, align 1
  %54 = add i64 %28, 80
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %19, align 8, !tbaa !1240
  %57 = add i64 %28, 72
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %20, align 8, !tbaa !1240
  %60 = add i64 %28, 64
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %14, align 8, !tbaa !1240
  %63 = add i64 %28, 56
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %23, align 8, !tbaa !1240
  %66 = add i64 %28, 48
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %24, align 8, !tbaa !1240
  %69 = add i64 %28, 40
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %21, align 8, !tbaa !1240
  %72 = load i64, i64* %18, align 8
  %73 = add i64 %72, 40
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %22, align 8, !tbaa !1240
  %76 = add i64 %72, 32
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77
  %79 = add i64 %72, -97
  %80 = inttoptr i64 %79 to i8*
  store i8 %53, i8* %80
  %81 = add i64 %72, 24
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82
  %84 = add i64 %72, -112
  %85 = inttoptr i64 %84 to i64*
  store i64 %78, i64* %85
  %86 = add i64 %72, 16
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %72, -120
  %90 = inttoptr i64 %89 to i64*
  store i64 %88, i64* %90
  %91 = add i64 %72, -48
  %92 = load i64, i64* %16, align 8
  %93 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %93
  %94 = inttoptr i64 %79 to i8*
  %95 = load i8, i8* %94
  %96 = add i64 %72, -49
  %97 = inttoptr i64 %96 to i8*
  store i8 %95, i8* %97
  %98 = add i64 %72, -56
  %99 = load i32, i32* %9, align 4
  %100 = inttoptr i64 %98 to i32*
  store i32 %99, i32* %100
  %101 = add i64 %72, -60
  %102 = load i32, i32* %7, align 4
  %103 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %103
  %104 = add i64 %72, -64
  %105 = load i32, i32* %11, align 4
  %106 = inttoptr i64 %104 to i32*
  store i32 %105, i32* %106
  %107 = add i64 %72, -68
  %108 = load i32, i32* %13, align 4
  %109 = inttoptr i64 %107 to i32*
  store i32 %108, i32* %109
  %110 = add i64 %72, -80
  %111 = bitcast [32 x %union.VectorReg]* %25 to double*
  %112 = load double, double* %111, align 1
  %113 = inttoptr i64 %110 to double*
  store double %112, double* %113
  %114 = add i64 %72, -88
  %115 = bitcast %union.VectorReg* %26 to double*
  %116 = load double, double* %115, align 1
  %117 = inttoptr i64 %114 to double*
  store double %116, double* %117
  %118 = inttoptr i64 %91 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %72, -128
  %121 = inttoptr i64 %120 to i64*
  store i64 %119, i64* %121
  %122 = inttoptr i64 %120 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %72, -132
  %125 = inttoptr i64 %124 to i32*
  store i32 %83, i32* %125
  %126 = add i64 %72, -144
  %127 = load i64, i64* %20, align 8
  %128 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %128
  %129 = add i64 %72, -152
  %130 = load i64, i64* %14, align 8
  %131 = inttoptr i64 %129 to i64*
  store i64 %130, i64* %131
  %132 = add i64 %72, -160
  %133 = load i64, i64* %23, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %133, i64* %134
  %135 = load i64, i64* %18, align 8
  %136 = add i64 %135, -168
  %137 = load i64, i64* %24, align 8
  %138 = inttoptr i64 %136 to i64*
  store i64 %137, i64* %138
  %139 = add i64 %135, -176
  %140 = load i64, i64* %21, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %141
  %142 = add i64 %135, -184
  %143 = load i64, i64* %22, align 8
  %144 = inttoptr i64 %142 to i64*
  store i64 %143, i64* %144
  %145 = add i64 %135, -192
  %146 = load i64, i64* %19, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %147
  %148 = add i64 %1, 196
  %149 = load i64, i64* %17, align 8, !tbaa !1240
  %150 = add i64 %149, -8
  %151 = inttoptr i64 %150 to i64*
  store i64 %148, i64* %151
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %158 = load i64, i64* %154, align 8, !alias.scope !1290, !noalias !1293
  %159 = load i64, i64* %153, align 8, !alias.scope !1290, !noalias !1293
  %160 = load i64, i64* %156, align 8, !alias.scope !1290, !noalias !1293
  %161 = load i64, i64* %157, align 8, !alias.scope !1290, !noalias !1293
  %162 = inttoptr i64 %149 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %149, 8
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %149, 16
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %149, 24
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = add i64 %149, 32
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174
  %176 = add i64 %149, 40
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  %179 = add i64 %149, 48
  %180 = inttoptr i64 %179 to i64*
  %181 = load i64, i64* %180
  %182 = add i64 %149, 56
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183
  %185 = add i64 %149, 64
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = add i64 %149, 72
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = inttoptr i64 %150 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %3, align 8, !alias.scope !1290, !noalias !1293
  store i64 %149, i64* %17, align 8, !alias.scope !1290, !noalias !1293
  %193 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 4), i64 %123, i64 %158, i64 %159, i64 %160, i64 %161, i64 %163, i64 %166, i64 %169, i64 %172, i64 %175, i64 %178, i64 %181, i64 %184, i64 %187, i64 %190), !noalias !1290
  %194 = load i64, i64* %3, align 8
  %195 = load i64, i64* %18, align 8
  %196 = add i64 %195, -49
  %197 = inttoptr i64 %196 to i8*
  %198 = load i8, i8* %197
  %199 = sext i8 %198 to i64
  %200 = and i64 %199, 4294967295
  %201 = add i64 %195, -196
  %202 = trunc i64 %193 to i32
  %203 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %203
  %204 = add i64 %194, 27
  %205 = load i64, i64* %17, align 8, !tbaa !1240
  %206 = add i64 %205, -8
  %207 = inttoptr i64 %206 to i64*
  store i64 %204, i64* %207
  %208 = load i64, i64* %154, align 8, !alias.scope !1295, !noalias !1298
  %209 = load i64, i64* %153, align 8, !alias.scope !1295, !noalias !1298
  %210 = load i64, i64* %156, align 8, !alias.scope !1295, !noalias !1298
  %211 = load i64, i64* %157, align 8, !alias.scope !1295, !noalias !1298
  %212 = inttoptr i64 %205 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %205, 8
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %205, 16
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %205, 24
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %205, 32
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224
  %226 = add i64 %205, 40
  %227 = inttoptr i64 %226 to i64*
  %228 = load i64, i64* %227
  %229 = add i64 %205, 48
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %205, 56
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %205, 64
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %205, 72
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239
  %241 = inttoptr i64 %206 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %3, align 8, !alias.scope !1295, !noalias !1298
  store i64 %205, i64* %17, align 8, !alias.scope !1295, !noalias !1298
  %243 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 31), i64 %200, i64 %208, i64 %209, i64 %210, i64 %211, i64 %213, i64 %216, i64 %219, i64 %222, i64 %225, i64 %228, i64 %231, i64 %234, i64 %237, i64 %240), !noalias !1295
  %244 = load i64, i64* %18, align 8
  %245 = add i64 %244, -64
  %246 = load i64, i64* %3, align 8
  %247 = inttoptr i64 %245 to i32*
  %248 = load i32, i32* %247
  %249 = icmp eq i32 %248, 0
  %250 = add i64 %244, -200
  %251 = trunc i64 %243 to i32
  %252 = inttoptr i64 %250 to i32*
  store i32 %251, i32* %252
  %253 = select i1 %249, i64 16, i64 79
  %254 = add i64 %246, %253
  br i1 %249, label %block_40096f, label %block_4009ae

block_4009ae:                                     ; preds = %block_400880
  %255 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %256 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %257 = add i64 %244, -56
  %258 = inttoptr i64 %257 to i32*
  %259 = load i32, i32* %258
  %260 = zext i32 %259 to i64
  %261 = add i64 %244, -60
  %262 = inttoptr i64 %261 to i32*
  %263 = load i32, i32* %262
  %264 = zext i32 %263 to i64
  store i64 %264, i64* %255, align 8, !tbaa !1240
  %265 = inttoptr i64 %245 to i32*
  %266 = load i32, i32* %265
  %267 = zext i32 %266 to i64
  store i64 %267, i64* %256, align 8, !tbaa !1240
  %268 = add i64 %254, 26
  %269 = load i64, i64* %17, align 8, !tbaa !1240
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271
  %272 = load i64, i64* %156, align 8, !alias.scope !1300, !noalias !1303
  %273 = load i64, i64* %157, align 8, !alias.scope !1300, !noalias !1303
  %274 = inttoptr i64 %269 to i64*
  %275 = load i64, i64* %274
  %276 = add i64 %269, 8
  %277 = inttoptr i64 %276 to i64*
  %278 = load i64, i64* %277
  %279 = add i64 %269, 16
  %280 = inttoptr i64 %279 to i64*
  %281 = load i64, i64* %280
  %282 = add i64 %269, 24
  %283 = inttoptr i64 %282 to i64*
  %284 = load i64, i64* %283
  %285 = add i64 %269, 32
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %269, 40
  %289 = inttoptr i64 %288 to i64*
  %290 = load i64, i64* %289
  %291 = add i64 %269, 48
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %269, 56
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %269, 64
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %269, 72
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = inttoptr i64 %270 to i64*
  %304 = load i64, i64* %303
  store i64 %304, i64* %3, align 8, !alias.scope !1300, !noalias !1303
  store i64 %269, i64* %17, align 8, !alias.scope !1300, !noalias !1303
  %305 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 115), i64 %260, i64 %264, i64 %267, i64 %272, i64 %273, i64 %275, i64 %278, i64 %281, i64 %284, i64 %287, i64 %290, i64 %293, i64 %296, i64 %299, i64 %302), !noalias !1300
  %306 = load i64, i64* %18, align 8
  %307 = add i64 %306, -208
  %308 = trunc i64 %305 to i32
  %309 = load i64, i64* %3, align 8
  %310 = add i64 %309, 6
  %311 = inttoptr i64 %307 to i32*
  store i32 %308, i32* %311
  br label %block_4009ce

block_40096f:                                     ; preds = %block_400880
  %312 = add i64 %244, -56
  %313 = inttoptr i64 %312 to i32*
  %314 = load i32, i32* %313
  %315 = sext i32 %314 to i64
  %316 = add i64 %244, -96
  %317 = inttoptr i64 %316 to i64*
  store i64 %315, i64* %317
  %318 = add i64 %244, -60
  %319 = inttoptr i64 %318 to i32*
  %320 = load i32, i32* %319
  %321 = icmp eq i32 %320, 0
  %322 = select i1 %321, i64 31, i64 18
  %323 = add i64 %254, %322
  br i1 %321, label %block_40098e, label %block_400981

block_400a87:                                     ; preds = %block_400a61
  %324 = add i64 %472, 17
  %325 = load i64, i64* %17, align 8, !tbaa !1240
  %326 = add i64 %325, -8
  %327 = inttoptr i64 %326 to i64*
  store i64 %324, i64* %327
  %328 = load i64, i64* %155, align 8, !alias.scope !1305, !noalias !1308
  %329 = load i64, i64* %154, align 8, !alias.scope !1305, !noalias !1308
  %330 = load i64, i64* %153, align 8, !alias.scope !1305, !noalias !1308
  %331 = load i64, i64* %156, align 8, !alias.scope !1305, !noalias !1308
  %332 = load i64, i64* %157, align 8, !alias.scope !1305, !noalias !1308
  %333 = inttoptr i64 %325 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %325, 8
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %325, 16
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  %341 = add i64 %325, 24
  %342 = inttoptr i64 %341 to i64*
  %343 = load i64, i64* %342
  %344 = add i64 %325, 32
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345
  %347 = add i64 %325, 40
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  %350 = add i64 %325, 48
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351
  %353 = add i64 %325, 56
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  %356 = add i64 %325, 64
  %357 = inttoptr i64 %356 to i64*
  %358 = load i64, i64* %357
  %359 = add i64 %325, 72
  %360 = inttoptr i64 %359 to i64*
  %361 = load i64, i64* %360
  %362 = inttoptr i64 %326 to i64*
  %363 = load i64, i64* %362
  store i64 %363, i64* %3, align 8, !alias.scope !1305, !noalias !1308
  store i64 %325, i64* %17, align 8, !alias.scope !1305, !noalias !1308
  %364 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 389), i64 %328, i64 %329, i64 %330, i64 %331, i64 %332, i64 %334, i64 %337, i64 %340, i64 %343, i64 %346, i64 %349, i64 %352, i64 %355, i64 %358, i64 %361), !noalias !1305
  %365 = load i64, i64* %18, align 8
  %366 = add i64 %365, -236
  %367 = trunc i64 %364 to i32
  %368 = load i64, i64* %3, align 8
  %369 = add i64 %368, 6
  %370 = inttoptr i64 %366 to i32*
  store i32 %367, i32* %370
  br label %block_400aa3

block_40098e:                                     ; preds = %block_400981, %block_40096f
  %371 = phi i64 [ %323, %block_40096f ], [ %1493, %block_400981 ]
  %372 = phi %struct.Memory* [ %2, %block_40096f ], [ %2, %block_400981 ]
  %373 = inttoptr i64 %316 to i64*
  %374 = load i64, i64* %373
  %375 = add i64 %371, 21
  %376 = load i64, i64* %17, align 8, !tbaa !1240
  %377 = add i64 %376, -8
  %378 = inttoptr i64 %377 to i64*
  store i64 %375, i64* %378
  %379 = load i64, i64* %154, align 8, !alias.scope !1310, !noalias !1313
  %380 = load i64, i64* %153, align 8, !alias.scope !1310, !noalias !1313
  %381 = load i64, i64* %156, align 8, !alias.scope !1310, !noalias !1313
  %382 = load i64, i64* %157, align 8, !alias.scope !1310, !noalias !1313
  %383 = inttoptr i64 %376 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %376, 8
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %376, 16
  %389 = inttoptr i64 %388 to i64*
  %390 = load i64, i64* %389
  %391 = add i64 %376, 24
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %376, 32
  %395 = inttoptr i64 %394 to i64*
  %396 = load i64, i64* %395
  %397 = add i64 %376, 40
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %376, 48
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401
  %403 = add i64 %376, 56
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %376, 64
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  %409 = add i64 %376, 72
  %410 = inttoptr i64 %409 to i64*
  %411 = load i64, i64* %410
  %412 = inttoptr i64 %377 to i64*
  %413 = load i64, i64* %412
  store i64 %413, i64* %3, align 8, !alias.scope !1310, !noalias !1313
  store i64 %376, i64* %17, align 8, !alias.scope !1310, !noalias !1313
  %414 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 77), i64 %374, i64 %379, i64 %380, i64 %381, i64 %382, i64 %384, i64 %387, i64 %390, i64 %393, i64 %396, i64 %399, i64 %402, i64 %405, i64 %408, i64 %411), !noalias !1310
  %415 = load i64, i64* %18, align 8
  %416 = add i64 %415, -204
  %417 = trunc i64 %414 to i32
  %418 = load i64, i64* %3, align 8
  %419 = inttoptr i64 %416 to i32*
  store i32 %417, i32* %419
  %420 = add i64 %418, 43
  br label %block_4009ce

block_400a6b:                                     ; preds = %block_400a61
  %421 = add i64 %472, 17
  %422 = load i64, i64* %17, align 8, !tbaa !1240
  %423 = add i64 %422, -8
  %424 = inttoptr i64 %423 to i64*
  store i64 %421, i64* %424
  %425 = load i64, i64* %155, align 8, !alias.scope !1315, !noalias !1318
  %426 = load i64, i64* %154, align 8, !alias.scope !1315, !noalias !1318
  %427 = load i64, i64* %153, align 8, !alias.scope !1315, !noalias !1318
  %428 = load i64, i64* %156, align 8, !alias.scope !1315, !noalias !1318
  %429 = load i64, i64* %157, align 8, !alias.scope !1315, !noalias !1318
  %430 = inttoptr i64 %422 to i64*
  %431 = load i64, i64* %430
  %432 = add i64 %422, 8
  %433 = inttoptr i64 %432 to i64*
  %434 = load i64, i64* %433
  %435 = add i64 %422, 16
  %436 = inttoptr i64 %435 to i64*
  %437 = load i64, i64* %436
  %438 = add i64 %422, 24
  %439 = inttoptr i64 %438 to i64*
  %440 = load i64, i64* %439
  %441 = add i64 %422, 32
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %422, 40
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %422, 48
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i64 %422, 56
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  %453 = add i64 %422, 64
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %422, 72
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = inttoptr i64 %423 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %3, align 8, !alias.scope !1315, !noalias !1318
  store i64 %422, i64* %17, align 8, !alias.scope !1315, !noalias !1318
  %461 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 344), i64 %425, i64 %426, i64 %427, i64 %428, i64 %429, i64 %431, i64 %434, i64 %437, i64 %440, i64 %443, i64 %446, i64 %449, i64 %452, i64 %455, i64 %458), !noalias !1315
  %462 = load i64, i64* %18, align 8
  %463 = add i64 %462, -232
  %464 = trunc i64 %461 to i32
  %465 = load i64, i64* %3, align 8
  %466 = inttoptr i64 %463 to i32*
  store i32 %464, i32* %466
  %467 = add i64 %465, 34
  br label %block_400aa3

block_400a61:                                     ; preds = %block_4009ce
  %468 = inttoptr i64 %669 to i32*
  %469 = load i32, i32* %468
  %470 = icmp eq i32 %469, 0
  %471 = select i1 %470, i64 38, i64 10
  %472 = add i64 %680, %471
  br i1 %470, label %block_400a87, label %block_400a6b

block_4009ce:                                     ; preds = %block_40098e, %block_4009ae
  %473 = phi i64 [ %306, %block_4009ae ], [ %415, %block_40098e ]
  %474 = phi i64 [ %310, %block_4009ae ], [ %420, %block_40098e ]
  %475 = phi %struct.Memory* [ %2, %block_4009ae ], [ %372, %block_40098e ]
  %476 = add i64 %473, -68
  %477 = inttoptr i64 %476 to i32*
  %478 = load i32, i32* %477
  %479 = zext i32 %478 to i64
  store i64 %479, i64* %15, align 8, !tbaa !1240
  %480 = add i64 %474, 20
  %481 = load i64, i64* %17, align 8, !tbaa !1240
  %482 = add i64 %481, -8
  %483 = inttoptr i64 %482 to i64*
  store i64 %480, i64* %483
  %484 = load i64, i64* %154, align 8, !alias.scope !1320, !noalias !1323
  %485 = load i64, i64* %153, align 8, !alias.scope !1320, !noalias !1323
  %486 = load i64, i64* %156, align 8, !alias.scope !1320, !noalias !1323
  %487 = load i64, i64* %157, align 8, !alias.scope !1320, !noalias !1323
  %488 = inttoptr i64 %481 to i64*
  %489 = load i64, i64* %488
  %490 = add i64 %481, 8
  %491 = inttoptr i64 %490 to i64*
  %492 = load i64, i64* %491
  %493 = add i64 %481, 16
  %494 = inttoptr i64 %493 to i64*
  %495 = load i64, i64* %494
  %496 = add i64 %481, 24
  %497 = inttoptr i64 %496 to i64*
  %498 = load i64, i64* %497
  %499 = add i64 %481, 32
  %500 = inttoptr i64 %499 to i64*
  %501 = load i64, i64* %500
  %502 = add i64 %481, 40
  %503 = inttoptr i64 %502 to i64*
  %504 = load i64, i64* %503
  %505 = add i64 %481, 48
  %506 = inttoptr i64 %505 to i64*
  %507 = load i64, i64* %506
  %508 = add i64 %481, 56
  %509 = inttoptr i64 %508 to i64*
  %510 = load i64, i64* %509
  %511 = add i64 %481, 64
  %512 = inttoptr i64 %511 to i64*
  %513 = load i64, i64* %512
  %514 = add i64 %481, 72
  %515 = inttoptr i64 %514 to i64*
  %516 = load i64, i64* %515
  %517 = inttoptr i64 %482 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %3, align 8, !alias.scope !1320, !noalias !1323
  store i64 %481, i64* %17, align 8, !alias.scope !1320, !noalias !1323
  %519 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 159), i64 %479, i64 %484, i64 %485, i64 %486, i64 %487, i64 %489, i64 %492, i64 %495, i64 %498, i64 %501, i64 %504, i64 %507, i64 %510, i64 %513, i64 %516), !noalias !1320
  %520 = load i64, i64* %3, align 8
  %521 = load i64, i64* %18, align 8
  %522 = add i64 %521, -80
  %523 = inttoptr i64 %522 to double*
  %524 = load double, double* %523
  store double %524, double* %111, align 1, !tbaa !1244
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %526 = bitcast i64* %525 to double*
  store double 0.000000e+00, double* %526, align 1, !tbaa !1244
  %527 = add i64 %521, -212
  %528 = trunc i64 %519 to i32
  %529 = inttoptr i64 %527 to i32*
  store i32 %528, i32* %529
  %530 = add i64 %520, 28
  %531 = load i64, i64* %17, align 8, !tbaa !1240
  %532 = add i64 %531, -8
  %533 = inttoptr i64 %532 to i64*
  store i64 %530, i64* %533
  %534 = load i64, i64* %155, align 8, !alias.scope !1325, !noalias !1328
  %535 = load i64, i64* %154, align 8, !alias.scope !1325, !noalias !1328
  %536 = load i64, i64* %153, align 8, !alias.scope !1325, !noalias !1328
  %537 = load i64, i64* %156, align 8, !alias.scope !1325, !noalias !1328
  %538 = load i64, i64* %157, align 8, !alias.scope !1325, !noalias !1328
  %539 = inttoptr i64 %531 to i64*
  %540 = load i64, i64* %539
  %541 = add i64 %531, 8
  %542 = inttoptr i64 %541 to i64*
  %543 = load i64, i64* %542
  %544 = add i64 %531, 16
  %545 = inttoptr i64 %544 to i64*
  %546 = load i64, i64* %545
  %547 = add i64 %531, 24
  %548 = inttoptr i64 %547 to i64*
  %549 = load i64, i64* %548
  %550 = add i64 %531, 32
  %551 = inttoptr i64 %550 to i64*
  %552 = load i64, i64* %551
  %553 = add i64 %531, 40
  %554 = inttoptr i64 %553 to i64*
  %555 = load i64, i64* %554
  %556 = add i64 %531, 48
  %557 = inttoptr i64 %556 to i64*
  %558 = load i64, i64* %557
  %559 = add i64 %531, 56
  %560 = inttoptr i64 %559 to i64*
  %561 = load i64, i64* %560
  %562 = add i64 %531, 64
  %563 = inttoptr i64 %562 to i64*
  %564 = load i64, i64* %563
  %565 = add i64 %531, 72
  %566 = inttoptr i64 %565 to i64*
  %567 = load i64, i64* %566
  %568 = inttoptr i64 %532 to i64*
  %569 = load i64, i64* %568
  store i64 %569, i64* %3, align 8, !alias.scope !1325, !noalias !1328
  store i64 %531, i64* %17, align 8, !alias.scope !1325, !noalias !1328
  %570 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 196), i64 %534, i64 %535, i64 %536, i64 %537, i64 %538, i64 %540, i64 %543, i64 %546, i64 %549, i64 %552, i64 %555, i64 %558, i64 %561, i64 %564, i64 %567), !noalias !1325
  %571 = load i64, i64* %3, align 8
  %572 = load i64, i64* %18, align 8
  %573 = add i64 %572, -88
  %574 = inttoptr i64 %573 to double*
  %575 = load double, double* %574
  store double %575, double* %111, align 1, !tbaa !1244
  store double 0.000000e+00, double* %526, align 1, !tbaa !1244
  %576 = add i64 %572, -216
  %577 = trunc i64 %570 to i32
  %578 = inttoptr i64 %576 to i32*
  store i32 %577, i32* %578
  %579 = add i64 %571, 28
  %580 = load i64, i64* %17, align 8, !tbaa !1240
  %581 = add i64 %580, -8
  %582 = inttoptr i64 %581 to i64*
  store i64 %579, i64* %582
  %583 = load i64, i64* %155, align 8, !alias.scope !1330, !noalias !1333
  %584 = load i64, i64* %154, align 8, !alias.scope !1330, !noalias !1333
  %585 = load i64, i64* %153, align 8, !alias.scope !1330, !noalias !1333
  %586 = load i64, i64* %156, align 8, !alias.scope !1330, !noalias !1333
  %587 = load i64, i64* %157, align 8, !alias.scope !1330, !noalias !1333
  %588 = inttoptr i64 %580 to i64*
  %589 = load i64, i64* %588
  %590 = add i64 %580, 8
  %591 = inttoptr i64 %590 to i64*
  %592 = load i64, i64* %591
  %593 = add i64 %580, 16
  %594 = inttoptr i64 %593 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %580, 24
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  %599 = add i64 %580, 32
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = add i64 %580, 40
  %603 = inttoptr i64 %602 to i64*
  %604 = load i64, i64* %603
  %605 = add i64 %580, 48
  %606 = inttoptr i64 %605 to i64*
  %607 = load i64, i64* %606
  %608 = add i64 %580, 56
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %580, 64
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %580, 72
  %615 = inttoptr i64 %614 to i64*
  %616 = load i64, i64* %615
  %617 = inttoptr i64 %581 to i64*
  %618 = load i64, i64* %617
  store i64 %618, i64* %3, align 8, !alias.scope !1330, !noalias !1333
  store i64 %580, i64* %17, align 8, !alias.scope !1330, !noalias !1333
  %619 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 235), i64 %583, i64 %584, i64 %585, i64 %586, i64 %587, i64 %589, i64 %592, i64 %595, i64 %598, i64 %601, i64 %604, i64 %607, i64 %610, i64 %613, i64 %616), !noalias !1330
  %620 = load i64, i64* %3, align 8
  %621 = load i64, i64* %18, align 8
  %622 = add i64 %621, 16
  %623 = inttoptr i64 %622 to i64*
  %624 = load i64, i64* %623
  store i64 %624, i64* %15, align 8, !tbaa !1240
  %625 = add i64 %621, -220
  %626 = trunc i64 %619 to i32
  %627 = inttoptr i64 %625 to i32*
  store i32 %626, i32* %627
  %628 = add i64 %620, 27
  %629 = load i64, i64* %17, align 8, !tbaa !1240
  %630 = add i64 %629, -8
  %631 = inttoptr i64 %630 to i64*
  store i64 %628, i64* %631
  %632 = load i64, i64* %154, align 8, !alias.scope !1335, !noalias !1338
  %633 = load i64, i64* %153, align 8, !alias.scope !1335, !noalias !1338
  %634 = load i64, i64* %156, align 8, !alias.scope !1335, !noalias !1338
  %635 = load i64, i64* %157, align 8, !alias.scope !1335, !noalias !1338
  %636 = inttoptr i64 %629 to i64*
  %637 = load i64, i64* %636
  %638 = add i64 %629, 8
  %639 = inttoptr i64 %638 to i64*
  %640 = load i64, i64* %639
  %641 = add i64 %629, 16
  %642 = inttoptr i64 %641 to i64*
  %643 = load i64, i64* %642
  %644 = add i64 %629, 24
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  %647 = add i64 %629, 32
  %648 = inttoptr i64 %647 to i64*
  %649 = load i64, i64* %648
  %650 = add i64 %629, 40
  %651 = inttoptr i64 %650 to i64*
  %652 = load i64, i64* %651
  %653 = add i64 %629, 48
  %654 = inttoptr i64 %653 to i64*
  %655 = load i64, i64* %654
  %656 = add i64 %629, 56
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %629, 64
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = add i64 %629, 72
  %663 = inttoptr i64 %662 to i64*
  %664 = load i64, i64* %663
  %665 = inttoptr i64 %630 to i64*
  %666 = load i64, i64* %665
  store i64 %666, i64* %3, align 8, !alias.scope !1335, !noalias !1338
  store i64 %629, i64* %17, align 8, !alias.scope !1335, !noalias !1338
  %667 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 274), i64 %624, i64 %632, i64 %633, i64 %634, i64 %635, i64 %637, i64 %640, i64 %643, i64 %646, i64 %649, i64 %652, i64 %655, i64 %658, i64 %661, i64 %664), !noalias !1335
  %668 = load i64, i64* %18, align 8
  %669 = add i64 %668, 24
  %670 = load i64, i64* %3, align 8
  %671 = inttoptr i64 %669 to i32*
  %672 = load i32, i32* %671
  %673 = lshr i32 %672, 31
  %674 = trunc i32 %673 to i8
  %675 = add i64 %668, -224
  %676 = trunc i64 %667 to i32
  %677 = inttoptr i64 %675 to i32*
  store i32 %676, i32* %677
  %678 = icmp ne i8 %674, 0
  %679 = select i1 %678, i64 16, i64 44
  %680 = add i64 %670, %679
  br i1 %678, label %block_400a45, label %block_400a61

block_400a45:                                     ; preds = %block_4009ce
  %681 = add i64 %680, 17
  %682 = load i64, i64* %17, align 8, !tbaa !1240
  %683 = add i64 %682, -8
  %684 = inttoptr i64 %683 to i64*
  store i64 %681, i64* %684
  %685 = load i64, i64* %155, align 8, !alias.scope !1340, !noalias !1343
  %686 = load i64, i64* %154, align 8, !alias.scope !1340, !noalias !1343
  %687 = load i64, i64* %153, align 8, !alias.scope !1340, !noalias !1343
  %688 = load i64, i64* %156, align 8, !alias.scope !1340, !noalias !1343
  %689 = load i64, i64* %157, align 8, !alias.scope !1340, !noalias !1343
  %690 = inttoptr i64 %682 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %682, 8
  %693 = inttoptr i64 %692 to i64*
  %694 = load i64, i64* %693
  %695 = add i64 %682, 16
  %696 = inttoptr i64 %695 to i64*
  %697 = load i64, i64* %696
  %698 = add i64 %682, 24
  %699 = inttoptr i64 %698 to i64*
  %700 = load i64, i64* %699
  %701 = add i64 %682, 32
  %702 = inttoptr i64 %701 to i64*
  %703 = load i64, i64* %702
  %704 = add i64 %682, 40
  %705 = inttoptr i64 %704 to i64*
  %706 = load i64, i64* %705
  %707 = add i64 %682, 48
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = add i64 %682, 56
  %711 = inttoptr i64 %710 to i64*
  %712 = load i64, i64* %711
  %713 = add i64 %682, 64
  %714 = inttoptr i64 %713 to i64*
  %715 = load i64, i64* %714
  %716 = add i64 %682, 72
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  %719 = inttoptr i64 %683 to i64*
  %720 = load i64, i64* %719
  store i64 %720, i64* %3, align 8, !alias.scope !1340, !noalias !1343
  store i64 %682, i64* %17, align 8, !alias.scope !1340, !noalias !1343
  %721 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 299), i64 %685, i64 %686, i64 %687, i64 %688, i64 %689, i64 %691, i64 %694, i64 %697, i64 %700, i64 %703, i64 %706, i64 %709, i64 %712, i64 %715, i64 %718), !noalias !1340
  %722 = load i64, i64* %18, align 8
  %723 = add i64 %722, -228
  %724 = trunc i64 %721 to i32
  %725 = load i64, i64* %3, align 8
  %726 = add i64 %725, 6
  %727 = inttoptr i64 %723 to i32*
  store i32 %724, i32* %727
  br label %block_400aa3

block_400aa3:                                     ; preds = %block_400a45, %block_400a6b, %block_400a87
  %728 = phi i64 [ %722, %block_400a45 ], [ %462, %block_400a6b ], [ %365, %block_400a87 ]
  %729 = phi i64 [ %726, %block_400a45 ], [ %467, %block_400a6b ], [ %369, %block_400a87 ]
  %730 = phi i64 [ 71, %block_400a45 ], [ 5, %block_400a6b ], [ 5, %block_400a87 ]
  %731 = phi %struct.Memory* [ %475, %block_400a45 ], [ %475, %block_400a6b ], [ %475, %block_400a87 ]
  %732 = add i64 %729, %730
  %733 = add i64 %728, 32
  %734 = inttoptr i64 %733 to i64*
  %735 = load i64, i64* %734
  %736 = add i64 %732, 21
  %737 = load i64, i64* %17, align 8, !tbaa !1240
  %738 = add i64 %737, -8
  %739 = inttoptr i64 %738 to i64*
  store i64 %736, i64* %739
  %740 = load i64, i64* %154, align 8, !alias.scope !1345, !noalias !1348
  %741 = load i64, i64* %153, align 8, !alias.scope !1345, !noalias !1348
  %742 = load i64, i64* %156, align 8, !alias.scope !1345, !noalias !1348
  %743 = load i64, i64* %157, align 8, !alias.scope !1345, !noalias !1348
  %744 = inttoptr i64 %737 to i64*
  %745 = load i64, i64* %744
  %746 = add i64 %737, 8
  %747 = inttoptr i64 %746 to i64*
  %748 = load i64, i64* %747
  %749 = add i64 %737, 16
  %750 = inttoptr i64 %749 to i64*
  %751 = load i64, i64* %750
  %752 = add i64 %737, 24
  %753 = inttoptr i64 %752 to i64*
  %754 = load i64, i64* %753
  %755 = add i64 %737, 32
  %756 = inttoptr i64 %755 to i64*
  %757 = load i64, i64* %756
  %758 = add i64 %737, 40
  %759 = inttoptr i64 %758 to i64*
  %760 = load i64, i64* %759
  %761 = add i64 %737, 48
  %762 = inttoptr i64 %761 to i64*
  %763 = load i64, i64* %762
  %764 = add i64 %737, 56
  %765 = inttoptr i64 %764 to i64*
  %766 = load i64, i64* %765
  %767 = add i64 %737, 64
  %768 = inttoptr i64 %767 to i64*
  %769 = load i64, i64* %768
  %770 = add i64 %737, 72
  %771 = inttoptr i64 %770 to i64*
  %772 = load i64, i64* %771
  %773 = inttoptr i64 %738 to i64*
  %774 = load i64, i64* %773
  store i64 %774, i64* %3, align 8, !alias.scope !1345, !noalias !1348
  store i64 %737, i64* %17, align 8, !alias.scope !1345, !noalias !1348
  %775 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 434), i64 %735, i64 %740, i64 %741, i64 %742, i64 %743, i64 %745, i64 %748, i64 %751, i64 %754, i64 %757, i64 %760, i64 %763, i64 %766, i64 %769, i64 %772), !noalias !1345
  %776 = load i64, i64* %3, align 8
  %777 = load i64, i64* %18, align 8
  %778 = add i64 %777, 40
  %779 = inttoptr i64 %778 to i64*
  %780 = load i64, i64* %779
  store i64 %780, i64* %15, align 8, !tbaa !1240
  %781 = add i64 %777, -240
  %782 = trunc i64 %775 to i32
  %783 = inttoptr i64 %781 to i32*
  store i32 %782, i32* %783
  %784 = add i64 %776, 27
  %785 = load i64, i64* %17, align 8, !tbaa !1240
  %786 = add i64 %785, -8
  %787 = inttoptr i64 %786 to i64*
  store i64 %784, i64* %787
  %788 = load i64, i64* %154, align 8, !alias.scope !1350, !noalias !1353
  %789 = load i64, i64* %153, align 8, !alias.scope !1350, !noalias !1353
  %790 = load i64, i64* %156, align 8, !alias.scope !1350, !noalias !1353
  %791 = load i64, i64* %157, align 8, !alias.scope !1350, !noalias !1353
  %792 = inttoptr i64 %785 to i64*
  %793 = load i64, i64* %792
  %794 = add i64 %785, 8
  %795 = inttoptr i64 %794 to i64*
  %796 = load i64, i64* %795
  %797 = add i64 %785, 16
  %798 = inttoptr i64 %797 to i64*
  %799 = load i64, i64* %798
  %800 = add i64 %785, 24
  %801 = inttoptr i64 %800 to i64*
  %802 = load i64, i64* %801
  %803 = add i64 %785, 32
  %804 = inttoptr i64 %803 to i64*
  %805 = load i64, i64* %804
  %806 = add i64 %785, 40
  %807 = inttoptr i64 %806 to i64*
  %808 = load i64, i64* %807
  %809 = add i64 %785, 48
  %810 = inttoptr i64 %809 to i64*
  %811 = load i64, i64* %810
  %812 = add i64 %785, 56
  %813 = inttoptr i64 %812 to i64*
  %814 = load i64, i64* %813
  %815 = add i64 %785, 64
  %816 = inttoptr i64 %815 to i64*
  %817 = load i64, i64* %816
  %818 = add i64 %785, 72
  %819 = inttoptr i64 %818 to i64*
  %820 = load i64, i64* %819
  %821 = inttoptr i64 %786 to i64*
  %822 = load i64, i64* %821
  store i64 %822, i64* %3, align 8, !alias.scope !1350, !noalias !1353
  store i64 %785, i64* %17, align 8, !alias.scope !1350, !noalias !1353
  %823 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 471), i64 %780, i64 %788, i64 %789, i64 %790, i64 %791, i64 %793, i64 %796, i64 %799, i64 %802, i64 %805, i64 %808, i64 %811, i64 %814, i64 %817, i64 %820), !noalias !1350
  %824 = load i64, i64* %3, align 8
  %825 = load i64, i64* %18, align 8
  %826 = add i64 %825, -244
  %827 = trunc i64 %823 to i32
  %828 = inttoptr i64 %826 to i32*
  store i32 %827, i32* %828
  %829 = add i64 %824, 23
  %830 = load i64, i64* %17, align 8, !tbaa !1240
  %831 = add i64 %830, -8
  %832 = inttoptr i64 %831 to i64*
  store i64 %829, i64* %832
  %833 = load i64, i64* %155, align 8, !alias.scope !1355, !noalias !1358
  %834 = load i64, i64* %154, align 8, !alias.scope !1355, !noalias !1358
  %835 = load i64, i64* %153, align 8, !alias.scope !1355, !noalias !1358
  %836 = load i64, i64* %156, align 8, !alias.scope !1355, !noalias !1358
  %837 = load i64, i64* %157, align 8, !alias.scope !1355, !noalias !1358
  %838 = inttoptr i64 %830 to i64*
  %839 = load i64, i64* %838
  %840 = add i64 %830, 8
  %841 = inttoptr i64 %840 to i64*
  %842 = load i64, i64* %841
  %843 = add i64 %830, 16
  %844 = inttoptr i64 %843 to i64*
  %845 = load i64, i64* %844
  %846 = add i64 %830, 24
  %847 = inttoptr i64 %846 to i64*
  %848 = load i64, i64* %847
  %849 = add i64 %830, 32
  %850 = inttoptr i64 %849 to i64*
  %851 = load i64, i64* %850
  %852 = add i64 %830, 40
  %853 = inttoptr i64 %852 to i64*
  %854 = load i64, i64* %853
  %855 = add i64 %830, 48
  %856 = inttoptr i64 %855 to i64*
  %857 = load i64, i64* %856
  %858 = add i64 %830, 56
  %859 = inttoptr i64 %858 to i64*
  %860 = load i64, i64* %859
  %861 = add i64 %830, 64
  %862 = inttoptr i64 %861 to i64*
  %863 = load i64, i64* %862
  %864 = add i64 %830, 72
  %865 = inttoptr i64 %864 to i64*
  %866 = load i64, i64* %865
  %867 = inttoptr i64 %831 to i64*
  %868 = load i64, i64* %867
  store i64 %868, i64* %3, align 8, !alias.scope !1355, !noalias !1358
  store i64 %830, i64* %17, align 8, !alias.scope !1355, !noalias !1358
  %869 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 508), i64 %833, i64 %834, i64 %835, i64 %836, i64 %837, i64 %839, i64 %842, i64 %845, i64 %848, i64 %851, i64 %854, i64 %857, i64 %860, i64 %863, i64 %866), !noalias !1355
  %870 = load i64, i64* %3, align 8
  %871 = load i64, i64* %18, align 8
  %872 = add i64 %871, 48
  %873 = inttoptr i64 %872 to i64*
  %874 = load i64, i64* %873
  %875 = add i64 %871, -248
  %876 = trunc i64 %869 to i32
  %877 = inttoptr i64 %875 to i32*
  store i32 %876, i32* %877
  %878 = add i64 %870, 27
  %879 = load i64, i64* %17, align 8, !tbaa !1240
  %880 = add i64 %879, -8
  %881 = inttoptr i64 %880 to i64*
  store i64 %878, i64* %881
  %882 = load i64, i64* %154, align 8, !alias.scope !1360, !noalias !1363
  %883 = load i64, i64* %153, align 8, !alias.scope !1360, !noalias !1363
  %884 = load i64, i64* %156, align 8, !alias.scope !1360, !noalias !1363
  %885 = load i64, i64* %157, align 8, !alias.scope !1360, !noalias !1363
  %886 = inttoptr i64 %879 to i64*
  %887 = load i64, i64* %886
  %888 = add i64 %879, 8
  %889 = inttoptr i64 %888 to i64*
  %890 = load i64, i64* %889
  %891 = add i64 %879, 16
  %892 = inttoptr i64 %891 to i64*
  %893 = load i64, i64* %892
  %894 = add i64 %879, 24
  %895 = inttoptr i64 %894 to i64*
  %896 = load i64, i64* %895
  %897 = add i64 %879, 32
  %898 = inttoptr i64 %897 to i64*
  %899 = load i64, i64* %898
  %900 = add i64 %879, 40
  %901 = inttoptr i64 %900 to i64*
  %902 = load i64, i64* %901
  %903 = add i64 %879, 48
  %904 = inttoptr i64 %903 to i64*
  %905 = load i64, i64* %904
  %906 = add i64 %879, 56
  %907 = inttoptr i64 %906 to i64*
  %908 = load i64, i64* %907
  %909 = add i64 %879, 64
  %910 = inttoptr i64 %909 to i64*
  %911 = load i64, i64* %910
  %912 = add i64 %879, 72
  %913 = inttoptr i64 %912 to i64*
  %914 = load i64, i64* %913
  %915 = inttoptr i64 %880 to i64*
  %916 = load i64, i64* %915
  store i64 %916, i64* %3, align 8, !alias.scope !1360, !noalias !1363
  store i64 %879, i64* %17, align 8, !alias.scope !1360, !noalias !1363
  %917 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2367), i64 %874, i64 %882, i64 %883, i64 %884, i64 %885, i64 %887, i64 %890, i64 %893, i64 %896, i64 %899, i64 %902, i64 %905, i64 %908, i64 %911, i64 %914), !noalias !1360
  %918 = load i64, i64* %3, align 8
  %919 = load i64, i64* %18, align 8
  %920 = add i64 %919, 56
  %921 = inttoptr i64 %920 to i64*
  %922 = load i64, i64* %921
  %923 = add i64 %919, -252
  %924 = trunc i64 %917 to i32
  %925 = inttoptr i64 %923 to i32*
  store i32 %924, i32* %925
  %926 = add i64 %918, 27
  %927 = load i64, i64* %17, align 8, !tbaa !1240
  %928 = add i64 %927, -8
  %929 = inttoptr i64 %928 to i64*
  store i64 %926, i64* %929
  %930 = load i64, i64* %154, align 8, !alias.scope !1365, !noalias !1368
  %931 = load i64, i64* %153, align 8, !alias.scope !1365, !noalias !1368
  %932 = load i64, i64* %156, align 8, !alias.scope !1365, !noalias !1368
  %933 = load i64, i64* %157, align 8, !alias.scope !1365, !noalias !1368
  %934 = inttoptr i64 %927 to i64*
  %935 = load i64, i64* %934
  %936 = add i64 %927, 8
  %937 = inttoptr i64 %936 to i64*
  %938 = load i64, i64* %937
  %939 = add i64 %927, 16
  %940 = inttoptr i64 %939 to i64*
  %941 = load i64, i64* %940
  %942 = add i64 %927, 24
  %943 = inttoptr i64 %942 to i64*
  %944 = load i64, i64* %943
  %945 = add i64 %927, 32
  %946 = inttoptr i64 %945 to i64*
  %947 = load i64, i64* %946
  %948 = add i64 %927, 40
  %949 = inttoptr i64 %948 to i64*
  %950 = load i64, i64* %949
  %951 = add i64 %927, 48
  %952 = inttoptr i64 %951 to i64*
  %953 = load i64, i64* %952
  %954 = add i64 %927, 56
  %955 = inttoptr i64 %954 to i64*
  %956 = load i64, i64* %955
  %957 = add i64 %927, 64
  %958 = inttoptr i64 %957 to i64*
  %959 = load i64, i64* %958
  %960 = add i64 %927, 72
  %961 = inttoptr i64 %960 to i64*
  %962 = load i64, i64* %961
  %963 = inttoptr i64 %928 to i64*
  %964 = load i64, i64* %963
  store i64 %964, i64* %3, align 8, !alias.scope !1365, !noalias !1368
  store i64 %927, i64* %17, align 8, !alias.scope !1365, !noalias !1368
  %965 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 528), i64 %922, i64 %930, i64 %931, i64 %932, i64 %933, i64 %935, i64 %938, i64 %941, i64 %944, i64 %947, i64 %950, i64 %953, i64 %956, i64 %959, i64 %962), !noalias !1365
  %966 = load i64, i64* %3, align 8
  %967 = load i64, i64* %18, align 8
  %968 = add i64 %967, 64
  %969 = inttoptr i64 %968 to i64*
  %970 = load i64, i64* %969
  %971 = add i64 %967, -256
  %972 = trunc i64 %965 to i32
  %973 = inttoptr i64 %971 to i32*
  store i32 %972, i32* %973
  %974 = add i64 %966, 27
  %975 = load i64, i64* %17, align 8, !tbaa !1240
  %976 = add i64 %975, -8
  %977 = inttoptr i64 %976 to i64*
  store i64 %974, i64* %977
  %978 = load i64, i64* %154, align 8, !alias.scope !1370, !noalias !1373
  %979 = load i64, i64* %153, align 8, !alias.scope !1370, !noalias !1373
  %980 = load i64, i64* %156, align 8, !alias.scope !1370, !noalias !1373
  %981 = load i64, i64* %157, align 8, !alias.scope !1370, !noalias !1373
  %982 = inttoptr i64 %975 to i64*
  %983 = load i64, i64* %982
  %984 = add i64 %975, 8
  %985 = inttoptr i64 %984 to i64*
  %986 = load i64, i64* %985
  %987 = add i64 %975, 16
  %988 = inttoptr i64 %987 to i64*
  %989 = load i64, i64* %988
  %990 = add i64 %975, 24
  %991 = inttoptr i64 %990 to i64*
  %992 = load i64, i64* %991
  %993 = add i64 %975, 32
  %994 = inttoptr i64 %993 to i64*
  %995 = load i64, i64* %994
  %996 = add i64 %975, 40
  %997 = inttoptr i64 %996 to i64*
  %998 = load i64, i64* %997
  %999 = add i64 %975, 48
  %1000 = inttoptr i64 %999 to i64*
  %1001 = load i64, i64* %1000
  %1002 = add i64 %975, 56
  %1003 = inttoptr i64 %1002 to i64*
  %1004 = load i64, i64* %1003
  %1005 = add i64 %975, 64
  %1006 = inttoptr i64 %1005 to i64*
  %1007 = load i64, i64* %1006
  %1008 = add i64 %975, 72
  %1009 = inttoptr i64 %1008 to i64*
  %1010 = load i64, i64* %1009
  %1011 = inttoptr i64 %976 to i64*
  %1012 = load i64, i64* %1011
  store i64 %1012, i64* %3, align 8, !alias.scope !1370, !noalias !1373
  store i64 %975, i64* %17, align 8, !alias.scope !1370, !noalias !1373
  %1013 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 551), i64 %970, i64 %978, i64 %979, i64 %980, i64 %981, i64 %983, i64 %986, i64 %989, i64 %992, i64 %995, i64 %998, i64 %1001, i64 %1004, i64 %1007, i64 %1010), !noalias !1370
  %1014 = load i64, i64* %3, align 8
  %1015 = load i64, i64* %18, align 8
  %1016 = add i64 %1015, 72
  %1017 = inttoptr i64 %1016 to i64*
  %1018 = load i64, i64* %1017
  %1019 = add i64 %1015, -260
  %1020 = trunc i64 %1013 to i32
  %1021 = inttoptr i64 %1019 to i32*
  store i32 %1020, i32* %1021
  %1022 = add i64 %1014, 27
  %1023 = load i64, i64* %17, align 8, !tbaa !1240
  %1024 = add i64 %1023, -8
  %1025 = inttoptr i64 %1024 to i64*
  store i64 %1022, i64* %1025
  %1026 = load i64, i64* %154, align 8, !alias.scope !1375, !noalias !1378
  %1027 = load i64, i64* %153, align 8, !alias.scope !1375, !noalias !1378
  %1028 = load i64, i64* %156, align 8, !alias.scope !1375, !noalias !1378
  %1029 = load i64, i64* %157, align 8, !alias.scope !1375, !noalias !1378
  %1030 = inttoptr i64 %1023 to i64*
  %1031 = load i64, i64* %1030
  %1032 = add i64 %1023, 8
  %1033 = inttoptr i64 %1032 to i64*
  %1034 = load i64, i64* %1033
  %1035 = add i64 %1023, 16
  %1036 = inttoptr i64 %1035 to i64*
  %1037 = load i64, i64* %1036
  %1038 = add i64 %1023, 24
  %1039 = inttoptr i64 %1038 to i64*
  %1040 = load i64, i64* %1039
  %1041 = add i64 %1023, 32
  %1042 = inttoptr i64 %1041 to i64*
  %1043 = load i64, i64* %1042
  %1044 = add i64 %1023, 40
  %1045 = inttoptr i64 %1044 to i64*
  %1046 = load i64, i64* %1045
  %1047 = add i64 %1023, 48
  %1048 = inttoptr i64 %1047 to i64*
  %1049 = load i64, i64* %1048
  %1050 = add i64 %1023, 56
  %1051 = inttoptr i64 %1050 to i64*
  %1052 = load i64, i64* %1051
  %1053 = add i64 %1023, 64
  %1054 = inttoptr i64 %1053 to i64*
  %1055 = load i64, i64* %1054
  %1056 = add i64 %1023, 72
  %1057 = inttoptr i64 %1056 to i64*
  %1058 = load i64, i64* %1057
  %1059 = inttoptr i64 %1024 to i64*
  %1060 = load i64, i64* %1059
  store i64 %1060, i64* %3, align 8, !alias.scope !1375, !noalias !1378
  store i64 %1023, i64* %17, align 8, !alias.scope !1375, !noalias !1378
  %1061 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 574), i64 %1018, i64 %1026, i64 %1027, i64 %1028, i64 %1029, i64 %1031, i64 %1034, i64 %1037, i64 %1040, i64 %1043, i64 %1046, i64 %1049, i64 %1052, i64 %1055, i64 %1058), !noalias !1375
  %1062 = load i64, i64* %3, align 8
  %1063 = load i64, i64* %18, align 8
  %1064 = add i64 %1063, 80
  %1065 = inttoptr i64 %1064 to i64*
  %1066 = load i64, i64* %1065
  %1067 = add i64 %1063, -264
  %1068 = trunc i64 %1061 to i32
  %1069 = inttoptr i64 %1067 to i32*
  store i32 %1068, i32* %1069
  %1070 = add i64 %1062, 27
  %1071 = load i64, i64* %17, align 8, !tbaa !1240
  %1072 = add i64 %1071, -8
  %1073 = inttoptr i64 %1072 to i64*
  store i64 %1070, i64* %1073
  %1074 = load i64, i64* %154, align 8, !alias.scope !1380, !noalias !1383
  %1075 = load i64, i64* %153, align 8, !alias.scope !1380, !noalias !1383
  %1076 = load i64, i64* %156, align 8, !alias.scope !1380, !noalias !1383
  %1077 = load i64, i64* %157, align 8, !alias.scope !1380, !noalias !1383
  %1078 = inttoptr i64 %1071 to i64*
  %1079 = load i64, i64* %1078
  %1080 = add i64 %1071, 8
  %1081 = inttoptr i64 %1080 to i64*
  %1082 = load i64, i64* %1081
  %1083 = add i64 %1071, 16
  %1084 = inttoptr i64 %1083 to i64*
  %1085 = load i64, i64* %1084
  %1086 = add i64 %1071, 24
  %1087 = inttoptr i64 %1086 to i64*
  %1088 = load i64, i64* %1087
  %1089 = add i64 %1071, 32
  %1090 = inttoptr i64 %1089 to i64*
  %1091 = load i64, i64* %1090
  %1092 = add i64 %1071, 40
  %1093 = inttoptr i64 %1092 to i64*
  %1094 = load i64, i64* %1093
  %1095 = add i64 %1071, 48
  %1096 = inttoptr i64 %1095 to i64*
  %1097 = load i64, i64* %1096
  %1098 = add i64 %1071, 56
  %1099 = inttoptr i64 %1098 to i64*
  %1100 = load i64, i64* %1099
  %1101 = add i64 %1071, 64
  %1102 = inttoptr i64 %1101 to i64*
  %1103 = load i64, i64* %1102
  %1104 = add i64 %1071, 72
  %1105 = inttoptr i64 %1104 to i64*
  %1106 = load i64, i64* %1105
  %1107 = inttoptr i64 %1072 to i64*
  %1108 = load i64, i64* %1107
  store i64 %1108, i64* %3, align 8, !alias.scope !1380, !noalias !1383
  store i64 %1071, i64* %17, align 8, !alias.scope !1380, !noalias !1383
  %1109 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 597), i64 %1066, i64 %1074, i64 %1075, i64 %1076, i64 %1077, i64 %1079, i64 %1082, i64 %1085, i64 %1088, i64 %1091, i64 %1094, i64 %1097, i64 %1100, i64 %1103, i64 %1106), !noalias !1380
  %1110 = load i64, i64* %3, align 8
  %1111 = load i64, i64* %18, align 8
  %1112 = add i64 %1111, 88
  %1113 = inttoptr i64 %1112 to i64*
  %1114 = load i64, i64* %1113
  store i64 %1114, i64* %15, align 8, !tbaa !1240
  %1115 = add i64 %1111, -268
  %1116 = trunc i64 %1109 to i32
  %1117 = inttoptr i64 %1115 to i32*
  store i32 %1116, i32* %1117
  %1118 = add i64 %1110, 27
  %1119 = load i64, i64* %17, align 8, !tbaa !1240
  %1120 = add i64 %1119, -8
  %1121 = inttoptr i64 %1120 to i64*
  store i64 %1118, i64* %1121
  %1122 = load i64, i64* %154, align 8, !alias.scope !1385, !noalias !1388
  %1123 = load i64, i64* %153, align 8, !alias.scope !1385, !noalias !1388
  %1124 = load i64, i64* %156, align 8, !alias.scope !1385, !noalias !1388
  %1125 = load i64, i64* %157, align 8, !alias.scope !1385, !noalias !1388
  %1126 = inttoptr i64 %1119 to i64*
  %1127 = load i64, i64* %1126
  %1128 = add i64 %1119, 8
  %1129 = inttoptr i64 %1128 to i64*
  %1130 = load i64, i64* %1129
  %1131 = add i64 %1119, 16
  %1132 = inttoptr i64 %1131 to i64*
  %1133 = load i64, i64* %1132
  %1134 = add i64 %1119, 24
  %1135 = inttoptr i64 %1134 to i64*
  %1136 = load i64, i64* %1135
  %1137 = add i64 %1119, 32
  %1138 = inttoptr i64 %1137 to i64*
  %1139 = load i64, i64* %1138
  %1140 = add i64 %1119, 40
  %1141 = inttoptr i64 %1140 to i64*
  %1142 = load i64, i64* %1141
  %1143 = add i64 %1119, 48
  %1144 = inttoptr i64 %1143 to i64*
  %1145 = load i64, i64* %1144
  %1146 = add i64 %1119, 56
  %1147 = inttoptr i64 %1146 to i64*
  %1148 = load i64, i64* %1147
  %1149 = add i64 %1119, 64
  %1150 = inttoptr i64 %1149 to i64*
  %1151 = load i64, i64* %1150
  %1152 = add i64 %1119, 72
  %1153 = inttoptr i64 %1152 to i64*
  %1154 = load i64, i64* %1153
  %1155 = inttoptr i64 %1120 to i64*
  %1156 = load i64, i64* %1155
  store i64 %1156, i64* %3, align 8, !alias.scope !1385, !noalias !1388
  store i64 %1119, i64* %17, align 8, !alias.scope !1385, !noalias !1388
  %1157 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 620), i64 %1114, i64 %1122, i64 %1123, i64 %1124, i64 %1125, i64 %1127, i64 %1130, i64 %1133, i64 %1136, i64 %1139, i64 %1142, i64 %1145, i64 %1148, i64 %1151, i64 %1154), !noalias !1385
  %1158 = load i64, i64* %3, align 8
  %1159 = load i64, i64* %18, align 8
  %1160 = add i64 %1159, -272
  %1161 = trunc i64 %1157 to i32
  %1162 = inttoptr i64 %1160 to i32*
  store i32 %1161, i32* %1162
  %1163 = add i64 %1158, 23
  %1164 = load i64, i64* %17, align 8, !tbaa !1240
  %1165 = add i64 %1164, -8
  %1166 = inttoptr i64 %1165 to i64*
  store i64 %1163, i64* %1166
  %1167 = load i64, i64* %155, align 8, !alias.scope !1390, !noalias !1393
  %1168 = load i64, i64* %154, align 8, !alias.scope !1390, !noalias !1393
  %1169 = load i64, i64* %153, align 8, !alias.scope !1390, !noalias !1393
  %1170 = load i64, i64* %156, align 8, !alias.scope !1390, !noalias !1393
  %1171 = load i64, i64* %157, align 8, !alias.scope !1390, !noalias !1393
  %1172 = inttoptr i64 %1164 to i64*
  %1173 = load i64, i64* %1172
  %1174 = add i64 %1164, 8
  %1175 = inttoptr i64 %1174 to i64*
  %1176 = load i64, i64* %1175
  %1177 = add i64 %1164, 16
  %1178 = inttoptr i64 %1177 to i64*
  %1179 = load i64, i64* %1178
  %1180 = add i64 %1164, 24
  %1181 = inttoptr i64 %1180 to i64*
  %1182 = load i64, i64* %1181
  %1183 = add i64 %1164, 32
  %1184 = inttoptr i64 %1183 to i64*
  %1185 = load i64, i64* %1184
  %1186 = add i64 %1164, 40
  %1187 = inttoptr i64 %1186 to i64*
  %1188 = load i64, i64* %1187
  %1189 = add i64 %1164, 48
  %1190 = inttoptr i64 %1189 to i64*
  %1191 = load i64, i64* %1190
  %1192 = add i64 %1164, 56
  %1193 = inttoptr i64 %1192 to i64*
  %1194 = load i64, i64* %1193
  %1195 = add i64 %1164, 64
  %1196 = inttoptr i64 %1195 to i64*
  %1197 = load i64, i64* %1196
  %1198 = add i64 %1164, 72
  %1199 = inttoptr i64 %1198 to i64*
  %1200 = load i64, i64* %1199
  %1201 = inttoptr i64 %1165 to i64*
  %1202 = load i64, i64* %1201
  store i64 %1202, i64* %3, align 8, !alias.scope !1390, !noalias !1393
  store i64 %1164, i64* %17, align 8, !alias.scope !1390, !noalias !1393
  %1203 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 643), i64 %1167, i64 %1168, i64 %1169, i64 %1170, i64 %1171, i64 %1173, i64 %1176, i64 %1179, i64 %1182, i64 %1185, i64 %1188, i64 %1191, i64 %1194, i64 %1197, i64 %1200), !noalias !1390
  %1204 = load i64, i64* %3, align 8
  %1205 = load i64, i64* %18, align 8
  %1206 = add i64 %1205, -276
  %1207 = trunc i64 %1203 to i32
  %1208 = inttoptr i64 %1206 to i32*
  store i32 %1207, i32* %1208
  %1209 = add i64 %1204, 23
  %1210 = load i64, i64* %17, align 8, !tbaa !1240
  %1211 = add i64 %1210, -8
  %1212 = inttoptr i64 %1211 to i64*
  store i64 %1209, i64* %1212
  %1213 = load i64, i64* %155, align 8, !alias.scope !1395, !noalias !1398
  %1214 = load i64, i64* %154, align 8, !alias.scope !1395, !noalias !1398
  %1215 = load i64, i64* %153, align 8, !alias.scope !1395, !noalias !1398
  %1216 = load i64, i64* %156, align 8, !alias.scope !1395, !noalias !1398
  %1217 = load i64, i64* %157, align 8, !alias.scope !1395, !noalias !1398
  %1218 = inttoptr i64 %1210 to i64*
  %1219 = load i64, i64* %1218
  %1220 = add i64 %1210, 8
  %1221 = inttoptr i64 %1220 to i64*
  %1222 = load i64, i64* %1221
  %1223 = add i64 %1210, 16
  %1224 = inttoptr i64 %1223 to i64*
  %1225 = load i64, i64* %1224
  %1226 = add i64 %1210, 24
  %1227 = inttoptr i64 %1226 to i64*
  %1228 = load i64, i64* %1227
  %1229 = add i64 %1210, 32
  %1230 = inttoptr i64 %1229 to i64*
  %1231 = load i64, i64* %1230
  %1232 = add i64 %1210, 40
  %1233 = inttoptr i64 %1232 to i64*
  %1234 = load i64, i64* %1233
  %1235 = add i64 %1210, 48
  %1236 = inttoptr i64 %1235 to i64*
  %1237 = load i64, i64* %1236
  %1238 = add i64 %1210, 56
  %1239 = inttoptr i64 %1238 to i64*
  %1240 = load i64, i64* %1239
  %1241 = add i64 %1210, 64
  %1242 = inttoptr i64 %1241 to i64*
  %1243 = load i64, i64* %1242
  %1244 = add i64 %1210, 72
  %1245 = inttoptr i64 %1244 to i64*
  %1246 = load i64, i64* %1245
  %1247 = inttoptr i64 %1211 to i64*
  %1248 = load i64, i64* %1247
  store i64 %1248, i64* %3, align 8, !alias.scope !1395, !noalias !1398
  store i64 %1210, i64* %17, align 8, !alias.scope !1395, !noalias !1398
  %1249 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 684), i64 %1213, i64 %1214, i64 %1215, i64 %1216, i64 %1217, i64 %1219, i64 %1222, i64 %1225, i64 %1228, i64 %1231, i64 %1234, i64 %1237, i64 %1240, i64 %1243, i64 %1246), !noalias !1395
  %1250 = load i64, i64* %3, align 8
  %1251 = load i64, i64* %18, align 8
  %1252 = add i64 %1251, -280
  %1253 = trunc i64 %1249 to i32
  %1254 = inttoptr i64 %1252 to i32*
  store i32 %1253, i32* %1254
  %1255 = add i64 %1250, 23
  %1256 = load i64, i64* %17, align 8, !tbaa !1240
  %1257 = add i64 %1256, -8
  %1258 = inttoptr i64 %1257 to i64*
  store i64 %1255, i64* %1258
  %1259 = load i64, i64* %155, align 8, !alias.scope !1400, !noalias !1403
  %1260 = load i64, i64* %154, align 8, !alias.scope !1400, !noalias !1403
  %1261 = load i64, i64* %153, align 8, !alias.scope !1400, !noalias !1403
  %1262 = load i64, i64* %156, align 8, !alias.scope !1400, !noalias !1403
  %1263 = load i64, i64* %157, align 8, !alias.scope !1400, !noalias !1403
  %1264 = inttoptr i64 %1256 to i64*
  %1265 = load i64, i64* %1264
  %1266 = add i64 %1256, 8
  %1267 = inttoptr i64 %1266 to i64*
  %1268 = load i64, i64* %1267
  %1269 = add i64 %1256, 16
  %1270 = inttoptr i64 %1269 to i64*
  %1271 = load i64, i64* %1270
  %1272 = add i64 %1256, 24
  %1273 = inttoptr i64 %1272 to i64*
  %1274 = load i64, i64* %1273
  %1275 = add i64 %1256, 32
  %1276 = inttoptr i64 %1275 to i64*
  %1277 = load i64, i64* %1276
  %1278 = add i64 %1256, 40
  %1279 = inttoptr i64 %1278 to i64*
  %1280 = load i64, i64* %1279
  %1281 = add i64 %1256, 48
  %1282 = inttoptr i64 %1281 to i64*
  %1283 = load i64, i64* %1282
  %1284 = add i64 %1256, 56
  %1285 = inttoptr i64 %1284 to i64*
  %1286 = load i64, i64* %1285
  %1287 = add i64 %1256, 64
  %1288 = inttoptr i64 %1287 to i64*
  %1289 = load i64, i64* %1288
  %1290 = add i64 %1256, 72
  %1291 = inttoptr i64 %1290 to i64*
  %1292 = load i64, i64* %1291
  %1293 = inttoptr i64 %1257 to i64*
  %1294 = load i64, i64* %1293
  store i64 %1294, i64* %3, align 8, !alias.scope !1400, !noalias !1403
  store i64 %1256, i64* %17, align 8, !alias.scope !1400, !noalias !1403
  %1295 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 723), i64 %1259, i64 %1260, i64 %1261, i64 %1262, i64 %1263, i64 %1265, i64 %1268, i64 %1271, i64 %1274, i64 %1277, i64 %1280, i64 %1283, i64 %1286, i64 %1289, i64 %1292), !noalias !1400
  %1296 = load i64, i64* %3, align 8
  %1297 = load i64, i64* %18, align 8
  %1298 = add i64 %1297, -284
  %1299 = trunc i64 %1295 to i32
  %1300 = inttoptr i64 %1298 to i32*
  store i32 %1299, i32* %1300
  %1301 = add i64 %1296, 23
  %1302 = load i64, i64* %17, align 8, !tbaa !1240
  %1303 = add i64 %1302, -8
  %1304 = inttoptr i64 %1303 to i64*
  store i64 %1301, i64* %1304
  %1305 = load i64, i64* %155, align 8, !alias.scope !1405, !noalias !1408
  %1306 = load i64, i64* %154, align 8, !alias.scope !1405, !noalias !1408
  %1307 = load i64, i64* %153, align 8, !alias.scope !1405, !noalias !1408
  %1308 = load i64, i64* %156, align 8, !alias.scope !1405, !noalias !1408
  %1309 = load i64, i64* %157, align 8, !alias.scope !1405, !noalias !1408
  %1310 = inttoptr i64 %1302 to i64*
  %1311 = load i64, i64* %1310
  %1312 = add i64 %1302, 8
  %1313 = inttoptr i64 %1312 to i64*
  %1314 = load i64, i64* %1313
  %1315 = add i64 %1302, 16
  %1316 = inttoptr i64 %1315 to i64*
  %1317 = load i64, i64* %1316
  %1318 = add i64 %1302, 24
  %1319 = inttoptr i64 %1318 to i64*
  %1320 = load i64, i64* %1319
  %1321 = add i64 %1302, 32
  %1322 = inttoptr i64 %1321 to i64*
  %1323 = load i64, i64* %1322
  %1324 = add i64 %1302, 40
  %1325 = inttoptr i64 %1324 to i64*
  %1326 = load i64, i64* %1325
  %1327 = add i64 %1302, 48
  %1328 = inttoptr i64 %1327 to i64*
  %1329 = load i64, i64* %1328
  %1330 = add i64 %1302, 56
  %1331 = inttoptr i64 %1330 to i64*
  %1332 = load i64, i64* %1331
  %1333 = add i64 %1302, 64
  %1334 = inttoptr i64 %1333 to i64*
  %1335 = load i64, i64* %1334
  %1336 = add i64 %1302, 72
  %1337 = inttoptr i64 %1336 to i64*
  %1338 = load i64, i64* %1337
  %1339 = inttoptr i64 %1303 to i64*
  %1340 = load i64, i64* %1339
  store i64 %1340, i64* %3, align 8, !alias.scope !1405, !noalias !1408
  store i64 %1302, i64* %17, align 8, !alias.scope !1405, !noalias !1408
  %1341 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 757), i64 %1305, i64 %1306, i64 %1307, i64 %1308, i64 %1309, i64 %1311, i64 %1314, i64 %1317, i64 %1320, i64 %1323, i64 %1326, i64 %1329, i64 %1332, i64 %1335, i64 %1338), !noalias !1405
  %1342 = load i64, i64* %3, align 8
  %1343 = load i64, i64* %18, align 8
  %1344 = add i64 %1343, -288
  %1345 = trunc i64 %1341 to i32
  %1346 = inttoptr i64 %1344 to i32*
  store i32 %1345, i32* %1346
  %1347 = add i64 %1342, 23
  %1348 = load i64, i64* %17, align 8, !tbaa !1240
  %1349 = add i64 %1348, -8
  %1350 = inttoptr i64 %1349 to i64*
  store i64 %1347, i64* %1350
  %1351 = load i64, i64* %155, align 8, !alias.scope !1410, !noalias !1413
  %1352 = load i64, i64* %154, align 8, !alias.scope !1410, !noalias !1413
  %1353 = load i64, i64* %153, align 8, !alias.scope !1410, !noalias !1413
  %1354 = load i64, i64* %156, align 8, !alias.scope !1410, !noalias !1413
  %1355 = load i64, i64* %157, align 8, !alias.scope !1410, !noalias !1413
  %1356 = inttoptr i64 %1348 to i64*
  %1357 = load i64, i64* %1356
  %1358 = add i64 %1348, 8
  %1359 = inttoptr i64 %1358 to i64*
  %1360 = load i64, i64* %1359
  %1361 = add i64 %1348, 16
  %1362 = inttoptr i64 %1361 to i64*
  %1363 = load i64, i64* %1362
  %1364 = add i64 %1348, 24
  %1365 = inttoptr i64 %1364 to i64*
  %1366 = load i64, i64* %1365
  %1367 = add i64 %1348, 32
  %1368 = inttoptr i64 %1367 to i64*
  %1369 = load i64, i64* %1368
  %1370 = add i64 %1348, 40
  %1371 = inttoptr i64 %1370 to i64*
  %1372 = load i64, i64* %1371
  %1373 = add i64 %1348, 48
  %1374 = inttoptr i64 %1373 to i64*
  %1375 = load i64, i64* %1374
  %1376 = add i64 %1348, 56
  %1377 = inttoptr i64 %1376 to i64*
  %1378 = load i64, i64* %1377
  %1379 = add i64 %1348, 64
  %1380 = inttoptr i64 %1379 to i64*
  %1381 = load i64, i64* %1380
  %1382 = add i64 %1348, 72
  %1383 = inttoptr i64 %1382 to i64*
  %1384 = load i64, i64* %1383
  %1385 = inttoptr i64 %1349 to i64*
  %1386 = load i64, i64* %1385
  store i64 %1386, i64* %3, align 8, !alias.scope !1410, !noalias !1413
  store i64 %1348, i64* %17, align 8, !alias.scope !1410, !noalias !1413
  %1387 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 778), i64 %1351, i64 %1352, i64 %1353, i64 %1354, i64 %1355, i64 %1357, i64 %1360, i64 %1363, i64 %1366, i64 %1369, i64 %1372, i64 %1375, i64 %1378, i64 %1381, i64 %1384), !noalias !1410
  %1388 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 644), i64* %16, align 8, !tbaa !1240
  %1389 = load i64, i64* %18, align 8
  %1390 = add i64 %1389, -292
  %1391 = trunc i64 %1387 to i32
  %1392 = inttoptr i64 %1390 to i32*
  store i32 %1391, i32* %1392
  %1393 = add i64 %1388, 23
  %1394 = load i64, i64* %17, align 8, !tbaa !1240
  %1395 = add i64 %1394, -8
  %1396 = inttoptr i64 %1395 to i64*
  store i64 %1393, i64* %1396
  %1397 = load i64, i64* %155, align 8, !alias.scope !1415, !noalias !1418
  %1398 = load i64, i64* %154, align 8, !alias.scope !1415, !noalias !1418
  %1399 = load i64, i64* %153, align 8, !alias.scope !1415, !noalias !1418
  %1400 = load i64, i64* %156, align 8, !alias.scope !1415, !noalias !1418
  %1401 = load i64, i64* %157, align 8, !alias.scope !1415, !noalias !1418
  %1402 = inttoptr i64 %1394 to i64*
  %1403 = load i64, i64* %1402
  %1404 = add i64 %1394, 8
  %1405 = inttoptr i64 %1404 to i64*
  %1406 = load i64, i64* %1405
  %1407 = add i64 %1394, 16
  %1408 = inttoptr i64 %1407 to i64*
  %1409 = load i64, i64* %1408
  %1410 = add i64 %1394, 24
  %1411 = inttoptr i64 %1410 to i64*
  %1412 = load i64, i64* %1411
  %1413 = add i64 %1394, 32
  %1414 = inttoptr i64 %1413 to i64*
  %1415 = load i64, i64* %1414
  %1416 = add i64 %1394, 40
  %1417 = inttoptr i64 %1416 to i64*
  %1418 = load i64, i64* %1417
  %1419 = add i64 %1394, 48
  %1420 = inttoptr i64 %1419 to i64*
  %1421 = load i64, i64* %1420
  %1422 = add i64 %1394, 56
  %1423 = inttoptr i64 %1422 to i64*
  %1424 = load i64, i64* %1423
  %1425 = add i64 %1394, 64
  %1426 = inttoptr i64 %1425 to i64*
  %1427 = load i64, i64* %1426
  %1428 = add i64 %1394, 72
  %1429 = inttoptr i64 %1428 to i64*
  %1430 = load i64, i64* %1429
  store i64 %1394, i64* %17, align 8, !alias.scope !1415, !noalias !1418
  %1431 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 644), i64 %1397, i64 %1398, i64 %1399, i64 %1400, i64 %1401, i64 %1403, i64 %1406, i64 %1409, i64 %1412, i64 %1415, i64 %1418, i64 %1421, i64 %1424, i64 %1427, i64 %1430), !noalias !1415
  store i64 %1431, i64* %152, align 8, !alias.scope !1415, !noalias !1418
  %1432 = load i64, i64* %18, align 8
  %1433 = add i64 %1432, -296
  %1434 = trunc i64 %1431 to i32
  %1435 = inttoptr i64 %1433 to i32*
  store i32 %1434, i32* %1435
  %1436 = load i64, i64* %17, align 8
  %1437 = add i64 %1436, 264
  %1438 = icmp ugt i64 %1436, -265
  %1439 = zext i1 %1438 to i8
  store i8 %1439, i8* %47, align 1, !tbaa !1246
  %1440 = trunc i64 %1437 to i32
  %1441 = and i32 %1440, 255
  %1442 = tail call i32 @llvm.ctpop.i32(i32 %1441) #11
  %1443 = trunc i32 %1442 to i8
  %1444 = and i8 %1443, 1
  %1445 = xor i8 %1444, 1
  store i8 %1445, i8* %48, align 1, !tbaa !1260
  %1446 = xor i64 %1437, %1436
  %1447 = lshr i64 %1446, 4
  %1448 = trunc i64 %1447 to i8
  %1449 = and i8 %1448, 1
  store i8 %1449, i8* %49, align 1, !tbaa !1261
  %1450 = icmp eq i64 %1437, 0
  %1451 = zext i1 %1450 to i8
  store i8 %1451, i8* %50, align 1, !tbaa !1262
  %1452 = lshr i64 %1437, 63
  %1453 = trunc i64 %1452 to i8
  store i8 %1453, i8* %51, align 1, !tbaa !1263
  %1454 = lshr i64 %1436, 63
  %1455 = xor i64 %1452, %1454
  %1456 = add nuw nsw i64 %1455, %1452
  %1457 = icmp eq i64 %1456, 2
  %1458 = zext i1 %1457 to i8
  store i8 %1458, i8* %52, align 1, !tbaa !1264
  %1459 = add i64 %1436, 272
  %1460 = inttoptr i64 %1437 to i64*
  %1461 = load i64, i64* %1460
  store i64 %1461, i64* %14, align 8, !tbaa !1240
  %1462 = add i64 %1436, 280
  %1463 = inttoptr i64 %1459 to i64*
  %1464 = load i64, i64* %1463
  store i64 %1464, i64* %21, align 8, !tbaa !1240
  %1465 = add i64 %1436, 288
  %1466 = inttoptr i64 %1462 to i64*
  %1467 = load i64, i64* %1466
  store i64 %1467, i64* %22, align 8, !tbaa !1240
  %1468 = add i64 %1436, 296
  %1469 = inttoptr i64 %1465 to i64*
  %1470 = load i64, i64* %1469
  store i64 %1470, i64* %23, align 8, !tbaa !1240
  %1471 = add i64 %1436, 304
  %1472 = inttoptr i64 %1468 to i64*
  %1473 = load i64, i64* %1472
  store i64 %1473, i64* %24, align 8, !tbaa !1240
  %1474 = add i64 %1436, 312
  %1475 = inttoptr i64 %1471 to i64*
  %1476 = load i64, i64* %1475
  store i64 %1476, i64* %18, align 8, !tbaa !1240
  %1477 = inttoptr i64 %1474 to i64*
  %1478 = load i64, i64* %1477
  store i64 %1478, i64* %3, align 8, !tbaa !1240
  %1479 = add i64 %1436, 320
  store i64 %1479, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %731

block_400981:                                     ; preds = %block_40096f
  %1480 = sext i32 %320 to i64
  %1481 = inttoptr i64 %316 to i64*
  %1482 = load i64, i64* %1481
  %1483 = sext i32 %320 to i128
  %1484 = and i128 %1483, -18446744073709551616
  %1485 = sext i64 %1482 to i128
  %1486 = and i128 %1485, -18446744073709551616
  %1487 = zext i64 %1480 to i128
  %1488 = or i128 %1484, %1487
  %1489 = zext i64 %1482 to i128
  %1490 = or i128 %1486, %1489
  %1491 = mul nsw i128 %1490, %1488
  %1492 = trunc i128 %1491 to i64
  %1493 = add i64 %323, 13
  %1494 = inttoptr i64 %316 to i64*
  store i64 %1492, i64* %1494
  br label %block_40098e
}

; Function Attrs: noinline
define %struct.Memory* @sub_403e50_free_arrays(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403e50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  %12 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  %13 = add i64 %1, 20
  %14 = add i64 %9, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %13, i64* %15
  %16 = inttoptr i64 %14 to i64*
  %17 = load i64, i64* %16
  %18 = tail call i64 @free(i64 %12), !noalias !1420
  %19 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  %20 = add i64 %17, 16
  %21 = add i64 %9, -16
  %22 = inttoptr i64 %21 to i64*
  store i64 %20, i64* %22
  %23 = inttoptr i64 %21 to i64*
  %24 = load i64, i64* %23
  %25 = tail call i64 @free(i64 %19), !noalias !1423
  %26 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  store i64 %26, i64* %5, align 8, !tbaa !1240
  %27 = add i64 %24, 16
  %28 = add i64 %9, -16
  %29 = inttoptr i64 %28 to i64*
  store i64 %27, i64* %29
  %30 = tail call i64 @free(i64 %26), !noalias !1426
  store i64 %30, i64* %4, align 8, !alias.scope !1426, !noalias !1429
  %31 = inttoptr i64 %10 to i64*
  %32 = load i64, i64* %31
  store i64 %32, i64* %7, align 8, !tbaa !1240
  %33 = inttoptr i64 %9 to i64*
  %34 = load i64, i64* %33
  store i64 %34, i64* %3, align 8, !tbaa !1240
  %35 = add i64 %9, 8
  store i64 %35, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402220_setup(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_402220:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %22 = load i64, i64* %16, align 8
  %23 = load i64, i64* %15, align 8, !tbaa !1240
  %24 = add i64 %23, -8
  %25 = inttoptr i64 %24 to i64*
  store i64 %22, i64* %25
  store i64 %24, i64* %16, align 8, !tbaa !1240
  %26 = load i64, i64* %21, align 8
  %27 = add i64 %23, -16
  %28 = inttoptr i64 %27 to i64*
  store i64 %26, i64* %28
  %29 = load i64, i64* %20, align 8
  %30 = add i64 %23, -24
  %31 = inttoptr i64 %30 to i64*
  store i64 %29, i64* %31
  %32 = load i64, i64* %19, align 8
  %33 = add i64 %23, -32
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %18, align 8
  %36 = add i64 %23, -40
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = load i64, i64* %10, align 8
  %39 = add i64 %23, -48
  %40 = inttoptr i64 %39 to i64*
  store i64 %38, i64* %40
  %41 = add i64 %23, -456
  store i64 %41, i64* %15, align 8, !tbaa !1240
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %48 = add i64 %23, -344
  store i64 %48, i64* %9, align 8, !tbaa !1240
  %49 = add i64 %23, -56
  %50 = load i64, i64* %14, align 8
  %51 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %51
  %52 = add i64 %23, -64
  %53 = load i64, i64* %13, align 8
  %54 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %54
  %55 = add i64 %23, -72
  %56 = load i64, i64* %12, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %57
  %58 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %59 = sext i32 %58 to i64
  %60 = shl nsw i64 %59, 2
  %61 = add i64 %60, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %62 = inttoptr i64 %61 to i32*
  %63 = load i32, i32* %62
  %64 = mul nsw i64 %59, 12
  %65 = add i64 %64, %48
  %66 = inttoptr i64 %65 to i32*
  store i32 %63, i32* %66
  %67 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %68 = sext i32 %67 to i64
  %69 = shl nsw i64 %68, 2
  %70 = add i64 %69, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %71 = inttoptr i64 %70 to i32*
  %72 = load i32, i32* %71
  %73 = mul nsw i64 %68, 12
  %74 = load i64, i64* %9, align 8
  %75 = add i64 %73, %74
  %76 = add i64 %75, 4
  %77 = inttoptr i64 %76 to i32*
  store i32 %72, i32* %77
  %78 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 2
  %81 = add i64 %80, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82
  %84 = mul nsw i64 %79, 12
  %85 = add i64 %84, %74
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %86 to i32*
  store i32 %83, i32* %87
  %88 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %89 = add i32 %88, -1
  %90 = load i64, i64* %16, align 8
  %91 = add i64 %90, -68
  %92 = add i64 %1, 156
  %93 = inttoptr i64 %91 to i32*
  store i32 %89, i32* %93
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_4022bc

block_4025e4:                                     ; preds = %block_4025da
  %95 = add i32 %214, 1
  %96 = zext i32 %95 to i64
  %97 = sext i32 %95 to i64
  %98 = shl nsw i64 %97, 2
  %99 = add i64 %98, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %100 = inttoptr i64 %99 to i32*
  %101 = load i32, i32* %100
  %102 = add i64 %98, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %103 = inttoptr i64 %102 to i32*
  %104 = load i32, i32* %103
  %105 = add i64 %98, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %106 = inttoptr i64 %105 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %104 to i64
  %109 = sext i32 %107 to i64
  %110 = mul nsw i64 %109, %108
  store i64 %96, i64* %13, align 8, !tbaa !1240
  %111 = add i64 %98, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %112 = inttoptr i64 %111 to i32*
  %113 = load i32, i32* %112
  %114 = shl i64 %110, 32
  %115 = ashr exact i64 %114, 32
  %116 = sext i32 %113 to i64
  %117 = mul nsw i64 %116, %115
  %118 = and i64 %117, 4294967295
  store i64 %118, i64* %12, align 8, !tbaa !1240
  %119 = trunc i64 %117 to i32
  %120 = add i32 %119, %101
  %121 = sext i32 %214 to i64
  store i64 %121, i64* %11, align 8, !tbaa !1240
  %122 = shl nsw i64 %121, 2
  %123 = add i64 %122, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %124 = inttoptr i64 %123 to i32*
  store i32 %120, i32* %124
  %125 = inttoptr i64 %835 to i32*
  %126 = load i32, i32* %125
  %127 = add i32 %126, -1
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %9, align 8, !tbaa !1240
  %129 = inttoptr i64 %835 to i32*
  store i32 %127, i32* %129
  %130 = add i64 %224, -10
  br label %block_4025da

block_402762:                                     ; preds = %block_402644, %block_402652
  %131 = phi %struct.Memory* [ %212, %block_402644 ], [ %212, %block_402652 ]
  %132 = load i64, i64* %15, align 8
  %133 = add i64 %132, 408
  %134 = icmp ugt i64 %132, -409
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %42, align 1, !tbaa !1246
  %136 = trunc i64 %133 to i32
  %137 = and i32 %136, 255
  %138 = tail call i32 @llvm.ctpop.i32(i32 %137) #11
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  store i8 %141, i8* %43, align 1, !tbaa !1260
  %142 = xor i64 %132, 16
  %143 = xor i64 %142, %133
  %144 = lshr i64 %143, 4
  %145 = trunc i64 %144 to i8
  %146 = and i8 %145, 1
  store i8 %146, i8* %44, align 1, !tbaa !1261
  %147 = icmp eq i64 %133, 0
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %45, align 1, !tbaa !1262
  %149 = lshr i64 %133, 63
  %150 = trunc i64 %149 to i8
  store i8 %150, i8* %46, align 1, !tbaa !1263
  %151 = lshr i64 %132, 63
  %152 = xor i64 %149, %151
  %153 = add nuw nsw i64 %152, %149
  %154 = icmp eq i64 %153, 2
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %47, align 1, !tbaa !1264
  %156 = add i64 %132, 416
  %157 = inttoptr i64 %133 to i64*
  %158 = load i64, i64* %157
  store i64 %158, i64* %10, align 8, !tbaa !1240
  %159 = add i64 %132, 424
  %160 = inttoptr i64 %156 to i64*
  %161 = load i64, i64* %160
  store i64 %161, i64* %18, align 8, !tbaa !1240
  %162 = add i64 %132, 432
  %163 = inttoptr i64 %159 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %19, align 8, !tbaa !1240
  %165 = add i64 %132, 440
  %166 = inttoptr i64 %162 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %20, align 8, !tbaa !1240
  %168 = add i64 %132, 448
  %169 = inttoptr i64 %165 to i64*
  %170 = load i64, i64* %169
  store i64 %170, i64* %21, align 8, !tbaa !1240
  %171 = add i64 %132, 456
  %172 = inttoptr i64 %168 to i64*
  %173 = load i64, i64* %172
  store i64 %173, i64* %16, align 8, !tbaa !1240
  %174 = inttoptr i64 %171 to i64*
  %175 = load i64, i64* %174
  store i64 %175, i64* %3, align 8, !tbaa !1240
  %176 = add i64 %132, 464
  store i64 %176, i64* %15, align 8, !tbaa !1240
  ret %struct.Memory* %131

block_4023e1:                                     ; preds = %block_4023d7
  %177 = inttoptr i64 %505 to i32*
  %178 = load i32, i32* %177
  %179 = sext i32 %178 to i64
  %180 = mul nsw i64 %179, 12
  %181 = add i64 %180, %470
  %182 = sext i32 %199 to i64
  %183 = shl nsw i64 %182, 2
  %184 = add i64 %183, %181
  %185 = inttoptr i64 %184 to i32*
  %186 = load i32, i32* %185
  %187 = add i32 %186, 2
  %188 = add i64 %180, %475
  %189 = add i64 %183, %188
  %190 = inttoptr i64 %189 to i32*
  store i32 %187, i32* %190
  %191 = inttoptr i64 %474 to i32*
  %192 = load i32, i32* %191
  %193 = add i32 %192, 1
  %194 = inttoptr i64 %474 to i32*
  store i32 %193, i32* %194
  %195 = add i64 %209, -10
  br label %block_4023d7

block_4023d7:                                     ; preds = %block_4023d0, %block_4023e1
  %196 = phi i64 [ %225, %block_4023d0 ], [ %195, %block_4023e1 ]
  %197 = phi %struct.Memory* [ %477, %block_4023d0 ], [ %197, %block_4023e1 ]
  %198 = inttoptr i64 %474 to i32*
  %199 = load i32, i32* %198
  %200 = add i32 %199, -3
  %201 = lshr i32 %200, 31
  %202 = lshr i32 %199, 31
  %203 = xor i32 %201, %202
  %204 = add nuw nsw i32 %203, %202
  %205 = icmp eq i32 %204, 2
  %206 = icmp ne i32 %201, 0
  %207 = xor i1 %206, %205
  %208 = select i1 %207, i64 10, i64 77
  %209 = add i64 %196, %208
  br i1 %207, label %block_4023e1, label %block_402424

block_4025da:                                     ; preds = %block_402489, %block_4025e4
  %210 = phi i64 [ %834, %block_402489 ], [ %121, %block_4025e4 ]
  %211 = phi i64 [ %836, %block_402489 ], [ %130, %block_4025e4 ]
  %212 = phi %struct.Memory* [ %477, %block_402489 ], [ %212, %block_4025e4 ]
  %213 = inttoptr i64 %835 to i32*
  %214 = load i32, i32* %213
  %215 = add i32 %214, -1
  %216 = lshr i32 %215, 31
  %217 = lshr i32 %214, 31
  %218 = xor i32 %216, %217
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = icmp ne i32 %216, 0
  %222 = xor i1 %221, %220
  %223 = select i1 %222, i64 106, i64 10
  %224 = add i64 %211, %223
  br i1 %222, label %block_402644, label %block_4025e4

block_4023d0:                                     ; preds = %block_4023c6
  %225 = add i64 %489, 7
  %226 = inttoptr i64 %474 to i32*
  store i32 0, i32* %226
  br label %block_4023d7

block_4022cd:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_4022c6
  %227 = phi i64 [ %576, %block_4022c6 ], [ %706, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %228 = phi i64 [ %503, %block_4022c6 ], [ %703, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %229 = phi %struct.Memory* [ %504, %block_4022c6 ], [ %683, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %230 = add i64 %228, -76
  %231 = inttoptr i64 %230 to i32*
  %232 = load i32, i32* %231
  %233 = add i32 %232, -3
  %234 = lshr i32 %233, 31
  %235 = trunc i32 %234 to i8
  %236 = lshr i32 %232, 31
  %237 = xor i32 %234, %236
  %238 = add nuw nsw i32 %237, %236
  %239 = icmp eq i32 %238, 2
  %240 = icmp ne i8 %235, 0
  %241 = xor i1 %240, %239
  %242 = select i1 %241, i64 10, i64 99
  %243 = add i64 %227, %242
  br i1 %241, label %block_4022d7, label %block_402330

block_402652:                                     ; preds = %block_402644
  %244 = add i64 %501, 17
  %245 = load i64, i64* %15, align 8, !tbaa !1240
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %251 = load i64, i64* %250, align 8, !alias.scope !1431, !noalias !1434
  %252 = load i64, i64* %94, align 8, !alias.scope !1431, !noalias !1434
  %253 = load i64, i64* %17, align 8, !alias.scope !1431, !noalias !1434
  %254 = load i64, i64* %466, align 8, !alias.scope !1431, !noalias !1434
  %255 = inttoptr i64 %245 to i64*
  %256 = load i64, i64* %255
  %257 = add i64 %245, 8
  %258 = inttoptr i64 %257 to i64*
  %259 = load i64, i64* %258
  %260 = add i64 %245, 16
  %261 = inttoptr i64 %260 to i64*
  %262 = load i64, i64* %261
  %263 = add i64 %245, 24
  %264 = inttoptr i64 %263 to i64*
  %265 = load i64, i64* %264
  %266 = add i64 %245, 32
  %267 = inttoptr i64 %266 to i64*
  %268 = load i64, i64* %267
  %269 = add i64 %245, 40
  %270 = inttoptr i64 %269 to i64*
  %271 = load i64, i64* %270
  %272 = add i64 %245, 48
  %273 = inttoptr i64 %272 to i64*
  %274 = load i64, i64* %273
  %275 = add i64 %245, 56
  %276 = inttoptr i64 %275 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %245, 64
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %245, 72
  %282 = inttoptr i64 %281 to i64*
  %283 = load i64, i64* %282
  %284 = inttoptr i64 %246 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %3, align 8, !alias.scope !1431, !noalias !1434
  store i64 %245, i64* %15, align 8, !alias.scope !1431, !noalias !1434
  %286 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1807), i64 %251, i64 %252, i64 %210, i64 %253, i64 %254, i64 %256, i64 %259, i64 %262, i64 %265, i64 %268, i64 %271, i64 %274, i64 %277, i64 %280, i64 %283), !noalias !1431
  %287 = load i64, i64* %3, align 8
  %288 = load i64, i64* %16, align 8
  %289 = add i64 %288, -348
  %290 = trunc i64 %286 to i32
  %291 = inttoptr i64 %289 to i32*
  store i32 %290, i32* %291
  %292 = add i64 %287, 23
  %293 = load i64, i64* %15, align 8, !tbaa !1240
  %294 = add i64 %293, -8
  %295 = inttoptr i64 %294 to i64*
  store i64 %292, i64* %295
  %296 = load i64, i64* %250, align 8, !alias.scope !1436, !noalias !1439
  %297 = load i64, i64* %94, align 8, !alias.scope !1436, !noalias !1439
  %298 = load i64, i64* %249, align 8, !alias.scope !1436, !noalias !1439
  %299 = load i64, i64* %17, align 8, !alias.scope !1436, !noalias !1439
  %300 = load i64, i64* %466, align 8, !alias.scope !1436, !noalias !1439
  %301 = inttoptr i64 %293 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %293, 8
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304
  %306 = add i64 %293, 16
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  %309 = add i64 %293, 24
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = add i64 %293, 32
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  %315 = add i64 %293, 40
  %316 = inttoptr i64 %315 to i64*
  %317 = load i64, i64* %316
  %318 = add i64 %293, 48
  %319 = inttoptr i64 %318 to i64*
  %320 = load i64, i64* %319
  %321 = add i64 %293, 56
  %322 = inttoptr i64 %321 to i64*
  %323 = load i64, i64* %322
  %324 = add i64 %293, 64
  %325 = inttoptr i64 %324 to i64*
  %326 = load i64, i64* %325
  %327 = add i64 %293, 72
  %328 = inttoptr i64 %327 to i64*
  %329 = load i64, i64* %328
  %330 = inttoptr i64 %294 to i64*
  %331 = load i64, i64* %330
  store i64 %331, i64* %3, align 8, !alias.scope !1436, !noalias !1439
  store i64 %293, i64* %15, align 8, !alias.scope !1436, !noalias !1439
  %332 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1820), i64 %296, i64 %297, i64 %298, i64 %299, i64 %300, i64 %302, i64 %305, i64 %308, i64 %311, i64 %314, i64 %317, i64 %320, i64 %323, i64 %326, i64 %329), !noalias !1436
  store i64 %332, i64* %248, align 8, !alias.scope !1436, !noalias !1439
  %333 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1876), i64* %14, align 8, !tbaa !1240
  %334 = load i64, i64* %16, align 8
  %335 = add i64 %334, -336
  store i64 %335, i64* %11, align 8, !tbaa !1240
  %336 = add i64 %334, -68
  %337 = inttoptr i64 %336 to i32*
  %338 = load i32, i32* %337
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %13, align 8, !tbaa !1240
  %340 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %341 = zext i32 %340 to i64
  store i64 %341, i64* %12, align 8, !tbaa !1240
  %342 = sext i32 %338 to i64
  %343 = mul nsw i64 %342, 12
  %344 = add i64 %343, %335
  %345 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %346 = inttoptr i64 %344 to i32*
  %347 = load i32, i32* %346
  %348 = zext i32 %347 to i64
  store i64 %348, i64* %345, align 8, !tbaa !1240
  %349 = add i64 %344, 4
  %350 = inttoptr i64 %349 to i32*
  %351 = load i32, i32* %350
  %352 = zext i32 %351 to i64
  store i64 %352, i64* %17, align 8, !tbaa !1240
  %353 = load i64, i64* %16, align 8
  %354 = add i64 %353, -68
  %355 = inttoptr i64 %354 to i32*
  %356 = load i32, i32* %355
  %357 = sext i32 %356 to i64
  %358 = mul nsw i64 %357, 12
  %359 = load i64, i64* %11, align 8
  %360 = add i64 %358, %359
  %361 = add i64 %360, 8
  %362 = inttoptr i64 %361 to i32*
  %363 = load i32, i32* %362
  %364 = zext i32 %363 to i64
  store i64 %364, i64* %466, align 8, !tbaa !1240
  %365 = add i64 %353, -48
  %366 = inttoptr i64 %365 to i64*
  %367 = load i64, i64* %366
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %369 = inttoptr i64 %367 to i32*
  %370 = load i32, i32* %369
  %371 = zext i32 %370 to i64
  store i64 %371, i64* %368, align 8, !tbaa !1240
  %372 = add i64 %353, -56
  %373 = inttoptr i64 %372 to i64*
  %374 = load i64, i64* %373
  %375 = inttoptr i64 %374 to i32*
  %376 = load i32, i32* %375
  %377 = add i64 %353, -64
  %378 = inttoptr i64 %377 to i64*
  %379 = load i64, i64* %378
  %380 = inttoptr i64 %379 to i32*
  %381 = load i32, i32* %380
  %382 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1400) to i32*)
  %383 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1408) to i32*)
  %384 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1416) to i32*)
  %385 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1404) to i32*)
  %386 = load i64, i64* %16, align 8
  %387 = add i64 %386, -352
  %388 = load i32, i32* %5, align 4
  %389 = inttoptr i64 %387 to i32*
  store i32 %388, i32* %389
  %390 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1412) to i32*)
  %391 = add i64 %386, -356
  %392 = inttoptr i64 %391 to i32*
  store i32 %390, i32* %392
  %393 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1420) to i32*)
  %394 = add i64 %386, -360
  %395 = inttoptr i64 %394 to i32*
  store i32 %385, i32* %395
  %396 = load i32, i32* %465, align 4
  %397 = zext i32 %396 to i64
  store i64 %397, i64* %11, align 8, !tbaa !1240
  %398 = load i64, i64* %15, align 8
  %399 = inttoptr i64 %398 to i32*
  store i32 %370, i32* %399
  %400 = add i64 %398, 8
  %401 = inttoptr i64 %400 to i32*
  store i32 %376, i32* %401
  %402 = add i64 %398, 16
  %403 = inttoptr i64 %402 to i32*
  store i32 %381, i32* %403
  %404 = add i64 %398, 24
  %405 = inttoptr i64 %404 to i32*
  store i32 %382, i32* %405
  %406 = add i64 %398, 32
  %407 = inttoptr i64 %406 to i32*
  store i32 %383, i32* %407
  %408 = add i64 %398, 40
  %409 = inttoptr i64 %408 to i32*
  store i32 %384, i32* %409
  %410 = inttoptr i64 %394 to i32*
  %411 = load i32, i32* %410
  %412 = add i64 %398, 48
  %413 = inttoptr i64 %412 to i32*
  store i32 %411, i32* %413
  %414 = inttoptr i64 %391 to i32*
  %415 = load i32, i32* %414
  %416 = zext i32 %415 to i64
  store i64 %416, i64* %345, align 8, !tbaa !1240
  %417 = add i64 %398, 56
  %418 = inttoptr i64 %417 to i32*
  store i32 %415, i32* %418
  %419 = add i64 %398, 64
  %420 = inttoptr i64 %419 to i32*
  store i32 %393, i32* %420
  %421 = add i64 %333, 226
  %422 = add i64 %398, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %421, i64* %423
  %424 = load i64, i64* %14, align 8, !alias.scope !1441, !noalias !1444
  %425 = load i64, i64* %250, align 8, !alias.scope !1441, !noalias !1444
  %426 = load i64, i64* %94, align 8, !alias.scope !1441, !noalias !1444
  %427 = load i64, i64* %17, align 8, !alias.scope !1441, !noalias !1444
  %428 = load i64, i64* %466, align 8, !alias.scope !1441, !noalias !1444
  %429 = inttoptr i64 %398 to i64*
  %430 = load i64, i64* %429
  %431 = add i64 %398, 8
  %432 = inttoptr i64 %431 to i64*
  %433 = load i64, i64* %432
  %434 = add i64 %398, 16
  %435 = inttoptr i64 %434 to i64*
  %436 = load i64, i64* %435
  %437 = add i64 %398, 24
  %438 = inttoptr i64 %437 to i64*
  %439 = load i64, i64* %438
  %440 = add i64 %398, 32
  %441 = inttoptr i64 %440 to i64*
  %442 = load i64, i64* %441
  %443 = add i64 %398, 40
  %444 = inttoptr i64 %443 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %398, 48
  %447 = inttoptr i64 %446 to i64*
  %448 = load i64, i64* %447
  %449 = add i64 %398, 56
  %450 = inttoptr i64 %449 to i64*
  %451 = load i64, i64* %450
  %452 = add i64 %398, 64
  %453 = inttoptr i64 %452 to i64*
  %454 = load i64, i64* %453
  %455 = add i64 %398, 72
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  %458 = inttoptr i64 %422 to i64*
  %459 = load i64, i64* %458
  store i64 %459, i64* %3, align 8, !alias.scope !1441, !noalias !1444
  store i64 %398, i64* %15, align 8, !alias.scope !1441, !noalias !1444
  %460 = tail call i64 @printf(i64 %424, i64 %425, i64 %426, i64 %397, i64 %427, i64 %428, i64 %430, i64 %433, i64 %436, i64 %439, i64 %442, i64 %445, i64 %448, i64 %451, i64 %454, i64 %457), !noalias !1441
  store i64 %460, i64* %248, align 8, !alias.scope !1441, !noalias !1444
  %461 = load i64, i64* %16, align 8
  %462 = add i64 %461, -364
  %463 = trunc i64 %460 to i32
  %464 = inttoptr i64 %462 to i32*
  store i32 %463, i32* %464
  br label %block_402762

block_402343:                                     ; preds = %block_4022bc
  %465 = bitcast %union.anon* %8 to i32*
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %467 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %468 = add i64 %518, 10
  %469 = inttoptr i64 %505 to i32*
  store i32 %467, i32* %469
  %470 = add i64 %503, -336
  br label %block_40234d

block_4023bc:                                     ; preds = %block_40234d
  %471 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %472 = add i64 %533, 10
  %473 = inttoptr i64 %505 to i32*
  store i32 %471, i32* %473
  %474 = add i64 %503, -76
  %475 = add i64 %503, -208
  br label %block_4023c6

block_4023c6:                                     ; preds = %block_402424, %block_4023bc
  %476 = phi i64 [ %472, %block_4023bc ], [ %614, %block_402424 ]
  %477 = phi %struct.Memory* [ %520, %block_4023bc ], [ %197, %block_402424 ]
  %478 = inttoptr i64 %505 to i32*
  %479 = load i32, i32* %478
  %480 = add i32 %479, -1
  %481 = lshr i32 %480, 31
  %482 = lshr i32 %479, 31
  %483 = xor i32 %481, %482
  %484 = add nuw nsw i32 %483, %482
  %485 = icmp eq i32 %484, 2
  %486 = icmp ne i32 %481, 0
  %487 = xor i1 %486, %485
  %488 = select i1 %487, i64 195, i64 10
  %489 = add i64 %476, %488
  br i1 %487, label %block_402489, label %block_4023d0

block_402644:                                     ; preds = %block_4025da
  %490 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1204) to i32*)
  %491 = add i32 %490, -1
  %492 = lshr i32 %491, 31
  %493 = trunc i32 %492 to i8
  %494 = lshr i32 %490, 31
  %495 = xor i32 %492, %494
  %496 = add nuw nsw i32 %495, %494
  %497 = icmp eq i32 %496, 2
  %498 = icmp ne i8 %493, 0
  %499 = xor i1 %498, %497
  %500 = select i1 %499, i64 286, i64 14
  %501 = add i64 %224, %500
  br i1 %499, label %block_402762, label %block_402652

block_4022bc:                                     ; preds = %block_402330, %block_402220
  %502 = phi i64 [ %92, %block_402220 ], [ %539, %block_402330 ]
  %503 = phi i64 [ %90, %block_402220 ], [ %228, %block_402330 ]
  %504 = phi %struct.Memory* [ %2, %block_402220 ], [ %229, %block_402330 ]
  %505 = add i64 %503, -68
  %506 = inttoptr i64 %505 to i32*
  %507 = load i32, i32* %506
  %508 = add i32 %507, -1
  %509 = lshr i32 %508, 31
  %510 = trunc i32 %509 to i8
  %511 = lshr i32 %507, 31
  %512 = xor i32 %509, %511
  %513 = add nuw nsw i32 %512, %511
  %514 = icmp eq i32 %513, 2
  %515 = icmp ne i8 %510, 0
  %516 = xor i1 %515, %514
  %517 = select i1 %516, i64 135, i64 10
  %518 = add i64 %502, %517
  br i1 %516, label %block_402343, label %block_4022c6

block_40234d:                                     ; preds = %block_402357, %block_402343
  %519 = phi i64 [ %468, %block_402343 ], [ %574, %block_402357 ]
  %520 = phi %struct.Memory* [ %504, %block_402343 ], [ %520, %block_402357 ]
  %521 = inttoptr i64 %505 to i32*
  %522 = load i32, i32* %521
  %523 = add i32 %522, -1
  %524 = lshr i32 %523, 31
  %525 = trunc i32 %524 to i8
  %526 = lshr i32 %522, 31
  %527 = xor i32 %524, %526
  %528 = add nuw nsw i32 %527, %526
  %529 = icmp eq i32 %528, 2
  %530 = icmp ne i8 %525, 0
  %531 = xor i1 %530, %529
  %532 = select i1 %531, i64 111, i64 10
  %533 = add i64 %519, %532
  br i1 %531, label %block_4023bc, label %block_402357

block_402330:                                     ; preds = %block_4022cd
  %534 = add i64 %228, -68
  %535 = inttoptr i64 %534 to i32*
  %536 = load i32, i32* %535
  %537 = add i32 %536, -1
  %538 = inttoptr i64 %534 to i32*
  store i32 %537, i32* %538
  %539 = add i64 %243, -116
  br label %block_4022bc

block_402357:                                     ; preds = %block_40234d
  %540 = sext i32 %522 to i64
  %541 = mul nsw i64 %540, 12
  %542 = add i64 %541, %470
  %543 = inttoptr i64 %542 to i32*
  %544 = load i32, i32* %543
  %545 = shl nsw i64 %540, 2
  %546 = add i64 %545, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %547 = inttoptr i64 %546 to i32*
  store i32 %544, i32* %547
  %548 = inttoptr i64 %505 to i32*
  %549 = load i32, i32* %548
  %550 = sext i32 %549 to i64
  %551 = mul nsw i64 %550, 12
  %552 = add i64 %551, %470
  %553 = add i64 %552, 4
  %554 = inttoptr i64 %553 to i32*
  %555 = load i32, i32* %554
  %556 = shl nsw i64 %550, 2
  %557 = add i64 %556, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %558 = inttoptr i64 %557 to i32*
  store i32 %555, i32* %558
  %559 = inttoptr i64 %505 to i32*
  %560 = load i32, i32* %559
  %561 = sext i32 %560 to i64
  %562 = mul nsw i64 %561, 12
  %563 = add i64 %562, %470
  %564 = add i64 %563, 8
  %565 = inttoptr i64 %564 to i32*
  %566 = load i32, i32* %565
  %567 = shl nsw i64 %561, 2
  %568 = add i64 %567, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %569 = inttoptr i64 %568 to i32*
  store i32 %566, i32* %569
  %570 = inttoptr i64 %505 to i32*
  %571 = load i32, i32* %570
  %572 = add i32 %571, -1
  %573 = inttoptr i64 %505 to i32*
  store i32 %572, i32* %573
  %574 = add i64 %533, -10
  br label %block_40234d

block_4022c6:                                     ; preds = %block_4022bc
  %575 = add i64 %503, -76
  %576 = add i64 %518, 7
  %577 = inttoptr i64 %575 to i32*
  store i32 0, i32* %577
  br label %block_4022cd

block_402424:                                     ; preds = %block_4023d7
  %578 = inttoptr i64 %505 to i32*
  %579 = load i32, i32* %578
  %580 = sext i32 %579 to i64
  %581 = mul nsw i64 %580, 12
  %582 = add i64 %581, %475
  %583 = inttoptr i64 %582 to i32*
  %584 = load i32, i32* %583
  %585 = shl nsw i64 %580, 2
  %586 = add i64 %585, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %587 = inttoptr i64 %586 to i32*
  store i32 %584, i32* %587
  %588 = inttoptr i64 %505 to i32*
  %589 = load i32, i32* %588
  %590 = sext i32 %589 to i64
  %591 = mul nsw i64 %590, 12
  %592 = add i64 %591, %475
  %593 = add i64 %592, 4
  %594 = inttoptr i64 %593 to i32*
  %595 = load i32, i32* %594
  %596 = shl nsw i64 %590, 2
  %597 = add i64 %596, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %598 = inttoptr i64 %597 to i32*
  store i32 %595, i32* %598
  %599 = inttoptr i64 %505 to i32*
  %600 = load i32, i32* %599
  %601 = sext i32 %600 to i64
  %602 = mul nsw i64 %601, 12
  %603 = add i64 %602, %475
  %604 = add i64 %603, 8
  %605 = inttoptr i64 %604 to i32*
  %606 = load i32, i32* %605
  %607 = shl nsw i64 %601, 2
  %608 = add i64 %607, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %609 = inttoptr i64 %608 to i32*
  store i32 %606, i32* %609
  %610 = inttoptr i64 %505 to i32*
  %611 = load i32, i32* %610
  %612 = add i32 %611, -1
  %613 = inttoptr i64 %505 to i32*
  store i32 %612, i32* %613
  %614 = add i64 %209, -94
  br label %block_4023c6

block_4022d7:                                     ; preds = %block_4022cd
  %615 = add i64 %228, -336
  store i64 %615, i64* %9, align 8, !tbaa !1240
  store i64 2, i64* %11, align 8, !tbaa !1240
  %616 = add i64 %228, -68
  %617 = inttoptr i64 %616 to i32*
  %618 = load i32, i32* %617
  %619 = add i32 %618, 1
  %620 = sext i32 %619 to i64
  %621 = mul nsw i64 %620, 12
  %622 = lshr i64 %621, 63
  %623 = add i64 %621, %615
  store i64 %623, i64* %14, align 8, !tbaa !1240
  %624 = icmp ult i64 %623, %615
  %625 = icmp ult i64 %623, %621
  %626 = or i1 %624, %625
  %627 = zext i1 %626 to i8
  store i8 %627, i8* %42, align 1, !tbaa !1246
  %628 = trunc i64 %623 to i32
  %629 = and i32 %628, 255
  %630 = tail call i32 @llvm.ctpop.i32(i32 %629) #11
  %631 = trunc i32 %630 to i8
  %632 = and i8 %631, 1
  %633 = xor i8 %632, 1
  store i8 %633, i8* %43, align 1, !tbaa !1260
  %634 = xor i64 %621, %615
  %635 = xor i64 %634, %623
  %636 = lshr i64 %635, 4
  %637 = trunc i64 %636 to i8
  %638 = and i8 %637, 1
  store i8 %638, i8* %44, align 1, !tbaa !1261
  %639 = icmp eq i64 %623, 0
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %45, align 1, !tbaa !1262
  %641 = lshr i64 %623, 63
  %642 = trunc i64 %641 to i8
  store i8 %642, i8* %46, align 1, !tbaa !1263
  %643 = lshr i64 %615, 63
  %644 = xor i64 %641, %643
  %645 = xor i64 %641, %622
  %646 = add nuw nsw i64 %644, %645
  %647 = icmp eq i64 %646, 2
  %648 = zext i1 %647 to i8
  store i8 %648, i8* %47, align 1, !tbaa !1264
  %649 = load i64, i64* %16, align 8
  %650 = add i64 %649, -76
  %651 = inttoptr i64 %650 to i32*
  %652 = load i32, i32* %651
  %653 = sext i32 %652 to i64
  store i64 %653, i64* %13, align 8, !tbaa !1240
  %654 = shl nsw i64 %653, 2
  %655 = add i64 %654, %623
  %656 = inttoptr i64 %655 to i32*
  %657 = load i32, i32* %656
  %658 = zext i32 %657 to i64
  %659 = add i64 %649, -344
  %660 = load i64, i64* %9, align 8
  %661 = inttoptr i64 %659 to i64*
  store i64 %660, i64* %661
  store i64 %658, i64* %9, align 8, !tbaa !1240
  %662 = sext i32 %657 to i64
  %663 = lshr i64 %662, 32
  store i64 %663, i64* %94, align 8, !tbaa !1240
  %664 = load i32, i32* %7, align 4
  %665 = add i64 %243, 50
  store i64 %665, i64* %3, align 8
  %666 = sext i32 %664 to i64
  %667 = shl nuw i64 %663, 32
  %668 = or i64 %667, %658
  %669 = sdiv i64 %668, %666
  %670 = shl i64 %669, 32
  %671 = ashr exact i64 %670, 32
  %672 = icmp eq i64 %669, %671
  br i1 %672, label %678, label %673

; <label>:673:                                    ; preds = %block_4022d7
  %674 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %665, %struct.Memory* %229) #14
  %675 = load i64, i64* %16, align 8
  %676 = load i64, i64* %3, align 8
  %677 = load i32, i32* %5, align 4
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:678:                                    ; preds = %block_4022d7
  %679 = trunc i64 %669 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %678, %673
  %680 = phi i32 [ %677, %673 ], [ %679, %678 ]
  %681 = phi i64 [ %676, %673 ], [ %665, %678 ]
  %682 = phi i64 [ %675, %673 ], [ %649, %678 ]
  %683 = phi %struct.Memory* [ %674, %673 ], [ %229, %678 ]
  %684 = add i64 %682, -68
  %685 = inttoptr i64 %684 to i32*
  %686 = load i32, i32* %685
  %687 = sext i32 %686 to i64
  %688 = mul nsw i64 %687, 12
  %689 = add i64 %682, -344
  %690 = inttoptr i64 %689 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %688, %691
  store i64 %692, i64* %14, align 8, !tbaa !1240
  %693 = add i64 %682, -76
  %694 = inttoptr i64 %693 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  %697 = shl nsw i64 %696, 2
  %698 = add i64 %697, %692
  %699 = inttoptr i64 %698 to i32*
  store i32 %680, i32* %699
  %700 = inttoptr i64 %693 to i32*
  %701 = load i32, i32* %700
  %702 = add i32 %701, 1
  %703 = load i64, i64* %16, align 8
  %704 = add i64 %703, -76
  %705 = inttoptr i64 %704 to i32*
  store i32 %702, i32* %705
  %706 = add i64 %681, -60
  br label %block_4022cd

block_402489:                                     ; preds = %block_4023c6
  store i64 %470, i64* %9, align 8, !tbaa !1240
  %707 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %708 = inttoptr i64 %505 to i32*
  store i32 %707, i32* %708
  %709 = inttoptr i64 %505 to i32*
  %710 = load i32, i32* %709
  %711 = sext i32 %710 to i64
  %712 = mul nsw i64 %711, 12
  %713 = add i64 %712, %470
  %714 = inttoptr i64 %713 to i32*
  %715 = load i32, i32* %714
  %716 = add i32 %715, 2
  %717 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %718 = sext i32 %717 to i64
  %719 = mul nsw i64 %718, 12
  %720 = load i64, i64* %9, align 8
  %721 = add i64 %719, %720
  %722 = inttoptr i64 %721 to i32*
  %723 = load i32, i32* %722
  %724 = sub i32 %716, %723
  store i32 %724, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1400) to i32*)
  %725 = load i64, i64* %16, align 8
  %726 = add i64 %725, -68
  %727 = inttoptr i64 %726 to i32*
  %728 = load i32, i32* %727
  %729 = sext i32 %728 to i64
  %730 = mul nsw i64 %729, 12
  %731 = load i64, i64* %9, align 8
  %732 = add i64 %730, %731
  %733 = inttoptr i64 %732 to i32*
  %734 = load i32, i32* %733
  %735 = add i32 %734, 1
  store i32 %735, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1404) to i32*)
  %736 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1404) to i32*)
  %737 = add i32 %736, 3
  %738 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1400) to i32*)
  %739 = sub i32 %737, %738
  %740 = load i64, i64* %16, align 8
  %741 = add i64 %740, -48
  %742 = inttoptr i64 %741 to i64*
  %743 = load i64, i64* %742
  %744 = inttoptr i64 %743 to i32*
  store i32 %739, i32* %744
  %745 = add i64 %740, -68
  %746 = inttoptr i64 %745 to i32*
  %747 = load i32, i32* %746
  %748 = sext i32 %747 to i64
  %749 = mul nsw i64 %748, 12
  %750 = load i64, i64* %9, align 8
  %751 = add i64 %749, %750
  %752 = add i64 %751, 4
  %753 = inttoptr i64 %752 to i32*
  %754 = load i32, i32* %753
  %755 = add i32 %754, 2
  %756 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %757 = sext i32 %756 to i64
  %758 = mul nsw i64 %757, 12
  %759 = load i64, i64* %9, align 8
  %760 = add i64 %758, %759
  %761 = add i64 %760, 4
  %762 = inttoptr i64 %761 to i32*
  %763 = load i32, i32* %762
  %764 = sub i32 %755, %763
  store i32 %764, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1408) to i32*)
  %765 = load i64, i64* %16, align 8
  %766 = add i64 %765, -68
  %767 = inttoptr i64 %766 to i32*
  %768 = load i32, i32* %767
  %769 = sext i32 %768 to i64
  %770 = mul nsw i64 %769, 12
  %771 = load i64, i64* %9, align 8
  %772 = add i64 %770, %771
  %773 = add i64 %772, 4
  %774 = inttoptr i64 %773 to i32*
  %775 = load i32, i32* %774
  %776 = add i32 %775, 1
  store i32 %776, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1412) to i32*)
  %777 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1412) to i32*)
  %778 = add i32 %777, 3
  %779 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1408) to i32*)
  %780 = sub i32 %778, %779
  %781 = load i64, i64* %16, align 8
  %782 = add i64 %781, -56
  %783 = inttoptr i64 %782 to i64*
  %784 = load i64, i64* %783
  %785 = inttoptr i64 %784 to i32*
  store i32 %780, i32* %785
  %786 = add i64 %781, -68
  %787 = inttoptr i64 %786 to i32*
  %788 = load i32, i32* %787
  %789 = sext i32 %788 to i64
  %790 = mul nsw i64 %789, 12
  %791 = load i64, i64* %9, align 8
  %792 = add i64 %790, %791
  %793 = add i64 %792, 8
  %794 = inttoptr i64 %793 to i32*
  %795 = load i32, i32* %794
  %796 = add i32 %795, 2
  %797 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %798 = sext i32 %797 to i64
  %799 = mul nsw i64 %798, 12
  %800 = load i64, i64* %9, align 8
  %801 = add i64 %799, %800
  store i64 %801, i64* %13, align 8, !tbaa !1240
  %802 = add i64 %801, 8
  %803 = inttoptr i64 %802 to i32*
  %804 = load i32, i32* %803
  %805 = sub i32 %796, %804
  store i32 %805, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1416) to i32*)
  %806 = load i64, i64* %16, align 8
  %807 = add i64 %806, -68
  %808 = inttoptr i64 %807 to i32*
  %809 = load i32, i32* %808
  %810 = sext i32 %809 to i64
  %811 = mul nsw i64 %810, 12
  store i64 %811, i64* %12, align 8, !tbaa !1240
  %812 = load i64, i64* %9, align 8
  %813 = add i64 %811, %812
  %814 = add i64 %813, 8
  %815 = inttoptr i64 %814 to i32*
  %816 = load i32, i32* %815
  %817 = add i32 %816, 1
  store i32 %817, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1420) to i32*)
  %818 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1420) to i32*)
  %819 = add i32 %818, 3
  %820 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1416) to i32*)
  %821 = sub i32 %819, %820
  %822 = load i64, i64* %16, align 8
  %823 = add i64 %822, -64
  %824 = inttoptr i64 %823 to i64*
  %825 = load i64, i64* %824
  %826 = inttoptr i64 %825 to i32*
  store i32 %821, i32* %826
  %827 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %828 = sext i32 %827 to i64
  store i64 %828, i64* %9, align 8, !tbaa !1240
  %829 = shl nsw i64 %828, 2
  %830 = add i64 %829, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %831 = inttoptr i64 %830 to i32*
  store i32 0, i32* %831
  %832 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %833 = add i32 %832, -1
  %834 = zext i32 %833 to i64
  store i64 %834, i64* %11, align 8, !tbaa !1240
  %835 = add i64 %822, -72
  %836 = add i64 %489, 337
  %837 = inttoptr i64 %835 to i32*
  store i32 %833, i32* %837
  br label %block_4025da
}

; Function Attrs: noinline
define %struct.Memory* @sub_400d10_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400d10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %28 = load i64, i64* %15, align 8
  %29 = load i64, i64* %14, align 8, !tbaa !1240
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %28, i64* %31
  store i64 %30, i64* %15, align 8, !tbaa !1240
  %32 = load i64, i64* %23, align 8
  %33 = add i64 %29, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %22, align 8
  %36 = add i64 %29, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = load i64, i64* %21, align 8
  %39 = add i64 %29, -32
  %40 = inttoptr i64 %39 to i64*
  store i64 %38, i64* %40
  %41 = load i64, i64* %20, align 8
  %42 = add i64 %29, -40
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43
  %44 = load i64, i64* %9, align 8
  %45 = add i64 %29, -48
  %46 = inttoptr i64 %45 to i64*
  store i64 %44, i64* %46
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %53 = add i64 %29, -52
  %54 = inttoptr i64 %53 to i32*
  store i32 0, i32* %54
  %55 = add i64 %1, 5248
  %56 = add i64 %1, 32
  %57 = add i64 %29, -688
  %58 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %58
  store i64 %57, i64* %14, align 8, !tbaa !1240
  %59 = tail call %struct.Memory* @sub_402190_init_arrays(%struct.State* nonnull %0, i64 %55, %struct.Memory* %2)
  %60 = load i32, i32* %5, align 4
  %61 = load i64, i64* %3, align 8
  %62 = icmp eq i32 %60, 0
  %63 = select i1 %62, i64 52, i64 9
  %64 = add i64 %61, %63
  br i1 %62, label %block_400d64, label %block_400d39

block_401bff:                                     ; preds = %block_401bee
  %65 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 904) to double*)
  store double %65, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %66 = add i64 %1824, -216
  %67 = add i64 %344, 16
  %68 = inttoptr i64 %66 to double*
  store double %65, double* %68
  br label %block_401c65

block_400ffa:                                     ; preds = %block_401007, %block_400ff0
  %69 = phi i64 [ %169, %block_400ff0 ], [ %3402, %block_401007 ]
  %70 = phi i64 [ %167, %block_400ff0 ], [ %3392, %block_401007 ]
  %71 = phi %struct.Memory* [ %3187, %block_400ff0 ], [ %71, %block_401007 ]
  %72 = add i64 %70, -232
  %73 = inttoptr i64 %72 to i32*
  %74 = load i32, i32* %73
  %75 = add i32 %74, -7
  %76 = icmp eq i32 %75, 0
  %77 = lshr i32 %75, 31
  %78 = trunc i32 %77 to i8
  %79 = lshr i32 %74, 31
  %80 = xor i32 %77, %79
  %81 = add nuw nsw i32 %80, %79
  %82 = icmp eq i32 %81, 2
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %82
  %85 = or i1 %76, %84
  %86 = select i1 %85, i64 13, i64 90
  %87 = add i64 %69, %86
  br i1 %85, label %block_401007, label %block_401054

block_401bd9:                                     ; preds = %block_401bc8
  %88 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 912) to double*)
  store double %88, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %89 = add i64 %1824, -216
  %90 = add i64 %1310, 16
  %91 = inttoptr i64 %89 to double*
  store double %88, double* %91
  br label %block_401c6a

block_4011ca:                                     ; preds = %block_401197, %block_4011b0
  %92 = phi i64 [ %2917, %block_401197 ], [ %1642, %block_4011b0 ]
  %93 = add i32 %526, -256
  %94 = icmp eq i32 %93, 0
  %95 = select i1 %94, i64 25, i64 51
  %96 = add i64 %92, %95
  br i1 %94, label %block_4011e3, label %block_4011fd

block_4011bd:                                     ; preds = %block_4011b0
  %97 = add i64 %1642, 8
  store i8 87, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  br label %block_4012ea

block_4017b9:                                     ; preds = %block_4017ac
  %98 = zext i32 %806 to i64
  store i64 %98, i64* %13, align 8, !tbaa !1240
  %99 = add i64 %831, -2953
  %100 = add i64 %831, 11
  %101 = load i64, i64* %14, align 8, !tbaa !1240
  %102 = add i64 %101, -8
  %103 = inttoptr i64 %102 to i64*
  store i64 %100, i64* %103
  store i64 %102, i64* %14, align 8, !tbaa !1240
  %104 = tail call %struct.Memory* @sub_400c30_timer_clear(%struct.State* nonnull %0, i64 %99, %struct.Memory* %803)
  %105 = load i64, i64* %15, align 8
  %106 = add i64 %105, -232
  %107 = load i64, i64* %3, align 8
  %108 = inttoptr i64 %106 to i32*
  %109 = load i32, i32* %108
  %110 = add i32 %109, 1
  %111 = inttoptr i64 %106 to i32*
  store i32 %110, i32* %111
  %112 = add i64 %107, -24
  br label %block_4017ac

block_401bb3:                                     ; preds = %block_401ba2
  %113 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 920) to double*)
  store double %113, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %114 = add i64 %1824, -216
  %115 = add i64 %2890, 16
  %116 = inttoptr i64 %114 to double*
  store double %113, double* %116
  br label %block_401c6f

block_400fb1:                                     ; preds = %block_400f97
  %117 = load i64, i64* %15, align 8
  %118 = add i64 %117, -200
  %119 = add i64 %117, -336
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %2613, 31
  %123 = load i64, i64* %14, align 8, !tbaa !1240
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125
  %126 = load i64, i64* %1453, align 8, !alias.scope !1446, !noalias !1449
  %127 = load i64, i64* %16, align 8, !alias.scope !1446, !noalias !1449
  %128 = load i64, i64* %17, align 8, !alias.scope !1446, !noalias !1449
  %129 = inttoptr i64 %123 to i64*
  %130 = load i64, i64* %129
  %131 = add i64 %123, 8
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  %134 = add i64 %123, 16
  %135 = inttoptr i64 %134 to i64*
  %136 = load i64, i64* %135
  %137 = add i64 %123, 24
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  %140 = add i64 %123, 32
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141
  %143 = add i64 %123, 40
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  %146 = add i64 %123, 48
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147
  %149 = add i64 %123, 56
  %150 = inttoptr i64 %149 to i64*
  %151 = load i64, i64* %150
  %152 = add i64 %123, 64
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  %155 = add i64 %123, 72
  %156 = inttoptr i64 %155 to i64*
  %157 = load i64, i64* %156
  %158 = inttoptr i64 %124 to i64*
  %159 = load i64, i64* %158
  store i64 %159, i64* %3, align 8, !alias.scope !1446, !noalias !1449
  store i64 %123, i64* %14, align 8, !alias.scope !1446, !noalias !1449
  %160 = tail call i64 @__isoc99_fscanf(i64 %121, i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1255), i64 %118, i64 %126, i64 %127, i64 %128, i64 %130, i64 %133, i64 %136, i64 %139, i64 %142, i64 %145, i64 %148, i64 %151, i64 %154, i64 %157), !noalias !1446
  %161 = load i64, i64* %15, align 8
  %162 = add i64 %161, -340
  %163 = trunc i64 %160 to i32
  %164 = load i64, i64* %3, align 8
  %165 = add i64 %164, 6
  %166 = inttoptr i64 %162 to i32*
  store i32 %163, i32* %166
  br label %block_400fd6

block_400ff0:                                     ; preds = %block_400fd6
  %167 = load i64, i64* %15, align 8
  %168 = add i64 %167, -232
  %169 = add i64 %3203, 10
  %170 = inttoptr i64 %168 to i32*
  store i32 0, i32* %170
  %171 = load i64, i64* %16, align 8
  %172 = load i64, i64* %17, align 8
  br label %block_400ffa

block_401b8d:                                     ; preds = %block_401b7c
  %173 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 928) to double*)
  store double %173, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %174 = add i64 %1824, -216
  %175 = add i64 %2791, 16
  %176 = inttoptr i64 %174 to double*
  store double %173, double* %176
  br label %block_401c74

block_400dcb:                                     ; preds = %block_400d9a
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1132), i64* %10, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1125), i64* %11, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1923), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2002), i64* %16, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1120), i64* %17, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1112), i64* %18, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1107), i64* %19, align 8, !tbaa !1240
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %177 = add i64 %617, -320
  %178 = inttoptr i64 %177 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1107), i64* %178
  %179 = add i64 %617, -312
  %180 = inttoptr i64 %179 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1112), i64* %180
  %181 = add i64 %617, -304
  %182 = inttoptr i64 %181 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1120), i64* %182
  %183 = add i64 %617, -296
  %184 = inttoptr i64 %183 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2002), i64* %184
  %185 = add i64 %617, -288
  %186 = inttoptr i64 %185 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2029), i64* %186
  %187 = add i64 %617, -272
  %188 = inttoptr i64 %187 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1923), i64* %188
  %189 = add i64 %617, -264
  %190 = inttoptr i64 %189 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1125), i64* %190
  %191 = add i64 %617, -256
  %192 = inttoptr i64 %191 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1132), i64* %192
  %193 = add i64 %617, -248
  %194 = inttoptr i64 %193 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1138), i64* %194
  %195 = inttoptr i64 %618 to i64*
  %196 = load i64, i64* %195
  %197 = add i64 %623, 176
  %198 = load i64, i64* %14, align 8, !tbaa !1240
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 %197, i64* %200
  %201 = inttoptr i64 %199 to i64*
  %202 = load i64, i64* %201
  store i64 %202, i64* %3, align 8, !alias.scope !1451, !noalias !1454
  store i64 %198, i64* %14, align 8, !alias.scope !1451, !noalias !1454
  %203 = tail call i64 @fclose(i64 %196), !noalias !1451
  %204 = load i64, i64* %15, align 8
  %205 = add i64 %204, -348
  %206 = trunc i64 %203 to i32
  %207 = load i64, i64* %3, align 8
  %208 = inttoptr i64 %205 to i32*
  store i32 %206, i32* %208
  %209 = add i64 %207, 22
  br label %block_400e91

block_40118a:                                     ; preds = %block_40117d
  %210 = add i64 %2652, 8
  store i8 83, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  br label %block_4012ef

block_401983:                                     ; preds = %block_401979, %block_40196b
  %211 = phi i64 [ %302, %block_40196b ], [ %2928, %block_401979 ]
  %212 = phi %struct.Memory* [ %298, %block_40196b ], [ %2927, %block_401979 ]
  %213 = load i64, i64* %15, align 8
  %214 = add i64 %213, -144
  store i64 %214, i64* %16, align 8, !tbaa !1240
  %215 = add i64 %213, -112
  store i64 %215, i64* %10, align 8, !tbaa !1240
  %216 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  store i64 %216, i64* %13, align 8, !tbaa !1240
  %217 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  store i64 %217, i64* %12, align 8, !tbaa !1240
  %218 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  store i64 %218, i64* %11, align 8, !tbaa !1240
  %219 = add i64 %213, -188
  %220 = inttoptr i64 %219 to i32*
  %221 = load i32, i32* %220
  %222 = zext i32 %221 to i64
  store i64 %222, i64* %17, align 8, !tbaa !1240
  %223 = add i64 %213, -192
  %224 = inttoptr i64 %223 to i32*
  %225 = load i32, i32* %224
  %226 = add i64 %213, -196
  %227 = inttoptr i64 %226 to i32*
  %228 = load i32, i32* %227
  %229 = load i64, i64* %14, align 8
  %230 = inttoptr i64 %229 to i32*
  store i32 %225, i32* %230
  %231 = add i64 %229, 8
  %232 = inttoptr i64 %231 to i32*
  store i32 %228, i32* %232
  %233 = add i64 %211, 8221
  %234 = add i64 %211, 68
  %235 = add i64 %229, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %234, i64* %236
  store i64 %235, i64* %14, align 8, !tbaa !1240
  %237 = tail call %struct.Memory* @sub_4039a0_mg3P(%struct.State* nonnull %0, i64 %233, %struct.Memory* %212)
  %238 = load i64, i64* %3, align 8
  %239 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %240 = icmp eq i32 %239, 0
  %241 = select i1 %240, i64 24, i64 14
  %242 = add i64 %238, %241
  br i1 %240, label %block_4019df, label %block_4019d5

block_4011fd:                                     ; preds = %block_4011e3, %block_4011ca
  %243 = phi i64 [ %320, %block_4011e3 ], [ %96, %block_4011ca ]
  %244 = select i1 %94, i64 25, i64 51
  %245 = add i64 %243, %244
  br i1 %94, label %block_401216, label %block_401230

block_40216d:                                     ; preds = %block_400d39, %block_402161
  %246 = phi i64 [ %311, %block_402161 ], [ %979, %block_400d39 ]
  %247 = phi %struct.Memory* [ %310, %block_402161 ], [ %59, %block_400d39 ]
  %248 = add i64 %246, -44
  %249 = inttoptr i64 %248 to i32*
  %250 = load i32, i32* %249
  %251 = zext i32 %250 to i64
  store i64 %251, i64* %8, align 8, !tbaa !1240
  %252 = load i64, i64* %14, align 8
  %253 = add i64 %252, 632
  %254 = icmp ugt i64 %252, -633
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %47, align 1, !tbaa !1246
  %256 = trunc i64 %253 to i32
  %257 = and i32 %256, 255
  %258 = tail call i32 @llvm.ctpop.i32(i32 %257) #11
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  store i8 %261, i8* %48, align 1, !tbaa !1260
  %262 = xor i64 %252, 16
  %263 = xor i64 %262, %253
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  store i8 %266, i8* %49, align 1, !tbaa !1261
  %267 = icmp eq i64 %253, 0
  %268 = zext i1 %267 to i8
  store i8 %268, i8* %50, align 1, !tbaa !1262
  %269 = lshr i64 %253, 63
  %270 = trunc i64 %269 to i8
  store i8 %270, i8* %51, align 1, !tbaa !1263
  %271 = lshr i64 %252, 63
  %272 = xor i64 %269, %271
  %273 = add nuw nsw i64 %272, %269
  %274 = icmp eq i64 %273, 2
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %52, align 1, !tbaa !1264
  %276 = add i64 %252, 640
  %277 = inttoptr i64 %253 to i64*
  %278 = load i64, i64* %277
  store i64 %278, i64* %9, align 8, !tbaa !1240
  %279 = add i64 %252, 648
  %280 = inttoptr i64 %276 to i64*
  %281 = load i64, i64* %280
  store i64 %281, i64* %20, align 8, !tbaa !1240
  %282 = add i64 %252, 656
  %283 = inttoptr i64 %279 to i64*
  %284 = load i64, i64* %283
  store i64 %284, i64* %21, align 8, !tbaa !1240
  %285 = add i64 %252, 664
  %286 = inttoptr i64 %282 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %22, align 8, !tbaa !1240
  %288 = add i64 %252, 672
  %289 = inttoptr i64 %285 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %23, align 8, !tbaa !1240
  %291 = add i64 %252, 680
  %292 = inttoptr i64 %288 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %15, align 8, !tbaa !1240
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %3, align 8, !tbaa !1240
  %296 = add i64 %252, 688
  store i64 %296, i64* %14, align 8, !tbaa !1240
  ret %struct.Memory* %247

block_40196b:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_401951
  %297 = phi i64 [ %797, %block_401951 ], [ %2762, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %298 = phi %struct.Memory* [ %748, %block_401951 ], [ %2759, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %299 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %300 = icmp eq i32 %299, 0
  %301 = select i1 %300, i64 24, i64 14
  %302 = add i64 %297, %301
  br i1 %300, label %block_401983, label %block_401979

block_402161:                                     ; preds = %block_40215c, %block_401e90
  %303 = phi i64 [ %1635, %block_401e90 ], [ %2726, %block_40215c ]
  %304 = phi %struct.Memory* [ %1622, %block_401e90 ], [ %2557, %block_40215c ]
  %305 = add i64 %303, 7407
  %306 = add i64 %303, 5
  %307 = load i64, i64* %14, align 8, !tbaa !1240
  %308 = add i64 %307, -8
  %309 = inttoptr i64 %308 to i64*
  store i64 %306, i64* %309
  store i64 %308, i64* %14, align 8, !tbaa !1240
  %310 = tail call %struct.Memory* @sub_403e50_free_arrays(%struct.State* nonnull %0, i64 %305, %struct.Memory* %304)
  %311 = load i64, i64* %15, align 8
  %312 = add i64 %311, -44
  %313 = inttoptr i64 %312 to i32*
  store i32 0, i32* %313
  br label %block_40216d

block_4011e3:                                     ; preds = %block_4011ca
  %314 = add i64 %516, -200
  %315 = inttoptr i64 %314 to i32*
  %316 = load i32, i32* %315
  %317 = add i32 %316, -4
  %318 = icmp eq i32 %317, 0
  %319 = select i1 %318, i64 13, i64 26
  %320 = add i64 %96, %319
  br i1 %318, label %block_4011f0, label %block_4011fd

block_40115a:                                     ; preds = %block_401136, %block_401112
  %321 = phi i64 [ %933, %block_401136 ], [ %533, %block_401112 ]
  %322 = add i64 %321, 8
  store i8 85, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  br label %block_4012f4

block_401bee:                                     ; preds = %block_401bc8
  store i64 %3405, i64* %8, align 8, !tbaa !1240
  %323 = add nsw i32 %3406, -67
  %324 = icmp ult i8 %3403, 67
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %47, align 1, !tbaa !1246
  %326 = and i32 %323, 255
  %327 = tail call i32 @llvm.ctpop.i32(i32 %326) #11
  %328 = trunc i32 %327 to i8
  %329 = and i8 %328, 1
  %330 = xor i8 %329, 1
  store i8 %330, i8* %48, align 1, !tbaa !1260
  %331 = xor i32 %323, %3406
  %332 = lshr i32 %331, 4
  %333 = trunc i32 %332 to i8
  %334 = and i8 %333, 1
  store i8 %334, i8* %49, align 1, !tbaa !1261
  %335 = icmp eq i32 %323, 0
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %50, align 1, !tbaa !1262
  %337 = lshr i32 %323, 31
  %338 = trunc i32 %337 to i8
  store i8 %338, i8* %51, align 1, !tbaa !1263
  %339 = xor i32 %337, %3424
  %340 = add nuw nsw i32 %339, %3424
  %341 = icmp eq i32 %340, 2
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %52, align 1, !tbaa !1264
  %343 = select i1 %335, i64 17, i64 38
  %344 = add i64 %1310, %343
  br i1 %335, label %block_401bff, label %block_401c14

block_400d7b:                                     ; preds = %block_400d6e
  %345 = zext i32 %1901 to i64
  store i64 %345, i64* %13, align 8, !tbaa !1240
  %346 = add i64 %1926, -331
  %347 = add i64 %1926, 11
  %348 = load i64, i64* %14, align 8, !tbaa !1240
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i64*
  store i64 %347, i64* %350
  store i64 %349, i64* %14, align 8, !tbaa !1240
  %351 = tail call %struct.Memory* @sub_400c30_timer_clear(%struct.State* nonnull %0, i64 %346, %struct.Memory* %1898)
  %352 = load i64, i64* %15, align 8
  %353 = add i64 %352, -232
  %354 = load i64, i64* %3, align 8
  %355 = inttoptr i64 %353 to i32*
  %356 = load i32, i32* %355
  %357 = add i32 %356, 1
  %358 = inttoptr i64 %353 to i32*
  store i32 %357, i32* %358
  %359 = add i64 %354, -24
  br label %block_400d6e

block_401334:                                     ; preds = %block_4012f4
  %360 = add nsw i32 %661, -83
  %361 = icmp eq i32 %360, 0
  %362 = select i1 %361, i64 34, i64 17
  %363 = add i64 %665, %362
  br i1 %361, label %block_401356, label %block_401345

block_401d22:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %364 = load i64, i64* %15, align 8
  %365 = add i64 %364, -228
  %366 = inttoptr i64 %365 to i32*
  store i32 0, i32* %366
  %367 = add i64 %921, 27
  %368 = load i64, i64* %14, align 8, !tbaa !1240
  %369 = add i64 %368, -8
  %370 = inttoptr i64 %369 to i64*
  store i64 %367, i64* %370
  %371 = load i64, i64* %612, align 8, !alias.scope !1456, !noalias !1459
  %372 = load i64, i64* %1454, align 8, !alias.scope !1456, !noalias !1459
  %373 = load i64, i64* %1453, align 8, !alias.scope !1456, !noalias !1459
  %374 = load i64, i64* %16, align 8, !alias.scope !1456, !noalias !1459
  %375 = load i64, i64* %17, align 8, !alias.scope !1456, !noalias !1459
  %376 = inttoptr i64 %368 to i64*
  %377 = load i64, i64* %376
  %378 = add i64 %368, 8
  %379 = inttoptr i64 %378 to i64*
  %380 = load i64, i64* %379
  %381 = add i64 %368, 16
  %382 = inttoptr i64 %381 to i64*
  %383 = load i64, i64* %382
  %384 = add i64 %368, 24
  %385 = inttoptr i64 %384 to i64*
  %386 = load i64, i64* %385
  %387 = add i64 %368, 32
  %388 = inttoptr i64 %387 to i64*
  %389 = load i64, i64* %388
  %390 = add i64 %368, 40
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391
  %393 = add i64 %368, 48
  %394 = inttoptr i64 %393 to i64*
  %395 = load i64, i64* %394
  %396 = add i64 %368, 56
  %397 = inttoptr i64 %396 to i64*
  %398 = load i64, i64* %397
  %399 = add i64 %368, 64
  %400 = inttoptr i64 %399 to i64*
  %401 = load i64, i64* %400
  %402 = add i64 %368, 72
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  %405 = inttoptr i64 %369 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %3, align 8, !alias.scope !1456, !noalias !1459
  store i64 %368, i64* %14, align 8, !alias.scope !1456, !noalias !1459
  %407 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1471), i64 %371, i64 %372, i64 %373, i64 %374, i64 %375, i64 %377, i64 %380, i64 %383, i64 %386, i64 %389, i64 %392, i64 %395, i64 %398, i64 %401, i64 %404), !noalias !1456
  %408 = load i64, i64* %3, align 8
  %409 = load i64, i64* %15, align 8
  %410 = add i64 %409, -152
  %411 = inttoptr i64 %410 to double*
  %412 = load double, double* %411
  store double %412, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %413 = add i64 %409, -476
  %414 = trunc i64 %407 to i32
  %415 = inttoptr i64 %413 to i32*
  store i32 %414, i32* %415
  %416 = add i64 %408, 31
  %417 = load i64, i64* %14, align 8, !tbaa !1240
  %418 = add i64 %417, -8
  %419 = inttoptr i64 %418 to i64*
  store i64 %416, i64* %419
  %420 = load i64, i64* %612, align 8, !alias.scope !1461, !noalias !1464
  %421 = load i64, i64* %1454, align 8, !alias.scope !1461, !noalias !1464
  %422 = load i64, i64* %1453, align 8, !alias.scope !1461, !noalias !1464
  %423 = load i64, i64* %16, align 8, !alias.scope !1461, !noalias !1464
  %424 = load i64, i64* %17, align 8, !alias.scope !1461, !noalias !1464
  %425 = inttoptr i64 %417 to i64*
  %426 = load i64, i64* %425
  %427 = add i64 %417, 8
  %428 = inttoptr i64 %427 to i64*
  %429 = load i64, i64* %428
  %430 = add i64 %417, 16
  %431 = inttoptr i64 %430 to i64*
  %432 = load i64, i64* %431
  %433 = add i64 %417, 24
  %434 = inttoptr i64 %433 to i64*
  %435 = load i64, i64* %434
  %436 = add i64 %417, 32
  %437 = inttoptr i64 %436 to i64*
  %438 = load i64, i64* %437
  %439 = add i64 %417, 40
  %440 = inttoptr i64 %439 to i64*
  %441 = load i64, i64* %440
  %442 = add i64 %417, 48
  %443 = inttoptr i64 %442 to i64*
  %444 = load i64, i64* %443
  %445 = add i64 %417, 56
  %446 = inttoptr i64 %445 to i64*
  %447 = load i64, i64* %446
  %448 = add i64 %417, 64
  %449 = inttoptr i64 %448 to i64*
  %450 = load i64, i64* %449
  %451 = add i64 %417, 72
  %452 = inttoptr i64 %451 to i64*
  %453 = load i64, i64* %452
  %454 = inttoptr i64 %418 to i64*
  %455 = load i64, i64* %454
  store i64 %455, i64* %3, align 8, !alias.scope !1461, !noalias !1464
  store i64 %417, i64* %14, align 8, !alias.scope !1461, !noalias !1464
  %456 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1493), i64 %420, i64 %421, i64 %422, i64 %423, i64 %424, i64 %426, i64 %429, i64 %432, i64 %435, i64 %438, i64 %441, i64 %444, i64 %447, i64 %450, i64 %453), !noalias !1461
  %457 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1526), i64* %13, align 8, !tbaa !1240
  %458 = load i64, i64* %15, align 8
  %459 = add i64 %458, -216
  %460 = inttoptr i64 %459 to double*
  %461 = load double, double* %460
  store double %461, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %462 = add i64 %458, -480
  %463 = trunc i64 %456 to i32
  %464 = inttoptr i64 %462 to i32*
  store i32 %463, i32* %464
  %465 = add i64 %457, 31
  %466 = load i64, i64* %14, align 8, !tbaa !1240
  %467 = add i64 %466, -8
  %468 = inttoptr i64 %467 to i64*
  store i64 %465, i64* %468
  %469 = load i64, i64* %612, align 8, !alias.scope !1466, !noalias !1469
  %470 = load i64, i64* %1454, align 8, !alias.scope !1466, !noalias !1469
  %471 = load i64, i64* %1453, align 8, !alias.scope !1466, !noalias !1469
  %472 = load i64, i64* %16, align 8, !alias.scope !1466, !noalias !1469
  %473 = load i64, i64* %17, align 8, !alias.scope !1466, !noalias !1469
  %474 = inttoptr i64 %466 to i64*
  %475 = load i64, i64* %474
  %476 = add i64 %466, 8
  %477 = inttoptr i64 %476 to i64*
  %478 = load i64, i64* %477
  %479 = add i64 %466, 16
  %480 = inttoptr i64 %479 to i64*
  %481 = load i64, i64* %480
  %482 = add i64 %466, 24
  %483 = inttoptr i64 %482 to i64*
  %484 = load i64, i64* %483
  %485 = add i64 %466, 32
  %486 = inttoptr i64 %485 to i64*
  %487 = load i64, i64* %486
  %488 = add i64 %466, 40
  %489 = inttoptr i64 %488 to i64*
  %490 = load i64, i64* %489
  %491 = add i64 %466, 48
  %492 = inttoptr i64 %491 to i64*
  %493 = load i64, i64* %492
  %494 = add i64 %466, 56
  %495 = inttoptr i64 %494 to i64*
  %496 = load i64, i64* %495
  %497 = add i64 %466, 64
  %498 = inttoptr i64 %497 to i64*
  %499 = load i64, i64* %498
  %500 = add i64 %466, 72
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = inttoptr i64 %467 to i64*
  %504 = load i64, i64* %503
  store i64 %504, i64* %3, align 8, !alias.scope !1466, !noalias !1469
  store i64 %466, i64* %14, align 8, !alias.scope !1466, !noalias !1469
  %505 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1526), i64 %469, i64 %470, i64 %471, i64 %472, i64 %473, i64 %475, i64 %478, i64 %481, i64 %484, i64 %487, i64 %490, i64 %493, i64 %496, i64 %499, i64 %502), !noalias !1466
  %506 = load i64, i64* %15, align 8
  %507 = add i64 %506, -484
  %508 = trunc i64 %505 to i32
  %509 = load i64, i64* %3, align 8
  %510 = add i64 %509, 6
  %511 = inttoptr i64 %507 to i32*
  store i32 %508, i32* %511
  br label %block_401d81

block_401916:                                     ; preds = %block_401907
  %512 = add i32 %567, -1
  %513 = icmp eq i32 %512, 0
  %514 = select i1 %513, i64 59, i64 10
  %515 = add i64 %600, %514
  br i1 %513, label %block_401951, label %block_401920

block_401112.loopexit:                            ; preds = %block_4010da
  br label %block_401112

block_401112:                                     ; preds = %block_401054, %block_401112.loopexit
  %516 = phi i64 [ %2812, %block_401054 ], [ %2695, %block_401112.loopexit ]
  %517 = phi i64 [ %2816, %block_401054 ], [ %852, %block_401112.loopexit ]
  %518 = phi i64 [ 172, %block_401054 ], [ 5, %block_401112.loopexit ]
  %519 = phi %struct.Memory* [ %71, %block_401054 ], [ %837, %block_401112.loopexit ]
  %520 = add i64 %517, %518
  %521 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %522 = sext i32 %521 to i64
  %523 = shl nsw i64 %522, 2
  %524 = add i64 %523, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %525 = inttoptr i64 %524 to i32*
  %526 = load i32, i32* %525
  %527 = add i64 %523, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %528 = inttoptr i64 %527 to i32*
  %529 = load i32, i32* %528
  %530 = sub i32 %526, %529
  %531 = icmp eq i32 %530, 0
  %532 = select i1 %531, i64 36, i64 72
  %533 = add i64 %520, %532
  br i1 %531, label %block_401136, label %block_40115a

block_402143:                                     ; preds = %block_4020f0, %block_40209c
  %534 = phi i64 [ %1705, %block_4020f0 ], [ %1429, %block_40209c ]
  %535 = phi i64 [ %1709, %block_4020f0 ], [ %1434, %block_40209c ]
  %536 = phi %struct.Memory* [ %1864, %block_4020f0 ], [ %1372, %block_40209c ]
  %537 = add i64 %534, -232
  %538 = inttoptr i64 %537 to i32*
  %539 = load i32, i32* %538
  %540 = add i32 %539, 1
  %541 = inttoptr i64 %537 to i32*
  store i32 %540, i32* %541
  %542 = add i64 %535, -209
  br label %block_402072

block_400f11:                                     ; preds = %block_400ed2, %block_400f26
  %543 = phi i64 [ %1230, %block_400ed2 ], [ %799, %block_400f26 ]
  %544 = phi i64 [ %1226, %block_400ed2 ], [ %800, %block_400f26 ]
  %545 = phi %struct.Memory* [ %1448, %block_400ed2 ], [ %545, %block_400f26 ]
  %546 = add i64 %544, -336
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  %549 = add i64 %543, 12
  %550 = load i64, i64* %14, align 8, !tbaa !1240
  %551 = add i64 %550, -8
  %552 = inttoptr i64 %551 to i64*
  store i64 %549, i64* %552
  %553 = inttoptr i64 %551 to i64*
  %554 = load i64, i64* %553
  store i64 %554, i64* %3, align 8, !alias.scope !1471, !noalias !1474
  store i64 %550, i64* %14, align 8, !alias.scope !1471, !noalias !1474
  %555 = tail call i64 @fgetc(i64 %548), !noalias !1471
  %556 = trunc i64 %555 to i32
  %557 = load i64, i64* %3, align 8
  %558 = add i32 %556, -10
  %559 = icmp eq i32 %558, 0
  %560 = select i1 %559, i64 14, i64 9
  %561 = add i64 %557, %560
  br i1 %559, label %block_400f2b, label %block_400f26

block_401907:                                     ; preds = %block_401a71, %block_401874
  %562 = phi i64 [ %1287, %block_401874 ], [ %2594, %block_401a71 ]
  %563 = phi i64 [ %1274, %block_401874 ], [ %2588, %block_401a71 ]
  %564 = phi %struct.Memory* [ %1273, %block_401874 ], [ %2587, %block_401a71 ]
  %565 = add i64 %563, -52
  %566 = inttoptr i64 %565 to i32*
  %567 = load i32, i32* %566
  %568 = zext i32 %567 to i64
  %569 = add i64 %563, -200
  %570 = inttoptr i64 %569 to i32*
  %571 = load i32, i32* %570
  %572 = sub i32 %567, %571
  %573 = icmp ult i32 %567, %571
  %574 = zext i1 %573 to i8
  %575 = and i32 %572, 255
  %576 = tail call i32 @llvm.ctpop.i32(i32 %575) #11
  %577 = trunc i32 %576 to i8
  %578 = and i8 %577, 1
  %579 = xor i8 %578, 1
  %580 = xor i32 %571, %567
  %581 = xor i32 %580, %572
  %582 = lshr i32 %581, 4
  %583 = trunc i32 %582 to i8
  %584 = and i8 %583, 1
  %585 = icmp eq i32 %572, 0
  %586 = zext i1 %585 to i8
  %587 = lshr i32 %572, 31
  %588 = trunc i32 %587 to i8
  %589 = lshr i32 %567, 31
  %590 = lshr i32 %571, 31
  %591 = xor i32 %590, %589
  %592 = xor i32 %587, %589
  %593 = add nuw nsw i32 %592, %591
  %594 = icmp eq i32 %593, 2
  %595 = zext i1 %594 to i8
  %596 = icmp ne i8 %588, 0
  %597 = xor i1 %596, %594
  %598 = or i1 %585, %597
  %599 = select i1 %598, i64 15, i64 381
  %600 = add i64 %562, %599
  br i1 %598, label %block_401916, label %block_401a84

block_400d9a:                                     ; preds = %block_400d6e
  store i64 0, i64* %13, align 8, !tbaa !1240
  %601 = add i64 %1926, -330
  %602 = add i64 %1926, 7
  %603 = load i64, i64* %14, align 8, !tbaa !1240
  %604 = add i64 %603, -8
  %605 = inttoptr i64 %604 to i64*
  store i64 %602, i64* %605
  store i64 %604, i64* %14, align 8, !tbaa !1240
  %606 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %601, %struct.Memory* %1898)
  %607 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2024), i64* %12, align 8, !tbaa !1240
  %608 = add i64 %607, 25
  %609 = load i64, i64* %14, align 8, !tbaa !1240
  %610 = add i64 %609, -8
  %611 = inttoptr i64 %610 to i64*
  store i64 %608, i64* %611
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %614 = inttoptr i64 %610 to i64*
  %615 = load i64, i64* %614
  store i64 %615, i64* %3, align 8, !alias.scope !1476, !noalias !1479
  store i64 %609, i64* %14, align 8, !alias.scope !1476, !noalias !1479
  %616 = tail call i64 @fopen(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1096), i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2024))
  %617 = load i64, i64* %15, align 8
  %618 = add i64 %617, -336
  %619 = load i64, i64* %3, align 8
  %620 = inttoptr i64 %618 to i64*
  store i64 %616, i64* %620
  %621 = icmp eq i64 %616, 0
  %622 = select i1 %621, i64 204, i64 17
  %623 = add i64 %619, %622
  br i1 %621, label %block_400e86, label %block_400dcb

block_4012f4:                                     ; preds = %block_4012ef, %block_40115a
  %624 = phi i64 [ %669, %block_4012ef ], [ %322, %block_40115a ]
  %625 = phi i64 [ 13, %block_4012ef ], [ 410, %block_40115a ]
  %626 = phi %struct.Memory* [ %668, %block_4012ef ], [ %519, %block_40115a ]
  %627 = bitcast [32 x %union.VectorReg]* %24 to i8*
  %628 = add i64 %625, %624
  %629 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 808) to double*)
  %630 = bitcast [32 x %union.VectorReg]* %24 to double*
  store double %629, double* %630, align 1, !tbaa !1244
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %632 = bitcast i64* %631 to double*
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %633 = bitcast %union.VectorReg* %25 to i8*
  %634 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 816) to double*)
  %635 = bitcast %union.VectorReg* %25 to double*
  store double %634, double* %635, align 1, !tbaa !1244
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %637 = bitcast i64* %636 to double*
  store double 0.000000e+00, double* %637, align 1, !tbaa !1244
  %638 = bitcast %union.VectorReg* %26 to i8*
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %640 = bitcast %union.VectorReg* %26 to i32*
  store i32 0, i32* %640, align 1, !tbaa !1481
  %641 = getelementptr inbounds i8, i8* %638, i64 4
  %642 = bitcast i8* %641 to i32*
  store i32 0, i32* %642, align 1, !tbaa !1481
  %643 = bitcast i64* %639 to i32*
  store i32 0, i32* %643, align 1, !tbaa !1481
  %644 = getelementptr inbounds i8, i8* %638, i64 12
  %645 = bitcast i8* %644 to i32*
  store i32 0, i32* %645, align 1, !tbaa !1481
  %646 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 824) to double*)
  %647 = bitcast %union.VectorReg* %27 to double*
  store double %646, double* %647, align 1, !tbaa !1244
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %649 = bitcast i64* %648 to double*
  store double 0.000000e+00, double* %649, align 1, !tbaa !1244
  %650 = add i64 %516, -112
  %651 = inttoptr i64 %650 to double*
  store double %646, double* %651
  %652 = add i64 %516, -104
  %653 = bitcast %union.VectorReg* %26 to double*
  %654 = load double, double* %653, align 1
  %655 = inttoptr i64 %652 to double*
  store double %654, double* %655
  %656 = add i64 %516, -96
  %657 = inttoptr i64 %656 to double*
  store double %634, double* %657
  %658 = add i64 %516, -88
  %659 = inttoptr i64 %658 to double*
  store double %629, double* %659
  %660 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  %661 = sext i8 %660 to i32
  %662 = add nsw i32 %661, -65
  %663 = icmp eq i32 %662, 0
  %664 = select i1 %663, i64 90, i64 56
  %665 = add i64 %628, %664
  br i1 %663, label %block_401356, label %block_401334

block_4012ef:                                     ; preds = %block_4012ea, %block_40118a
  %666 = phi i64 [ %736, %block_4012ea ], [ %210, %block_40118a ]
  %667 = phi i64 [ 5, %block_4012ea ], [ 349, %block_40118a ]
  %668 = phi %struct.Memory* [ %735, %block_4012ea ], [ %519, %block_40118a ]
  %669 = add i64 %666, %667
  br label %block_4012f4

block_4019df:                                     ; preds = %block_4019d5, %block_401983
  %670 = phi i64 [ %242, %block_401983 ], [ %3136, %block_4019d5 ]
  %671 = phi %struct.Memory* [ %237, %block_401983 ], [ %3135, %block_4019d5 ]
  %672 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %673 = icmp eq i32 %672, 0
  %674 = select i1 %673, i64 24, i64 14
  %675 = add i64 %670, %674
  br i1 %673, label %block_4019f7, label %block_4019ed

block_400f2b:                                     ; preds = %block_400f11
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1251), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152), i64* %8, align 8, !tbaa !1240
  %676 = load i64, i64* %15, align 8
  %677 = add i64 %676, -336
  %678 = inttoptr i64 %677 to i64*
  %679 = load i64, i64* %678
  store i64 %679, i64* %13, align 8, !tbaa !1240
  %680 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %681 = sext i32 %680 to i64
  %682 = shl nsw i64 %681, 2
  %683 = add i64 %682, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  store i64 %683, i64* %11, align 8, !tbaa !1240
  %684 = add i64 %682, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  store i64 %684, i64* %10, align 8, !tbaa !1240
  %685 = load i64, i64* %8, align 8
  %686 = add i64 %682, %685
  store i64 %686, i64* %16, align 8, !tbaa !1240
  %687 = add i64 %561, 102
  %688 = load i64, i64* %14, align 8, !tbaa !1240
  %689 = add i64 %688, -8
  %690 = inttoptr i64 %689 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %613, align 8, !alias.scope !1482, !noalias !1485
  %692 = load i64, i64* %612, align 8, !alias.scope !1482, !noalias !1485
  %693 = load i64, i64* %1454, align 8, !alias.scope !1482, !noalias !1485
  %694 = load i64, i64* %17, align 8, !alias.scope !1482, !noalias !1485
  %695 = inttoptr i64 %688 to i64*
  %696 = load i64, i64* %695
  %697 = add i64 %688, 8
  %698 = inttoptr i64 %697 to i64*
  %699 = load i64, i64* %698
  %700 = add i64 %688, 16
  %701 = inttoptr i64 %700 to i64*
  %702 = load i64, i64* %701
  %703 = add i64 %688, 24
  %704 = inttoptr i64 %703 to i64*
  %705 = load i64, i64* %704
  %706 = add i64 %688, 32
  %707 = inttoptr i64 %706 to i64*
  %708 = load i64, i64* %707
  %709 = add i64 %688, 40
  %710 = inttoptr i64 %709 to i64*
  %711 = load i64, i64* %710
  %712 = add i64 %688, 48
  %713 = inttoptr i64 %712 to i64*
  %714 = load i64, i64* %713
  %715 = add i64 %688, 56
  %716 = inttoptr i64 %715 to i64*
  %717 = load i64, i64* %716
  %718 = add i64 %688, 64
  %719 = inttoptr i64 %718 to i64*
  %720 = load i64, i64* %719
  %721 = add i64 %688, 72
  %722 = inttoptr i64 %721 to i64*
  %723 = load i64, i64* %722
  %724 = inttoptr i64 %689 to i64*
  %725 = load i64, i64* %724
  store i64 %725, i64* %3, align 8, !alias.scope !1482, !noalias !1485
  store i64 %688, i64* %14, align 8, !alias.scope !1482, !noalias !1485
  %726 = tail call i64 @__isoc99_fscanf(i64 %691, i64 %692, i64 %693, i64 %684, i64 %686, i64 %694, i64 %696, i64 %699, i64 %702, i64 %705, i64 %708, i64 %711, i64 %714, i64 %717, i64 %720, i64 %723), !noalias !1482
  %727 = load i64, i64* %15, align 8
  %728 = add i64 %727, -340
  %729 = trunc i64 %726 to i32
  %730 = load i64, i64* %3, align 8
  %731 = add i64 %730, 6
  %732 = inttoptr i64 %728 to i32*
  store i32 %729, i32* %732
  br label %block_400f97

block_4012ea:                                     ; preds = %block_4012e0, %block_4011f0, %block_4011bd
  %733 = phi i64 [ %97, %block_4011bd ], [ %3140, %block_4012e0 ], [ %1362, %block_4011f0 ]
  %734 = phi i64 [ 293, %block_4011bd ], [ 5, %block_4012e0 ], [ 5, %block_4011f0 ]
  %735 = phi %struct.Memory* [ %519, %block_4011bd ], [ %3139, %block_4012e0 ], [ %519, %block_4011f0 ]
  %736 = add i64 %733, %734
  br label %block_4012ef

block_4010e7:                                     ; preds = %block_4010da
  %737 = sext i32 %839 to i64
  %738 = shl nsw i64 %737, 2
  %739 = add i64 %738, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1200)
  %740 = inttoptr i64 %739 to i32*
  store i32 0, i32* %740
  %741 = inttoptr i64 %2713 to i32*
  %742 = load i32, i32* %741
  %743 = add i32 %742, 1
  %744 = inttoptr i64 %2713 to i32*
  store i32 %743, i32* %744
  %745 = add i64 %852, -13
  br label %block_4010da

block_401951:                                     ; preds = %block_401920, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit.block_401951_crit_edge, %block_401916
  %746 = phi i64 [ %563, %block_401916 ], [ %563, %block_401920 ], [ %2763, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit.block_401951_crit_edge ]
  %747 = phi i64 [ %515, %block_401916 ], [ %3349, %block_401920 ], [ %2762, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit.block_401951_crit_edge ]
  %748 = phi %struct.Memory* [ %564, %block_401916 ], [ %564, %block_401920 ], [ %2759, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit.block_401951_crit_edge ]
  %749 = add i64 %746, -52
  %750 = inttoptr i64 %749 to i32*
  %751 = load i32, i32* %750
  %752 = zext i32 %751 to i64
  %753 = add i64 %747, 20
  %754 = load i64, i64* %14, align 8, !tbaa !1240
  %755 = add i64 %754, -8
  %756 = inttoptr i64 %755 to i64*
  store i64 %753, i64* %756
  %757 = load i64, i64* %1454, align 8, !alias.scope !1487, !noalias !1490
  %758 = load i64, i64* %1453, align 8, !alias.scope !1487, !noalias !1490
  %759 = load i64, i64* %16, align 8, !alias.scope !1487, !noalias !1490
  %760 = load i64, i64* %17, align 8, !alias.scope !1487, !noalias !1490
  %761 = inttoptr i64 %754 to i64*
  %762 = load i64, i64* %761
  %763 = add i64 %754, 8
  %764 = inttoptr i64 %763 to i64*
  %765 = load i64, i64* %764
  %766 = add i64 %754, 16
  %767 = inttoptr i64 %766 to i64*
  %768 = load i64, i64* %767
  %769 = add i64 %754, 24
  %770 = inttoptr i64 %769 to i64*
  %771 = load i64, i64* %770
  %772 = add i64 %754, 32
  %773 = inttoptr i64 %772 to i64*
  %774 = load i64, i64* %773
  %775 = add i64 %754, 40
  %776 = inttoptr i64 %775 to i64*
  %777 = load i64, i64* %776
  %778 = add i64 %754, 48
  %779 = inttoptr i64 %778 to i64*
  %780 = load i64, i64* %779
  %781 = add i64 %754, 56
  %782 = inttoptr i64 %781 to i64*
  %783 = load i64, i64* %782
  %784 = add i64 %754, 64
  %785 = inttoptr i64 %784 to i64*
  %786 = load i64, i64* %785
  %787 = add i64 %754, 72
  %788 = inttoptr i64 %787 to i64*
  %789 = load i64, i64* %788
  %790 = inttoptr i64 %755 to i64*
  %791 = load i64, i64* %790
  store i64 %791, i64* %3, align 8, !alias.scope !1487, !noalias !1490
  store i64 %754, i64* %14, align 8, !alias.scope !1487, !noalias !1490
  %792 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1389), i64 %752, i64 %757, i64 %758, i64 %759, i64 %760, i64 %762, i64 %765, i64 %768, i64 %771, i64 %774, i64 %777, i64 %780, i64 %783, i64 %786, i64 %789), !noalias !1487
  %793 = load i64, i64* %15, align 8
  %794 = add i64 %793, -440
  %795 = trunc i64 %792 to i32
  %796 = load i64, i64* %3, align 8
  %797 = add i64 %796, 6
  %798 = inttoptr i64 %794 to i32*
  store i32 %795, i32* %798
  br label %block_40196b

block_400f26:                                     ; preds = %block_400f11
  %799 = add i64 %561, -21
  %800 = load i64, i64* %15, align 8
  br label %block_400f11

block_4017ac:                                     ; preds = %block_4013c5, %block_4017b9
  %801 = phi i64 [ %2502, %block_4013c5 ], [ %112, %block_4017b9 ]
  %802 = phi i64 [ %2496, %block_4013c5 ], [ %105, %block_4017b9 ]
  %803 = phi %struct.Memory* [ %2447, %block_4013c5 ], [ %104, %block_4017b9 ]
  %804 = add i64 %802, -232
  %805 = inttoptr i64 %804 to i32*
  %806 = load i32, i32* %805
  %807 = add i32 %806, -10
  %808 = icmp ult i32 %806, 10
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %47, align 1, !tbaa !1246
  %810 = and i32 %807, 255
  %811 = tail call i32 @llvm.ctpop.i32(i32 %810) #11
  %812 = trunc i32 %811 to i8
  %813 = and i8 %812, 1
  %814 = xor i8 %813, 1
  store i8 %814, i8* %48, align 1, !tbaa !1260
  %815 = xor i32 %807, %806
  %816 = lshr i32 %815, 4
  %817 = trunc i32 %816 to i8
  %818 = and i8 %817, 1
  store i8 %818, i8* %49, align 1, !tbaa !1261
  %819 = icmp eq i32 %807, 0
  %820 = zext i1 %819 to i8
  store i8 %820, i8* %50, align 1, !tbaa !1262
  %821 = lshr i32 %807, 31
  %822 = trunc i32 %821 to i8
  store i8 %822, i8* %51, align 1, !tbaa !1263
  %823 = lshr i32 %806, 31
  %824 = xor i32 %821, %823
  %825 = add nuw nsw i32 %824, %823
  %826 = icmp eq i32 %825, 2
  %827 = zext i1 %826 to i8
  store i8 %827, i8* %52, align 1, !tbaa !1264
  %828 = icmp ne i8 %822, 0
  %829 = xor i1 %828, %826
  %830 = select i1 %829, i64 13, i64 44
  %831 = add i64 %801, %830
  br i1 %829, label %block_4017b9, label %block_4017d8

block_4012db:                                     ; preds = %block_401256, %block_4012d6
  %832 = phi i64 [ %2801, %block_401256 ], [ %926, %block_4012d6 ]
  %833 = phi i64 [ 125, %block_401256 ], [ 5, %block_4012d6 ]
  %834 = phi %struct.Memory* [ %519, %block_401256 ], [ %925, %block_4012d6 ]
  %835 = add i64 %832, %833
  br label %block_4012e0

block_4010da:                                     ; preds = %block_40106b, %block_4010e7
  %836 = phi i64 [ %2717, %block_40106b ], [ %745, %block_4010e7 ]
  %837 = phi %struct.Memory* [ %1448, %block_40106b ], [ %837, %block_4010e7 ]
  %838 = inttoptr i64 %2713 to i32*
  %839 = load i32, i32* %838
  %840 = add i32 %839, -7
  %841 = icmp eq i32 %840, 0
  %842 = lshr i32 %840, 31
  %843 = trunc i32 %842 to i8
  %844 = lshr i32 %839, 31
  %845 = xor i32 %842, %844
  %846 = add nuw nsw i32 %845, %844
  %847 = icmp eq i32 %846, 2
  %848 = icmp ne i8 %843, 0
  %849 = xor i1 %848, %847
  %850 = or i1 %841, %849
  %851 = select i1 %850, i64 13, i64 51
  %852 = add i64 %836, %851
  br i1 %850, label %block_4010e7, label %block_401112.loopexit

block_401b67:                                     ; preds = %block_401b56
  %853 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 936) to double*)
  store double %853, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %854 = add i64 %1824, -216
  %855 = add i64 %3430, 16
  %856 = inttoptr i64 %854 to double*
  store double %853, double* %856
  br label %block_401c79

block_401c79:                                     ; preds = %block_401c74, %block_401b67
  %857 = phi i64 [ %3080, %block_401c74 ], [ %854, %block_401b67 ]
  %858 = phi i8 [ %3081, %block_401c74 ], [ %3409, %block_401b67 ]
  %859 = phi i64 [ %3085, %block_401c74 ], [ %855, %block_401b67 ]
  %860 = phi i64 [ 5, %block_401c74 ], [ 258, %block_401b67 ]
  %861 = phi %struct.Memory* [ %3084, %block_401c74 ], [ %1763, %block_401b67 ]
  %862 = add i64 %859, %860
  %863 = add i64 %1824, -152
  %864 = inttoptr i64 %863 to double*
  %865 = load double, double* %864
  %866 = inttoptr i64 %857 to double*
  %867 = load double, double* %866
  %868 = fsub double %865, %867
  %869 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1056) to float*)
  %870 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1060) to float*)
  %871 = bitcast %union.VectorReg* %25 to float*
  store float %869, float* %871, align 1, !tbaa !1492
  %872 = bitcast i8* %1767 to float*
  store float %870, float* %872, align 1, !tbaa !1492
  %873 = bitcast double %868 to i64
  %874 = load i64, i64* %1765, align 1
  %875 = and i64 %874, %873
  %876 = trunc i64 %875 to i32
  %877 = lshr i64 %875, 32
  %878 = trunc i64 %877 to i32
  %879 = bitcast [32 x %union.VectorReg]* %24 to i32*
  store i32 %876, i32* %879, align 1, !tbaa !1481
  %880 = getelementptr inbounds i8, i8* %627, i64 4
  %881 = bitcast i8* %880 to i32*
  store i32 %878, i32* %881, align 1, !tbaa !1481
  %882 = load double, double* %630, align 1
  %883 = fdiv double %882, %867
  %884 = add i64 %1824, -224
  %885 = inttoptr i64 %884 to double*
  store double %883, double* %885
  %886 = inttoptr i64 %884 to double*
  %887 = load double, double* %886
  store double %887, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %888 = inttoptr i64 %1825 to double*
  %889 = load double, double* %888
  store double %889, double* %635, align 1, !tbaa !1244
  store double 0.000000e+00, double* %637, align 1, !tbaa !1244
  %890 = add i64 %862, 63
  store i64 %890, i64* %3, align 8
  %891 = fcmp uno double %889, %887
  br i1 %891, label %892, label %904

; <label>:892:                                    ; preds = %block_401c79
  %893 = fadd double %889, %887
  %894 = bitcast double %893 to i64
  %895 = and i64 %894, 9221120237041090560
  %896 = icmp eq i64 %895, 9218868437227405312
  %897 = and i64 %894, 2251799813685247
  %898 = icmp ne i64 %897, 0
  %899 = and i1 %896, %898
  br i1 %899, label %900, label %910

; <label>:900:                                    ; preds = %892
  %901 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %890, %struct.Memory* %861) #14
  %902 = load i64, i64* %3, align 8
  %903 = load i8, i8* %47, align 1, !tbaa !1246
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:904:                                    ; preds = %block_401c79
  %905 = fcmp ogt double %889, %887
  br i1 %905, label %910, label %906

; <label>:906:                                    ; preds = %904
  %907 = fcmp olt double %889, %887
  br i1 %907, label %910, label %908

; <label>:908:                                    ; preds = %906
  %909 = fcmp oeq double %889, %887
  br i1 %909, label %910, label %914

; <label>:910:                                    ; preds = %908, %906, %904, %892
  %911 = phi i8 [ 0, %904 ], [ 0, %906 ], [ 1, %908 ], [ 1, %892 ]
  %912 = phi i8 [ 0, %904 ], [ 0, %906 ], [ 0, %908 ], [ 1, %892 ]
  %913 = phi i8 [ 0, %904 ], [ 1, %906 ], [ 0, %908 ], [ 1, %892 ]
  store i8 %911, i8* %50, align 1, !tbaa !1494
  store i8 %912, i8* %48, align 1, !tbaa !1494
  store i8 %913, i8* %47, align 1, !tbaa !1494
  br label %914

; <label>:914:                                    ; preds = %910, %908
  %915 = phi i8 [ %913, %910 ], [ %858, %908 ]
  store i8 0, i8* %52, align 1, !tbaa !1494
  store i8 0, i8* %51, align 1, !tbaa !1494
  store i8 0, i8* %49, align 1, !tbaa !1494
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %914, %900
  %916 = phi i8 [ %903, %900 ], [ %915, %914 ]
  %917 = phi i64 [ %902, %900 ], [ %890, %914 ]
  %918 = phi %struct.Memory* [ %901, %900 ], [ %861, %914 ]
  %919 = icmp ne i8 %916, 0
  %920 = select i1 %919, i64 106, i64 6
  %921 = add i64 %917, %920
  %922 = icmp eq i8 %916, 1
  br i1 %922, label %block_401d22, label %block_401cbe

block_4012d6:                                     ; preds = %block_401289, %block_4012bc, %block_4012c9
  %923 = phi i64 [ %2891, %block_401289 ], [ %1137, %block_4012bc ], [ %935, %block_4012c9 ]
  %924 = phi i64 [ 69, %block_401289 ], [ 5, %block_4012bc ], [ 5, %block_4012c9 ]
  %925 = phi %struct.Memory* [ %519, %block_401289 ], [ %519, %block_4012bc ], [ %519, %block_4012c9 ]
  %926 = add i64 %923, %924
  br label %block_4012db

block_401136:                                     ; preds = %block_401112
  %927 = add i64 %523, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %928 = inttoptr i64 %927 to i32*
  %929 = load i32, i32* %928
  %930 = sub i32 %526, %929
  %931 = icmp eq i32 %930, 0
  %932 = select i1 %931, i64 49, i64 36
  %933 = add i64 %533, %932
  br i1 %931, label %block_401167, label %block_40115a

block_4012c9:                                     ; preds = %block_401296, %block_4012af
  %934 = phi i64 [ %1446, %block_401296 ], [ %1317, %block_4012af ]
  %935 = add i64 %934, 8
  store i8 85, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  br label %block_4012d6

block_400d39:                                     ; preds = %block_400d10
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1072), i64* %12, align 8, !tbaa !1240
  %936 = load i64, i64* @stderr
  store i64 %936, i64* %13, align 8, !tbaa !1240
  %937 = add i64 %64, 25
  %938 = load i64, i64* %14, align 8, !tbaa !1240
  %939 = add i64 %938, -8
  %940 = inttoptr i64 %939 to i64*
  store i64 %937, i64* %940
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %943 = load i64, i64* %942, align 8, !alias.scope !1495, !noalias !1498
  %944 = load i64, i64* %941, align 8, !alias.scope !1495, !noalias !1498
  %945 = load i64, i64* %16, align 8, !alias.scope !1495, !noalias !1498
  %946 = load i64, i64* %17, align 8, !alias.scope !1495, !noalias !1498
  %947 = inttoptr i64 %938 to i64*
  %948 = load i64, i64* %947
  %949 = add i64 %938, 8
  %950 = inttoptr i64 %949 to i64*
  %951 = load i64, i64* %950
  %952 = add i64 %938, 16
  %953 = inttoptr i64 %952 to i64*
  %954 = load i64, i64* %953
  %955 = add i64 %938, 24
  %956 = inttoptr i64 %955 to i64*
  %957 = load i64, i64* %956
  %958 = add i64 %938, 32
  %959 = inttoptr i64 %958 to i64*
  %960 = load i64, i64* %959
  %961 = add i64 %938, 40
  %962 = inttoptr i64 %961 to i64*
  %963 = load i64, i64* %962
  %964 = add i64 %938, 48
  %965 = inttoptr i64 %964 to i64*
  %966 = load i64, i64* %965
  %967 = add i64 %938, 56
  %968 = inttoptr i64 %967 to i64*
  %969 = load i64, i64* %968
  %970 = add i64 %938, 64
  %971 = inttoptr i64 %970 to i64*
  %972 = load i64, i64* %971
  %973 = add i64 %938, 72
  %974 = inttoptr i64 %973 to i64*
  %975 = load i64, i64* %974
  %976 = inttoptr i64 %939 to i64*
  %977 = load i64, i64* %976
  store i64 %977, i64* %3, align 8, !alias.scope !1495, !noalias !1498
  store i64 %938, i64* %14, align 8, !alias.scope !1495, !noalias !1498
  %978 = tail call i64 @fprintf(i64 %936, i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1072), i64 %943, i64 %944, i64 %945, i64 %946, i64 %948, i64 %951, i64 %954, i64 %957, i64 %960, i64 %963, i64 %966, i64 %969, i64 %972, i64 %975), !noalias !1495
  %979 = load i64, i64* %15, align 8
  %980 = add i64 %979, -44
  %981 = inttoptr i64 %980 to i32*
  store i32 -1, i32* %981
  %982 = add i64 %979, -344
  %983 = trunc i64 %978 to i32
  %984 = inttoptr i64 %982 to i32*
  store i32 %983, i32* %984
  br label %block_40216d

block_401cbe:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %985 = load i64, i64* %15, align 8
  %986 = add i64 %985, -228
  %987 = inttoptr i64 %986 to i32*
  store i32 1, i32* %987
  %988 = add i64 %921, 27
  %989 = load i64, i64* %14, align 8, !tbaa !1240
  %990 = add i64 %989, -8
  %991 = inttoptr i64 %990 to i64*
  store i64 %988, i64* %991
  %992 = load i64, i64* %612, align 8, !alias.scope !1500, !noalias !1503
  %993 = load i64, i64* %1454, align 8, !alias.scope !1500, !noalias !1503
  %994 = load i64, i64* %1453, align 8, !alias.scope !1500, !noalias !1503
  %995 = load i64, i64* %16, align 8, !alias.scope !1500, !noalias !1503
  %996 = load i64, i64* %17, align 8, !alias.scope !1500, !noalias !1503
  %997 = inttoptr i64 %989 to i64*
  %998 = load i64, i64* %997
  %999 = add i64 %989, 8
  %1000 = inttoptr i64 %999 to i64*
  %1001 = load i64, i64* %1000
  %1002 = add i64 %989, 16
  %1003 = inttoptr i64 %1002 to i64*
  %1004 = load i64, i64* %1003
  %1005 = add i64 %989, 24
  %1006 = inttoptr i64 %1005 to i64*
  %1007 = load i64, i64* %1006
  %1008 = add i64 %989, 32
  %1009 = inttoptr i64 %1008 to i64*
  %1010 = load i64, i64* %1009
  %1011 = add i64 %989, 40
  %1012 = inttoptr i64 %1011 to i64*
  %1013 = load i64, i64* %1012
  %1014 = add i64 %989, 48
  %1015 = inttoptr i64 %1014 to i64*
  %1016 = load i64, i64* %1015
  %1017 = add i64 %989, 56
  %1018 = inttoptr i64 %1017 to i64*
  %1019 = load i64, i64* %1018
  %1020 = add i64 %989, 64
  %1021 = inttoptr i64 %1020 to i64*
  %1022 = load i64, i64* %1021
  %1023 = add i64 %989, 72
  %1024 = inttoptr i64 %1023 to i64*
  %1025 = load i64, i64* %1024
  %1026 = inttoptr i64 %990 to i64*
  %1027 = load i64, i64* %1026
  store i64 %1027, i64* %3, align 8, !alias.scope !1500, !noalias !1503
  store i64 %989, i64* %14, align 8, !alias.scope !1500, !noalias !1503
  %1028 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1424), i64 %992, i64 %993, i64 %994, i64 %995, i64 %996, i64 %998, i64 %1001, i64 %1004, i64 %1007, i64 %1010, i64 %1013, i64 %1016, i64 %1019, i64 %1022, i64 %1025), !noalias !1500
  %1029 = load i64, i64* %3, align 8
  %1030 = load i64, i64* %15, align 8
  %1031 = add i64 %1030, -152
  %1032 = inttoptr i64 %1031 to double*
  %1033 = load double, double* %1032
  store double %1033, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %1034 = add i64 %1030, -464
  %1035 = trunc i64 %1028 to i32
  %1036 = inttoptr i64 %1034 to i32*
  store i32 %1035, i32* %1036
  %1037 = add i64 %1029, 31
  %1038 = load i64, i64* %14, align 8, !tbaa !1240
  %1039 = add i64 %1038, -8
  %1040 = inttoptr i64 %1039 to i64*
  store i64 %1037, i64* %1040
  %1041 = load i64, i64* %612, align 8, !alias.scope !1505, !noalias !1508
  %1042 = load i64, i64* %1454, align 8, !alias.scope !1505, !noalias !1508
  %1043 = load i64, i64* %1453, align 8, !alias.scope !1505, !noalias !1508
  %1044 = load i64, i64* %16, align 8, !alias.scope !1505, !noalias !1508
  %1045 = load i64, i64* %17, align 8, !alias.scope !1505, !noalias !1508
  %1046 = inttoptr i64 %1038 to i64*
  %1047 = load i64, i64* %1046
  %1048 = add i64 %1038, 8
  %1049 = inttoptr i64 %1048 to i64*
  %1050 = load i64, i64* %1049
  %1051 = add i64 %1038, 16
  %1052 = inttoptr i64 %1051 to i64*
  %1053 = load i64, i64* %1052
  %1054 = add i64 %1038, 24
  %1055 = inttoptr i64 %1054 to i64*
  %1056 = load i64, i64* %1055
  %1057 = add i64 %1038, 32
  %1058 = inttoptr i64 %1057 to i64*
  %1059 = load i64, i64* %1058
  %1060 = add i64 %1038, 40
  %1061 = inttoptr i64 %1060 to i64*
  %1062 = load i64, i64* %1061
  %1063 = add i64 %1038, 48
  %1064 = inttoptr i64 %1063 to i64*
  %1065 = load i64, i64* %1064
  %1066 = add i64 %1038, 56
  %1067 = inttoptr i64 %1066 to i64*
  %1068 = load i64, i64* %1067
  %1069 = add i64 %1038, 64
  %1070 = inttoptr i64 %1069 to i64*
  %1071 = load i64, i64* %1070
  %1072 = add i64 %1038, 72
  %1073 = inttoptr i64 %1072 to i64*
  %1074 = load i64, i64* %1073
  %1075 = inttoptr i64 %1039 to i64*
  %1076 = load i64, i64* %1075
  store i64 %1076, i64* %3, align 8, !alias.scope !1505, !noalias !1508
  store i64 %1038, i64* %14, align 8, !alias.scope !1505, !noalias !1508
  %1077 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1538), i64 %1041, i64 %1042, i64 %1043, i64 %1044, i64 %1045, i64 %1047, i64 %1050, i64 %1053, i64 %1056, i64 %1059, i64 %1062, i64 %1065, i64 %1068, i64 %1071, i64 %1074), !noalias !1505
  %1078 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1450), i64* %13, align 8, !tbaa !1240
  %1079 = load i64, i64* %15, align 8
  %1080 = add i64 %1079, -224
  %1081 = inttoptr i64 %1080 to double*
  %1082 = load double, double* %1081
  store double %1082, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %1083 = add i64 %1079, -468
  %1084 = trunc i64 %1077 to i32
  %1085 = inttoptr i64 %1083 to i32*
  store i32 %1084, i32* %1085
  %1086 = add i64 %1078, 31
  %1087 = load i64, i64* %14, align 8, !tbaa !1240
  %1088 = add i64 %1087, -8
  %1089 = inttoptr i64 %1088 to i64*
  store i64 %1086, i64* %1089
  %1090 = load i64, i64* %612, align 8, !alias.scope !1510, !noalias !1513
  %1091 = load i64, i64* %1454, align 8, !alias.scope !1510, !noalias !1513
  %1092 = load i64, i64* %1453, align 8, !alias.scope !1510, !noalias !1513
  %1093 = load i64, i64* %16, align 8, !alias.scope !1510, !noalias !1513
  %1094 = load i64, i64* %17, align 8, !alias.scope !1510, !noalias !1513
  %1095 = inttoptr i64 %1087 to i64*
  %1096 = load i64, i64* %1095
  %1097 = add i64 %1087, 8
  %1098 = inttoptr i64 %1097 to i64*
  %1099 = load i64, i64* %1098
  %1100 = add i64 %1087, 16
  %1101 = inttoptr i64 %1100 to i64*
  %1102 = load i64, i64* %1101
  %1103 = add i64 %1087, 24
  %1104 = inttoptr i64 %1103 to i64*
  %1105 = load i64, i64* %1104
  %1106 = add i64 %1087, 32
  %1107 = inttoptr i64 %1106 to i64*
  %1108 = load i64, i64* %1107
  %1109 = add i64 %1087, 40
  %1110 = inttoptr i64 %1109 to i64*
  %1111 = load i64, i64* %1110
  %1112 = add i64 %1087, 48
  %1113 = inttoptr i64 %1112 to i64*
  %1114 = load i64, i64* %1113
  %1115 = add i64 %1087, 56
  %1116 = inttoptr i64 %1115 to i64*
  %1117 = load i64, i64* %1116
  %1118 = add i64 %1087, 64
  %1119 = inttoptr i64 %1118 to i64*
  %1120 = load i64, i64* %1119
  %1121 = add i64 %1087, 72
  %1122 = inttoptr i64 %1121 to i64*
  %1123 = load i64, i64* %1122
  %1124 = inttoptr i64 %1088 to i64*
  %1125 = load i64, i64* %1124
  store i64 %1125, i64* %3, align 8, !alias.scope !1510, !noalias !1513
  store i64 %1087, i64* %14, align 8, !alias.scope !1510, !noalias !1513
  %1126 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1450), i64 %1090, i64 %1091, i64 %1092, i64 %1093, i64 %1094, i64 %1096, i64 %1099, i64 %1102, i64 %1105, i64 %1108, i64 %1111, i64 %1114, i64 %1117, i64 %1120, i64 %1123), !noalias !1510
  %1127 = load i64, i64* %15, align 8
  %1128 = add i64 %1127, -472
  %1129 = trunc i64 %1126 to i32
  %1130 = load i64, i64* %3, align 8
  %1131 = inttoptr i64 %1128 to i32*
  store i32 %1129, i32* %1131
  %1132 = add i64 %1130, 106
  br label %block_401d81

block_401345:                                     ; preds = %block_401334
  %1133 = add nsw i32 %661, -87
  %1134 = icmp eq i32 %1133, 0
  %1135 = select i1 %1134, i64 17, i64 75
  %1136 = add i64 %363, %1135
  br i1 %1134, label %block_401356, label %block_401390

block_4012bc:                                     ; preds = %block_4012af
  store i8 69, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  %1137 = add i64 %1317, 21
  br label %block_4012d6

block_400ed2:                                     ; preds = %block_400e91
  %1138 = add i64 %1510, 17
  %1139 = load i64, i64* %14, align 8, !tbaa !1240
  %1140 = add i64 %1139, -8
  %1141 = inttoptr i64 %1140 to i64*
  store i64 %1138, i64* %1141
  %1142 = load i64, i64* %612, align 8, !alias.scope !1515, !noalias !1518
  %1143 = load i64, i64* %1454, align 8, !alias.scope !1515, !noalias !1518
  %1144 = load i64, i64* %1453, align 8, !alias.scope !1515, !noalias !1518
  %1145 = load i64, i64* %16, align 8, !alias.scope !1515, !noalias !1518
  %1146 = load i64, i64* %17, align 8, !alias.scope !1515, !noalias !1518
  %1147 = inttoptr i64 %1139 to i64*
  %1148 = load i64, i64* %1147
  %1149 = add i64 %1139, 8
  %1150 = inttoptr i64 %1149 to i64*
  %1151 = load i64, i64* %1150
  %1152 = add i64 %1139, 16
  %1153 = inttoptr i64 %1152 to i64*
  %1154 = load i64, i64* %1153
  %1155 = add i64 %1139, 24
  %1156 = inttoptr i64 %1155 to i64*
  %1157 = load i64, i64* %1156
  %1158 = add i64 %1139, 32
  %1159 = inttoptr i64 %1158 to i64*
  %1160 = load i64, i64* %1159
  %1161 = add i64 %1139, 40
  %1162 = inttoptr i64 %1161 to i64*
  %1163 = load i64, i64* %1162
  %1164 = add i64 %1139, 48
  %1165 = inttoptr i64 %1164 to i64*
  %1166 = load i64, i64* %1165
  %1167 = add i64 %1139, 56
  %1168 = inttoptr i64 %1167 to i64*
  %1169 = load i64, i64* %1168
  %1170 = add i64 %1139, 64
  %1171 = inttoptr i64 %1170 to i64*
  %1172 = load i64, i64* %1171
  %1173 = add i64 %1139, 72
  %1174 = inttoptr i64 %1173 to i64*
  %1175 = load i64, i64* %1174
  %1176 = inttoptr i64 %1140 to i64*
  %1177 = load i64, i64* %1176
  store i64 %1177, i64* %3, align 8, !alias.scope !1515, !noalias !1518
  store i64 %1139, i64* %14, align 8, !alias.scope !1515, !noalias !1518
  %1178 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1212), i64 %1142, i64 %1143, i64 %1144, i64 %1145, i64 %1146, i64 %1148, i64 %1151, i64 %1154, i64 %1157, i64 %1160, i64 %1163, i64 %1166, i64 %1169, i64 %1172, i64 %1175), !noalias !1515
  %1179 = load i64, i64* %3, align 8
  %1180 = load i64, i64* %15, align 8
  %1181 = add i64 %1180, -336
  %1182 = inttoptr i64 %1181 to i64*
  %1183 = load i64, i64* %1182
  %1184 = add i64 %1180, -356
  %1185 = trunc i64 %1178 to i32
  %1186 = inttoptr i64 %1184 to i32*
  store i32 %1185, i32* %1186
  %1187 = add i64 %1179, 40
  %1188 = load i64, i64* %14, align 8, !tbaa !1240
  %1189 = add i64 %1188, -8
  %1190 = inttoptr i64 %1189 to i64*
  store i64 %1187, i64* %1190
  %1191 = load i64, i64* %1453, align 8, !alias.scope !1520, !noalias !1523
  %1192 = load i64, i64* %16, align 8, !alias.scope !1520, !noalias !1523
  %1193 = load i64, i64* %17, align 8, !alias.scope !1520, !noalias !1523
  %1194 = inttoptr i64 %1188 to i64*
  %1195 = load i64, i64* %1194
  %1196 = add i64 %1188, 8
  %1197 = inttoptr i64 %1196 to i64*
  %1198 = load i64, i64* %1197
  %1199 = add i64 %1188, 16
  %1200 = inttoptr i64 %1199 to i64*
  %1201 = load i64, i64* %1200
  %1202 = add i64 %1188, 24
  %1203 = inttoptr i64 %1202 to i64*
  %1204 = load i64, i64* %1203
  %1205 = add i64 %1188, 32
  %1206 = inttoptr i64 %1205 to i64*
  %1207 = load i64, i64* %1206
  %1208 = add i64 %1188, 40
  %1209 = inttoptr i64 %1208 to i64*
  %1210 = load i64, i64* %1209
  %1211 = add i64 %1188, 48
  %1212 = inttoptr i64 %1211 to i64*
  %1213 = load i64, i64* %1212
  %1214 = add i64 %1188, 56
  %1215 = inttoptr i64 %1214 to i64*
  %1216 = load i64, i64* %1215
  %1217 = add i64 %1188, 64
  %1218 = inttoptr i64 %1217 to i64*
  %1219 = load i64, i64* %1218
  %1220 = add i64 %1188, 72
  %1221 = inttoptr i64 %1220 to i64*
  %1222 = load i64, i64* %1221
  %1223 = inttoptr i64 %1189 to i64*
  %1224 = load i64, i64* %1223
  store i64 %1224, i64* %3, align 8, !alias.scope !1520, !noalias !1523
  store i64 %1188, i64* %14, align 8, !alias.scope !1520, !noalias !1523
  %1225 = tail call i64 @__isoc99_fscanf(i64 %1183, i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1247), i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044), i64 %1191, i64 %1192, i64 %1193, i64 %1195, i64 %1198, i64 %1201, i64 %1204, i64 %1207, i64 %1210, i64 %1213, i64 %1216, i64 %1219, i64 %1222), !noalias !1520
  %1226 = load i64, i64* %15, align 8
  %1227 = add i64 %1226, -340
  %1228 = trunc i64 %1225 to i32
  %1229 = load i64, i64* %3, align 8
  %1230 = add i64 %1229, 6
  %1231 = inttoptr i64 %1227 to i32*
  store i32 %1228, i32* %1231
  br label %block_400f11

block_401874:                                     ; preds = %block_4017fa, %block_40186a
  %1232 = phi i64 [ %3345, %block_4017fa ], [ %2725, %block_40186a ]
  %1233 = phi %struct.Memory* [ %3340, %block_4017fa ], [ %2724, %block_40186a ]
  %1234 = load i64, i64* %15, align 8
  %1235 = add i64 %1234, -152
  store i64 %1235, i64* %16, align 8, !tbaa !1240
  %1236 = add i64 %1234, -160
  store i64 %1236, i64* %17, align 8, !tbaa !1240
  %1237 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  %1238 = add i64 %1234, -188
  %1239 = inttoptr i64 %1238 to i32*
  %1240 = load i32, i32* %1239
  %1241 = zext i32 %1240 to i64
  store i64 %1241, i64* %12, align 8, !tbaa !1240
  %1242 = add i64 %1234, -192
  %1243 = inttoptr i64 %1242 to i32*
  %1244 = load i32, i32* %1243
  %1245 = zext i32 %1244 to i64
  store i64 %1245, i64* %11, align 8, !tbaa !1240
  %1246 = add i64 %1234, -196
  %1247 = inttoptr i64 %1246 to i32*
  %1248 = load i32, i32* %1247
  %1249 = zext i32 %1248 to i64
  store i64 %1249, i64* %10, align 8, !tbaa !1240
  %1250 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %1251 = sext i32 %1250 to i64
  %1252 = shl nsw i64 %1251, 2
  %1253 = add i64 %1252, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %1254 = inttoptr i64 %1253 to i32*
  %1255 = load i32, i32* %1254
  %1256 = add i64 %1252, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %1257 = inttoptr i64 %1256 to i32*
  %1258 = load i32, i32* %1257
  %1259 = add i64 %1252, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %1260 = inttoptr i64 %1259 to i32*
  %1261 = load i32, i32* %1260
  %1262 = zext i32 %1261 to i64
  store i64 %1262, i64* %9, align 8, !tbaa !1240
  store i64 %1237, i64* %13, align 8, !tbaa !1240
  %1263 = load i64, i64* %14, align 8
  %1264 = inttoptr i64 %1263 to i32*
  store i32 %1255, i32* %1264
  %1265 = add i64 %1263, 8
  %1266 = inttoptr i64 %1265 to i32*
  store i32 %1258, i32* %1266
  %1267 = add i64 %1263, 16
  %1268 = inttoptr i64 %1267 to i32*
  store i32 %1261, i32* %1268
  %1269 = add i64 %1232, 6588
  %1270 = add i64 %1232, 108
  %1271 = add i64 %1263, -8
  %1272 = inttoptr i64 %1271 to i64*
  store i64 %1270, i64* %1272
  store i64 %1271, i64* %14, align 8, !tbaa !1240
  %1273 = tail call %struct.Memory* @sub_403230_norm2u3(%struct.State* nonnull %0, i64 %1269, %struct.Memory* %1233)
  %1274 = load i64, i64* %15, align 8
  %1275 = add i64 %1274, -152
  %1276 = load i64, i64* %3, align 8
  %1277 = inttoptr i64 %1275 to double*
  %1278 = load double, double* %1277
  %1279 = add i64 %1274, -168
  %1280 = inttoptr i64 %1279 to double*
  store double %1278, double* %1280
  %1281 = add i64 %1274, -160
  %1282 = inttoptr i64 %1281 to double*
  %1283 = load double, double* %1282
  store double %1283, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %1284 = add i64 %1274, -176
  %1285 = inttoptr i64 %1284 to double*
  store double %1283, double* %1285
  %1286 = add i64 %1274, -52
  %1287 = add i64 %1276, 39
  %1288 = inttoptr i64 %1286 to i32*
  store i32 1, i32* %1288
  br label %block_401907

block_401bc8:                                     ; preds = %block_401ba2
  store i64 %3405, i64* %8, align 8, !tbaa !1240
  %1289 = add nsw i32 %3406, -66
  %1290 = icmp ult i8 %3403, 66
  %1291 = zext i1 %1290 to i8
  store i8 %1291, i8* %47, align 1, !tbaa !1246
  %1292 = and i32 %1289, 255
  %1293 = tail call i32 @llvm.ctpop.i32(i32 %1292) #11
  %1294 = trunc i32 %1293 to i8
  %1295 = and i8 %1294, 1
  %1296 = xor i8 %1295, 1
  store i8 %1296, i8* %48, align 1, !tbaa !1260
  %1297 = xor i32 %1289, %3406
  %1298 = lshr i32 %1297, 4
  %1299 = trunc i32 %1298 to i8
  %1300 = and i8 %1299, 1
  store i8 %1300, i8* %49, align 1, !tbaa !1261
  %1301 = icmp eq i32 %1289, 0
  %1302 = zext i1 %1301 to i8
  store i8 %1302, i8* %50, align 1, !tbaa !1262
  %1303 = lshr i32 %1289, 31
  %1304 = trunc i32 %1303 to i8
  store i8 %1304, i8* %51, align 1, !tbaa !1263
  %1305 = xor i32 %1303, %3424
  %1306 = add nuw nsw i32 %1305, %3424
  %1307 = icmp eq i32 %1306, 2
  %1308 = zext i1 %1307 to i8
  store i8 %1308, i8* %52, align 1, !tbaa !1264
  %1309 = select i1 %1301, i64 17, i64 38
  %1310 = add i64 %2890, %1309
  br i1 %1301, label %block_401bd9, label %block_401bee

block_4012af:                                     ; preds = %block_401296
  %1311 = add i64 %516, -200
  %1312 = inttoptr i64 %1311 to i32*
  %1313 = load i32, i32* %1312
  %1314 = add i32 %1313, -50
  %1315 = icmp eq i32 %1314, 0
  %1316 = select i1 %1315, i64 13, i64 26
  %1317 = add i64 %1446, %1316
  br i1 %1315, label %block_4012bc, label %block_4012c9

block_4019f7:                                     ; preds = %block_4019ed, %block_4019df
  %1318 = phi i64 [ %675, %block_4019df ], [ %2554, %block_4019ed ]
  %1319 = phi %struct.Memory* [ %671, %block_4019df ], [ %2553, %block_4019ed ]
  %1320 = load i64, i64* %15, align 8
  %1321 = add i64 %1320, -112
  %1322 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  %1323 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  %1324 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  %1325 = add i64 %1320, -188
  %1326 = inttoptr i64 %1325 to i32*
  %1327 = load i32, i32* %1326
  %1328 = add i64 %1320, -192
  %1329 = inttoptr i64 %1328 to i32*
  %1330 = load i32, i32* %1329
  %1331 = zext i32 %1330 to i64
  store i64 %1331, i64* %16, align 8, !tbaa !1240
  %1332 = add i64 %1320, -196
  %1333 = inttoptr i64 %1332 to i32*
  %1334 = load i32, i32* %1333
  %1335 = zext i32 %1334 to i64
  store i64 %1335, i64* %17, align 8, !tbaa !1240
  %1336 = add i64 %1320, -48
  %1337 = inttoptr i64 %1336 to i32*
  %1338 = load i32, i32* %1337
  %1339 = add i64 %1320, -444
  %1340 = inttoptr i64 %1339 to i32*
  store i32 %1327, i32* %1340
  store i64 %1322, i64* %13, align 8, !tbaa !1240
  %1341 = add i64 %1320, -456
  %1342 = inttoptr i64 %1341 to i64*
  store i64 %1324, i64* %1342
  store i64 %1323, i64* %12, align 8, !tbaa !1240
  %1343 = inttoptr i64 %1341 to i64*
  %1344 = load i64, i64* %1343
  store i64 %1344, i64* %11, align 8, !tbaa !1240
  %1345 = inttoptr i64 %1339 to i32*
  %1346 = load i32, i32* %1345
  %1347 = zext i32 %1346 to i64
  store i64 %1347, i64* %10, align 8, !tbaa !1240
  %1348 = load i64, i64* %14, align 8
  %1349 = inttoptr i64 %1348 to i64*
  store i64 %1321, i64* %1349
  %1350 = add i64 %1348, 8
  %1351 = inttoptr i64 %1350 to i32*
  store i32 %1338, i32* %1351
  %1352 = add i64 %1318, 6761
  %1353 = add i64 %1318, 98
  %1354 = add i64 %1348, -8
  %1355 = inttoptr i64 %1354 to i64*
  store i64 %1353, i64* %1355
  store i64 %1354, i64* %14, align 8, !tbaa !1240
  %1356 = tail call %struct.Memory* @sub_403460_resid(%struct.State* nonnull %0, i64 %1352, %struct.Memory* %1319)
  %1357 = load i64, i64* %3, align 8
  %1358 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %1359 = icmp eq i32 %1358, 0
  %1360 = select i1 %1359, i64 24, i64 14
  %1361 = add i64 %1357, %1360
  br i1 %1359, label %block_401a71, label %block_401a67

block_4011f0:                                     ; preds = %block_4011e3
  store i8 65, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  %1362 = add i64 %320, 245
  br label %block_4012ea

block_401167:                                     ; preds = %block_401136
  %1363 = add i32 %526, -32
  %1364 = icmp eq i32 %1363, 0
  %1365 = select i1 %1364, i64 22, i64 48
  %1366 = add i64 %933, %1365
  br i1 %1364, label %block_40117d, label %block_401197

block_40209c:                                     ; preds = %block_40207f
  store i64 4, i64* %13, align 8, !tbaa !1240
  %1367 = add i64 %1895, -5036
  %1368 = add i64 %1895, 10
  %1369 = load i64, i64* %14, align 8, !tbaa !1240
  %1370 = add i64 %1369, -8
  %1371 = inttoptr i64 %1370 to i64*
  store i64 %1368, i64* %1371
  store i64 %1370, i64* %14, align 8, !tbaa !1240
  %1372 = tail call %struct.Memory* @sub_400cf0_timer_read(%struct.State* nonnull %0, i64 %1367, %struct.Memory* %1864)
  %1373 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1773), i64* %12, align 8, !tbaa !1240
  %1374 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 968) to double*)
  %1375 = load i64, i64* %15, align 8
  %1376 = add i64 %1375, -64
  %1377 = load double, double* %630, align 1
  %1378 = inttoptr i64 %1376 to double*
  %1379 = load double, double* %1378
  %1380 = fsub double %1377, %1379
  %1381 = inttoptr i64 %1376 to double*
  store double %1380, double* %1381
  %1382 = inttoptr i64 %1376 to double*
  %1383 = load double, double* %1382
  store double %1383, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %1384 = fmul double %1374, %1383
  %1385 = add i64 %1375, -328
  %1386 = inttoptr i64 %1385 to double*
  %1387 = load double, double* %1386
  %1388 = fdiv double %1384, %1387
  store double %1388, double* %635, align 1, !tbaa !1244
  store i64 0, i64* %636, align 1, !tbaa !1244
  %1389 = add i64 %1373, 63
  %1390 = load i64, i64* %14, align 8, !tbaa !1240
  %1391 = add i64 %1390, -8
  %1392 = inttoptr i64 %1391 to i64*
  store i64 %1389, i64* %1392
  %1393 = load i64, i64* %1454, align 8, !alias.scope !1525, !noalias !1528
  %1394 = load i64, i64* %1453, align 8, !alias.scope !1525, !noalias !1528
  %1395 = load i64, i64* %16, align 8, !alias.scope !1525, !noalias !1528
  %1396 = load i64, i64* %17, align 8, !alias.scope !1525, !noalias !1528
  %1397 = inttoptr i64 %1390 to i64*
  %1398 = load i64, i64* %1397
  %1399 = add i64 %1390, 8
  %1400 = inttoptr i64 %1399 to i64*
  %1401 = load i64, i64* %1400
  %1402 = add i64 %1390, 16
  %1403 = inttoptr i64 %1402 to i64*
  %1404 = load i64, i64* %1403
  %1405 = add i64 %1390, 24
  %1406 = inttoptr i64 %1405 to i64*
  %1407 = load i64, i64* %1406
  %1408 = add i64 %1390, 32
  %1409 = inttoptr i64 %1408 to i64*
  %1410 = load i64, i64* %1409
  %1411 = add i64 %1390, 40
  %1412 = inttoptr i64 %1411 to i64*
  %1413 = load i64, i64* %1412
  %1414 = add i64 %1390, 48
  %1415 = inttoptr i64 %1414 to i64*
  %1416 = load i64, i64* %1415
  %1417 = add i64 %1390, 56
  %1418 = inttoptr i64 %1417 to i64*
  %1419 = load i64, i64* %1418
  %1420 = add i64 %1390, 64
  %1421 = inttoptr i64 %1420 to i64*
  %1422 = load i64, i64* %1421
  %1423 = add i64 %1390, 72
  %1424 = inttoptr i64 %1423 to i64*
  %1425 = load i64, i64* %1424
  %1426 = inttoptr i64 %1391 to i64*
  %1427 = load i64, i64* %1426
  store i64 %1427, i64* %3, align 8, !alias.scope !1525, !noalias !1528
  store i64 %1390, i64* %14, align 8, !alias.scope !1525, !noalias !1528
  %1428 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1743), i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1773), i64 %1393, i64 %1394, i64 %1395, i64 %1396, i64 %1398, i64 %1401, i64 %1404, i64 %1407, i64 %1410, i64 %1413, i64 %1416, i64 %1419, i64 %1422, i64 %1425), !noalias !1525
  %1429 = load i64, i64* %15, align 8
  %1430 = add i64 %1429, -560
  %1431 = trunc i64 %1428 to i32
  %1432 = load i64, i64* %3, align 8
  %1433 = inttoptr i64 %1430 to i32*
  store i32 %1431, i32* %1433
  %1434 = add i64 %1432, 94
  br label %block_402143

block_4017f0:                                     ; preds = %block_4017d8
  store i64 5, i64* %13, align 8, !tbaa !1240
  %1435 = add i64 %3103, -2976
  %1436 = add i64 %3103, 10
  %1437 = load i64, i64* %14, align 8, !tbaa !1240
  %1438 = add i64 %1437, -8
  %1439 = inttoptr i64 %1438 to i64*
  store i64 %1436, i64* %1439
  store i64 %1438, i64* %14, align 8, !tbaa !1240
  %1440 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %1435, %struct.Memory* %3098)
  %1441 = load i64, i64* %3, align 8
  br label %block_4017fa

block_401296:                                     ; preds = %block_401263, %block_40127c
  %1442 = phi i64 [ %2796, %block_401263 ], [ %1939, %block_40127c ]
  %1443 = add i32 %526, -2048
  %1444 = icmp eq i32 %1443, 0
  %1445 = select i1 %1444, i64 25, i64 51
  %1446 = add i64 %1442, %1445
  br i1 %1444, label %block_4012af, label %block_4012c9

block_400e91:                                     ; preds = %block_400e86, %block_400dcb
  %1447 = phi i64 [ %1643, %block_400e86 ], [ %209, %block_400dcb ]
  %1448 = phi %struct.Memory* [ %606, %block_400e86 ], [ %606, %block_400dcb ]
  %1449 = add i64 %1447, 17
  %1450 = load i64, i64* %14, align 8, !tbaa !1240
  %1451 = add i64 %1450, -8
  %1452 = inttoptr i64 %1451 to i64*
  store i64 %1449, i64* %1452
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1455 = load i64, i64* %612, align 8, !alias.scope !1530, !noalias !1533
  %1456 = load i64, i64* %1454, align 8, !alias.scope !1530, !noalias !1533
  %1457 = load i64, i64* %1453, align 8, !alias.scope !1530, !noalias !1533
  %1458 = load i64, i64* %16, align 8, !alias.scope !1530, !noalias !1533
  %1459 = load i64, i64* %17, align 8, !alias.scope !1530, !noalias !1533
  %1460 = inttoptr i64 %1450 to i64*
  %1461 = load i64, i64* %1460
  %1462 = add i64 %1450, 8
  %1463 = inttoptr i64 %1462 to i64*
  %1464 = load i64, i64* %1463
  %1465 = add i64 %1450, 16
  %1466 = inttoptr i64 %1465 to i64*
  %1467 = load i64, i64* %1466
  %1468 = add i64 %1450, 24
  %1469 = inttoptr i64 %1468 to i64*
  %1470 = load i64, i64* %1469
  %1471 = add i64 %1450, 32
  %1472 = inttoptr i64 %1471 to i64*
  %1473 = load i64, i64* %1472
  %1474 = add i64 %1450, 40
  %1475 = inttoptr i64 %1474 to i64*
  %1476 = load i64, i64* %1475
  %1477 = add i64 %1450, 48
  %1478 = inttoptr i64 %1477 to i64*
  %1479 = load i64, i64* %1478
  %1480 = add i64 %1450, 56
  %1481 = inttoptr i64 %1480 to i64*
  %1482 = load i64, i64* %1481
  %1483 = add i64 %1450, 64
  %1484 = inttoptr i64 %1483 to i64*
  %1485 = load i64, i64* %1484
  %1486 = add i64 %1450, 72
  %1487 = inttoptr i64 %1486 to i64*
  %1488 = load i64, i64* %1487
  %1489 = inttoptr i64 %1451 to i64*
  %1490 = load i64, i64* %1489
  store i64 %1490, i64* %3, align 8, !alias.scope !1530, !noalias !1533
  store i64 %1450, i64* %14, align 8, !alias.scope !1530, !noalias !1533
  %1491 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1144), i64 %1455, i64 %1456, i64 %1457, i64 %1458, i64 %1459, i64 %1461, i64 %1464, i64 %1467, i64 %1470, i64 %1473, i64 %1476, i64 %1479, i64 %1482, i64 %1485, i64 %1488), !noalias !1530
  %1492 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2024), i64* %12, align 8, !tbaa !1240
  %1493 = load i64, i64* %15, align 8
  %1494 = add i64 %1493, -352
  %1495 = trunc i64 %1491 to i32
  %1496 = inttoptr i64 %1494 to i32*
  store i32 %1495, i32* %1496
  %1497 = add i64 %1492, 31
  %1498 = load i64, i64* %14, align 8, !tbaa !1240
  %1499 = add i64 %1498, -8
  %1500 = inttoptr i64 %1499 to i64*
  store i64 %1497, i64* %1500
  %1501 = inttoptr i64 %1499 to i64*
  %1502 = load i64, i64* %1501
  store i64 %1502, i64* %3, align 8, !alias.scope !1535, !noalias !1538
  store i64 %1498, i64* %14, align 8, !alias.scope !1535, !noalias !1538
  %1503 = tail call i64 @fopen(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1203), i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2024))
  %1504 = load i64, i64* %15, align 8
  %1505 = add i64 %1504, -336
  %1506 = load i64, i64* %3, align 8
  %1507 = inttoptr i64 %1505 to i64*
  store i64 %1503, i64* %1507
  %1508 = icmp eq i64 %1503, 0
  %1509 = select i1 %1508, i64 426, i64 17
  %1510 = add i64 %1506, %1509
  br i1 %1508, label %block_40106b, label %block_400ed2

block_401e90:                                     ; preds = %block_401e4a, %block_401e4f
  %1511 = phi i64 [ %2895, %block_401e4f ], [ %2929, %block_401e4a ]
  %1512 = phi i64 [ %2912, %block_401e4f ], [ %2931, %block_401e4a ]
  %1513 = phi %struct.Memory* [ %3296, %block_401e4f ], [ %3296, %block_401e4a ]
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1610), i64* %13, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1638), i64* %10, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1644), i64* %11, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1660), i64* %16, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1666), i64* %17, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1670), i64* %18, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1682), i64* %19, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1691), i64* %9, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1711), i64* %22, align 8, !tbaa !1240
  %1514 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  %1515 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %1516 = sext i32 %1515 to i64
  %1517 = shl nsw i64 %1516, 2
  %1518 = add i64 %1517, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %1519 = inttoptr i64 %1518 to i32*
  %1520 = load i32, i32* %1519
  %1521 = zext i32 %1520 to i64
  store i64 %1521, i64* %21, align 8, !tbaa !1240
  %1522 = add i64 %1517, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %1523 = inttoptr i64 %1522 to i32*
  %1524 = load i32, i32* %1523
  %1525 = zext i32 %1524 to i64
  %1526 = add i64 %1511, -504
  %1527 = inttoptr i64 %1526 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1613), i64* %1527
  %1528 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %1529 = sext i32 %1528 to i64
  %1530 = shl nsw i64 %1529, 2
  %1531 = add i64 %1530, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %1532 = inttoptr i64 %1531 to i32*
  %1533 = load i32, i32* %1532
  %1534 = add i64 %1511, -508
  %1535 = inttoptr i64 %1534 to i32*
  store i32 %1533, i32* %1535
  %1536 = add i64 %1511, -200
  %1537 = inttoptr i64 %1536 to i32*
  %1538 = load i32, i32* %1537
  %1539 = add i64 %1511, -64
  %1540 = inttoptr i64 %1539 to double*
  %1541 = load double, double* %1540
  store double %1541, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %1542 = add i64 %1511, -80
  %1543 = inttoptr i64 %1542 to double*
  %1544 = load double, double* %1543
  store double %1544, double* %635, align 1, !tbaa !1244
  store double 0.000000e+00, double* %637, align 1, !tbaa !1244
  %1545 = add i64 %1511, -512
  %1546 = inttoptr i64 %1545 to i32*
  store i32 %1538, i32* %1546
  %1547 = load i64, i64* %15, align 8
  %1548 = add i64 %1547, -228
  %1549 = inttoptr i64 %1548 to i32*
  %1550 = load i32, i32* %1549
  %1551 = add i64 %1547, -520
  %1552 = inttoptr i64 %1551 to i64*
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1656), i64* %1552
  %1553 = sext i8 %1514 to i64
  %1554 = and i64 %1553, 4294967295
  store i64 %1554, i64* %12, align 8, !tbaa !1240
  %1555 = add i64 %1547, -528
  %1556 = load i64, i64* %11, align 8
  %1557 = inttoptr i64 %1555 to i64*
  store i64 %1556, i64* %1557
  store i64 %1521, i64* %11, align 8, !tbaa !1240
  %1558 = add i64 %1547, -536
  %1559 = load i64, i64* %10, align 8
  %1560 = inttoptr i64 %1558 to i64*
  store i64 %1559, i64* %1560
  store i64 %1525, i64* %10, align 8, !tbaa !1240
  %1561 = add i64 %1547, -508
  %1562 = inttoptr i64 %1561 to i32*
  %1563 = load i32, i32* %1562
  %1564 = zext i32 %1563 to i64
  %1565 = add i64 %1547, -544
  %1566 = load i64, i64* %16, align 8
  %1567 = inttoptr i64 %1565 to i64*
  store i64 %1566, i64* %1567
  store i64 %1564, i64* %16, align 8, !tbaa !1240
  %1568 = add i64 %1547, -512
  %1569 = inttoptr i64 %1568 to i32*
  %1570 = load i32, i32* %1569
  %1571 = zext i32 %1570 to i64
  store i64 %1571, i64* %20, align 8, !tbaa !1240
  %1572 = add i64 %1547, -552
  %1573 = load i64, i64* %17, align 8
  %1574 = inttoptr i64 %1572 to i64*
  store i64 %1573, i64* %1574
  store i64 %1571, i64* %17, align 8, !tbaa !1240
  %1575 = add i64 %1547, -504
  %1576 = inttoptr i64 %1575 to i64*
  %1577 = load i64, i64* %1576
  %1578 = load i64, i64* %14, align 8
  %1579 = inttoptr i64 %1578 to i64*
  store i64 %1577, i64* %1579
  %1580 = add i64 %1578, 8
  %1581 = inttoptr i64 %1580 to i32*
  store i32 %1550, i32* %1581
  %1582 = inttoptr i64 %1558 to i64*
  %1583 = load i64, i64* %1582
  %1584 = add i64 %1578, 16
  %1585 = inttoptr i64 %1584 to i64*
  store i64 %1583, i64* %1585
  %1586 = inttoptr i64 %1555 to i64*
  %1587 = load i64, i64* %1586
  %1588 = add i64 %1578, 24
  %1589 = inttoptr i64 %1588 to i64*
  store i64 %1587, i64* %1589
  %1590 = load i64, i64* %15, align 8
  %1591 = add i64 %1590, -520
  %1592 = inttoptr i64 %1591 to i64*
  %1593 = load i64, i64* %1592
  %1594 = add i64 %1578, 32
  %1595 = inttoptr i64 %1594 to i64*
  store i64 %1593, i64* %1595
  %1596 = add i64 %1590, -544
  %1597 = inttoptr i64 %1596 to i64*
  %1598 = load i64, i64* %1597
  %1599 = add i64 %1578, 40
  %1600 = inttoptr i64 %1599 to i64*
  store i64 %1598, i64* %1600
  %1601 = add i64 %1590, -552
  %1602 = inttoptr i64 %1601 to i64*
  %1603 = load i64, i64* %1602
  store i64 %1603, i64* %23, align 8, !tbaa !1240
  %1604 = add i64 %1578, 48
  %1605 = inttoptr i64 %1604 to i64*
  store i64 %1603, i64* %1605
  %1606 = add i64 %1578, 56
  %1607 = load i64, i64* %18, align 8
  %1608 = inttoptr i64 %1606 to i64*
  store i64 %1607, i64* %1608
  %1609 = add i64 %1578, 64
  %1610 = load i64, i64* %19, align 8
  %1611 = inttoptr i64 %1609 to i64*
  store i64 %1610, i64* %1611
  %1612 = add i64 %1578, 72
  %1613 = load i64, i64* %9, align 8
  %1614 = inttoptr i64 %1612 to i64*
  store i64 %1613, i64* %1614
  %1615 = add i64 %1578, 80
  %1616 = load i64, i64* %22, align 8
  %1617 = inttoptr i64 %1615 to i64*
  store i64 %1616, i64* %1617
  %1618 = add i64 %1512, 21248
  %1619 = add i64 %1512, 374
  %1620 = add i64 %1578, -8
  %1621 = inttoptr i64 %1620 to i64*
  store i64 %1619, i64* %1621
  store i64 %1620, i64* %14, align 8, !tbaa !1240
  %1622 = tail call %struct.Memory* @sub_407190_print_results(%struct.State* nonnull %0, i64 %1618, %struct.Memory* %1513)
  %1623 = load i64, i64* %3, align 8
  %1624 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  store i8 0, i8* %47, align 1, !tbaa !1246
  %1625 = and i32 %1624, 255
  %1626 = tail call i32 @llvm.ctpop.i32(i32 %1625) #11
  %1627 = trunc i32 %1626 to i8
  %1628 = and i8 %1627, 1
  %1629 = xor i8 %1628, 1
  store i8 %1629, i8* %48, align 1, !tbaa !1260
  store i8 0, i8* %49, align 1, !tbaa !1261
  %1630 = icmp eq i32 %1624, 0
  %1631 = zext i1 %1630 to i8
  store i8 %1631, i8* %50, align 1, !tbaa !1262
  %1632 = lshr i32 %1624, 31
  %1633 = trunc i32 %1632 to i8
  store i8 %1633, i8* %51, align 1, !tbaa !1263
  store i8 0, i8* %52, align 1, !tbaa !1264
  %1634 = select i1 %1630, i64 347, i64 14
  %1635 = add i64 %1623, %1634
  br i1 %1630, label %block_402161, label %block_402014

block_4011b0:                                     ; preds = %block_401197
  %1636 = add i64 %516, -200
  %1637 = inttoptr i64 %1636 to i32*
  %1638 = load i32, i32* %1637
  %1639 = add i32 %1638, -4
  %1640 = icmp eq i32 %1639, 0
  %1641 = select i1 %1640, i64 13, i64 26
  %1642 = add i64 %2917, %1641
  br i1 %1640, label %block_4011bd, label %block_4011ca

block_400e86:                                     ; preds = %block_400d9a
  %1643 = add i64 %623, 11
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  br label %block_400e91

block_4020f0:                                     ; preds = %block_40207f
  %1644 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 968) to double*)
  %1645 = sext i32 %1872 to i64
  %1646 = shl nsw i64 %1645, 3
  %1647 = add i64 %1865, -320
  %1648 = add i64 %1647, %1646
  %1649 = inttoptr i64 %1648 to i64*
  %1650 = load i64, i64* %1649
  store i64 %1650, i64* %12, align 8, !tbaa !1240
  %1651 = inttoptr i64 %1866 to double*
  %1652 = load double, double* %1651
  %1653 = fmul double %1644, %1652
  %1654 = add i64 %1865, -328
  %1655 = inttoptr i64 %1654 to double*
  %1656 = load double, double* %1655
  %1657 = fdiv double %1653, %1656
  store double %1657, double* %630, align 1, !tbaa !1244
  store i64 0, i64* %631, align 1, !tbaa !1244
  %1658 = add i64 %1865, -568
  %1659 = inttoptr i64 %1658 to double*
  store double %1657, double* %1659
  %1660 = bitcast double %1652 to <2 x i32>
  %1661 = extractelement <2 x i32> %1660, i32 0
  store i32 %1661, i32* %3239, align 1, !tbaa !1492
  %1662 = extractelement <2 x i32> %1660, i32 1
  store i32 %1662, i32* %3238, align 1, !tbaa !1492
  store i32 0, i32* %3244, align 1, !tbaa !1492
  store i32 0, i32* %3245, align 1, !tbaa !1492
  %1663 = inttoptr i64 %1658 to double*
  %1664 = load double, double* %1663
  store double %1664, double* %635, align 1, !tbaa !1244
  store double 0.000000e+00, double* %637, align 1, !tbaa !1244
  %1665 = add i64 %1895, 77
  %1666 = load i64, i64* %14, align 8, !tbaa !1240
  %1667 = add i64 %1666, -8
  %1668 = inttoptr i64 %1667 to i64*
  store i64 %1665, i64* %1668
  %1669 = load i64, i64* %1454, align 8, !alias.scope !1540, !noalias !1543
  %1670 = load i64, i64* %1453, align 8, !alias.scope !1540, !noalias !1543
  %1671 = load i64, i64* %16, align 8, !alias.scope !1540, !noalias !1543
  %1672 = load i64, i64* %17, align 8, !alias.scope !1540, !noalias !1543
  %1673 = inttoptr i64 %1666 to i64*
  %1674 = load i64, i64* %1673
  %1675 = add i64 %1666, 8
  %1676 = inttoptr i64 %1675 to i64*
  %1677 = load i64, i64* %1676
  %1678 = add i64 %1666, 16
  %1679 = inttoptr i64 %1678 to i64*
  %1680 = load i64, i64* %1679
  %1681 = add i64 %1666, 24
  %1682 = inttoptr i64 %1681 to i64*
  %1683 = load i64, i64* %1682
  %1684 = add i64 %1666, 32
  %1685 = inttoptr i64 %1684 to i64*
  %1686 = load i64, i64* %1685
  %1687 = add i64 %1666, 40
  %1688 = inttoptr i64 %1687 to i64*
  %1689 = load i64, i64* %1688
  %1690 = add i64 %1666, 48
  %1691 = inttoptr i64 %1690 to i64*
  %1692 = load i64, i64* %1691
  %1693 = add i64 %1666, 56
  %1694 = inttoptr i64 %1693 to i64*
  %1695 = load i64, i64* %1694
  %1696 = add i64 %1666, 64
  %1697 = inttoptr i64 %1696 to i64*
  %1698 = load i64, i64* %1697
  %1699 = add i64 %1666, 72
  %1700 = inttoptr i64 %1699 to i64*
  %1701 = load i64, i64* %1700
  %1702 = inttoptr i64 %1667 to i64*
  %1703 = load i64, i64* %1702
  store i64 %1703, i64* %3, align 8, !alias.scope !1540, !noalias !1543
  store i64 %1666, i64* %14, align 8, !alias.scope !1540, !noalias !1543
  %1704 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1782), i64 %1650, i64 %1669, i64 %1670, i64 %1671, i64 %1672, i64 %1674, i64 %1677, i64 %1680, i64 %1683, i64 %1686, i64 %1689, i64 %1692, i64 %1695, i64 %1698, i64 %1701), !noalias !1540
  %1705 = load i64, i64* %15, align 8
  %1706 = add i64 %1705, -572
  %1707 = trunc i64 %1704 to i32
  %1708 = load i64, i64* %3, align 8
  %1709 = add i64 %1708, 6
  %1710 = inttoptr i64 %1706 to i32*
  store i32 %1707, i32* %1710
  br label %block_402143

block_401a84:                                     ; preds = %block_401907
  %1711 = add i64 %563, -152
  store i64 %1711, i64* %16, align 8, !tbaa !1240
  %1712 = add i64 %563, -160
  store i64 %1712, i64* %17, align 8, !tbaa !1240
  %1713 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  %1714 = add i64 %563, -188
  %1715 = inttoptr i64 %1714 to i32*
  %1716 = load i32, i32* %1715
  %1717 = zext i32 %1716 to i64
  store i64 %1717, i64* %12, align 8, !tbaa !1240
  %1718 = add i64 %563, -192
  %1719 = inttoptr i64 %1718 to i32*
  %1720 = load i32, i32* %1719
  %1721 = zext i32 %1720 to i64
  store i64 %1721, i64* %11, align 8, !tbaa !1240
  %1722 = add i64 %563, -196
  %1723 = inttoptr i64 %1722 to i32*
  %1724 = load i32, i32* %1723
  %1725 = zext i32 %1724 to i64
  store i64 %1725, i64* %10, align 8, !tbaa !1240
  %1726 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %1727 = sext i32 %1726 to i64
  %1728 = shl nsw i64 %1727, 2
  %1729 = add i64 %1728, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %1730 = inttoptr i64 %1729 to i32*
  %1731 = load i32, i32* %1730
  %1732 = add i64 %1728, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %1733 = inttoptr i64 %1732 to i32*
  %1734 = load i32, i32* %1733
  %1735 = add i64 %1728, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %1736 = inttoptr i64 %1735 to i32*
  %1737 = load i32, i32* %1736
  %1738 = zext i32 %1737 to i64
  store i64 %1738, i64* %9, align 8, !tbaa !1240
  store i64 %1713, i64* %13, align 8, !tbaa !1240
  %1739 = load i64, i64* %14, align 8
  %1740 = inttoptr i64 %1739 to i32*
  store i32 %1731, i32* %1740
  %1741 = add i64 %1739, 8
  %1742 = inttoptr i64 %1741 to i32*
  store i32 %1734, i32* %1742
  %1743 = add i64 %1739, 16
  %1744 = inttoptr i64 %1743 to i32*
  store i32 %1737, i32* %1744
  %1745 = add i64 %600, 6060
  %1746 = add i64 %600, 108
  %1747 = add i64 %1739, -8
  %1748 = inttoptr i64 %1747 to i64*
  store i64 %1746, i64* %1748
  store i64 %1747, i64* %14, align 8, !tbaa !1240
  %1749 = tail call %struct.Memory* @sub_403230_norm2u3(%struct.State* nonnull %0, i64 %1745, %struct.Memory* %564)
  %1750 = load i64, i64* %3, align 8
  store i64 1, i64* %13, align 8, !tbaa !1240
  %1751 = add i64 %1750, -3664
  %1752 = add i64 %1750, 10
  %1753 = load i64, i64* %14, align 8, !tbaa !1240
  %1754 = add i64 %1753, -8
  %1755 = inttoptr i64 %1754 to i64*
  store i64 %1752, i64* %1755
  store i64 %1754, i64* %14, align 8, !tbaa !1240
  %1756 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %1751, %struct.Memory* %1749)
  %1757 = load i64, i64* %3, align 8
  store i64 1, i64* %13, align 8, !tbaa !1240
  %1758 = add i64 %1757, -3594
  %1759 = add i64 %1757, 10
  %1760 = load i64, i64* %14, align 8, !tbaa !1240
  %1761 = add i64 %1760, -8
  %1762 = inttoptr i64 %1761 to i64*
  store i64 %1759, i64* %1762
  store i64 %1761, i64* %14, align 8, !tbaa !1240
  %1763 = tail call %struct.Memory* @sub_400cf0_timer_read(%struct.State* nonnull %0, i64 %1758, %struct.Memory* %1756)
  %1764 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1401), i64* %13, align 8, !tbaa !1240
  %1765 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %25, i64 0, i32 0, i32 0, i32 0, i64 0
  %1766 = bitcast %union.VectorReg* %25 to i32*
  store i32 0, i32* %1766, align 1, !tbaa !1481
  %1767 = getelementptr inbounds i8, i8* %633, i64 4
  %1768 = bitcast i8* %1767 to i32*
  store i32 0, i32* %1768, align 1, !tbaa !1481
  %1769 = bitcast i64* %636 to i32*
  store i32 0, i32* %1769, align 1, !tbaa !1481
  %1770 = getelementptr inbounds i8, i8* %633, i64 12
  %1771 = bitcast i8* %1770 to i32*
  store i32 0, i32* %1771, align 1, !tbaa !1481
  %1772 = load i64, i64* %15, align 8
  %1773 = add i64 %1772, -64
  %1774 = load double, double* %630, align 1
  %1775 = inttoptr i64 %1773 to double*
  store double %1774, double* %1775
  %1776 = add i64 %1772, -228
  %1777 = inttoptr i64 %1776 to i32*
  store i32 0, i32* %1777
  %1778 = add i64 %1772, -216
  %1779 = load double, double* %635, align 1
  %1780 = inttoptr i64 %1778 to double*
  store double %1779, double* %1780
  %1781 = add i64 %1764, 43
  %1782 = load i64, i64* %14, align 8, !tbaa !1240
  %1783 = add i64 %1782, -8
  %1784 = inttoptr i64 %1783 to i64*
  store i64 %1781, i64* %1784
  %1785 = load i64, i64* %612, align 8, !alias.scope !1545, !noalias !1548
  %1786 = load i64, i64* %1454, align 8, !alias.scope !1545, !noalias !1548
  %1787 = load i64, i64* %1453, align 8, !alias.scope !1545, !noalias !1548
  %1788 = load i64, i64* %16, align 8, !alias.scope !1545, !noalias !1548
  %1789 = load i64, i64* %17, align 8, !alias.scope !1545, !noalias !1548
  %1790 = inttoptr i64 %1782 to i64*
  %1791 = load i64, i64* %1790
  %1792 = add i64 %1782, 8
  %1793 = inttoptr i64 %1792 to i64*
  %1794 = load i64, i64* %1793
  %1795 = add i64 %1782, 16
  %1796 = inttoptr i64 %1795 to i64*
  %1797 = load i64, i64* %1796
  %1798 = add i64 %1782, 24
  %1799 = inttoptr i64 %1798 to i64*
  %1800 = load i64, i64* %1799
  %1801 = add i64 %1782, 32
  %1802 = inttoptr i64 %1801 to i64*
  %1803 = load i64, i64* %1802
  %1804 = add i64 %1782, 40
  %1805 = inttoptr i64 %1804 to i64*
  %1806 = load i64, i64* %1805
  %1807 = add i64 %1782, 48
  %1808 = inttoptr i64 %1807 to i64*
  %1809 = load i64, i64* %1808
  %1810 = add i64 %1782, 56
  %1811 = inttoptr i64 %1810 to i64*
  %1812 = load i64, i64* %1811
  %1813 = add i64 %1782, 64
  %1814 = inttoptr i64 %1813 to i64*
  %1815 = load i64, i64* %1814
  %1816 = add i64 %1782, 72
  %1817 = inttoptr i64 %1816 to i64*
  %1818 = load i64, i64* %1817
  %1819 = inttoptr i64 %1783 to i64*
  %1820 = load i64, i64* %1819
  store i64 %1820, i64* %3, align 8, !alias.scope !1545, !noalias !1548
  store i64 %1782, i64* %14, align 8, !alias.scope !1545, !noalias !1548
  %1821 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1401), i64 %1785, i64 %1786, i64 %1787, i64 %1788, i64 %1789, i64 %1791, i64 %1794, i64 %1797, i64 %1800, i64 %1803, i64 %1806, i64 %1809, i64 %1812, i64 %1815, i64 %1818), !noalias !1545
  %1822 = load i64, i64* %3, align 8
  %1823 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 880) to double*)
  store double %1823, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %1824 = load i64, i64* %15, align 8
  %1825 = add i64 %1824, -184
  %1826 = inttoptr i64 %1825 to double*
  store double %1823, double* %1826
  %1827 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  %1828 = sext i8 %1827 to i64
  %1829 = and i64 %1828, 4294967295
  store i64 %1829, i64* %10, align 8, !tbaa !1240
  %1830 = sext i8 %1827 to i32
  %1831 = add nsw i32 %1830, -85
  %1832 = icmp ult i8 %1827, 85
  %1833 = zext i1 %1832 to i8
  store i8 %1833, i8* %47, align 1, !tbaa !1246
  %1834 = and i32 %1831, 255
  %1835 = tail call i32 @llvm.ctpop.i32(i32 %1834) #11
  %1836 = trunc i32 %1835 to i8
  %1837 = and i8 %1836, 1
  %1838 = xor i8 %1837, 1
  store i8 %1838, i8* %48, align 1, !tbaa !1260
  %1839 = xor i32 %1830, 16
  %1840 = xor i32 %1839, %1831
  %1841 = lshr i32 %1840, 4
  %1842 = trunc i32 %1841 to i8
  %1843 = and i8 %1842, 1
  store i8 %1843, i8* %49, align 1, !tbaa !1261
  %1844 = icmp eq i32 %1831, 0
  %1845 = zext i1 %1844 to i8
  store i8 %1845, i8* %50, align 1, !tbaa !1262
  %1846 = lshr i32 %1831, 31
  %1847 = trunc i32 %1846 to i8
  store i8 %1847, i8* %51, align 1, !tbaa !1263
  %1848 = lshr i32 %1830, 31
  %1849 = xor i32 %1846, %1848
  %1850 = add nuw nsw i32 %1849, %1848
  %1851 = icmp eq i32 %1850, 2
  %1852 = zext i1 %1851 to i8
  store i8 %1852, i8* %52, align 1, !tbaa !1264
  %1853 = add i64 %1824, -460
  %1854 = trunc i64 %1821 to i32
  %1855 = inttoptr i64 %1853 to i32*
  store i32 %1854, i32* %1855
  %1856 = select i1 %1844, i64 599, i64 39
  %1857 = add i64 %1822, %1856
  br i1 %1844, label %block_401d86, label %block_401b56

block_40207f:                                     ; preds = %block_402072
  %1858 = zext i32 %2560 to i64
  store i64 %1858, i64* %13, align 8, !tbaa !1240
  %1859 = add i64 %2585, -5007
  %1860 = add i64 %2585, 11
  %1861 = load i64, i64* %14, align 8, !tbaa !1240
  %1862 = add i64 %1861, -8
  %1863 = inttoptr i64 %1862 to i64*
  store i64 %1860, i64* %1863
  store i64 %1862, i64* %14, align 8, !tbaa !1240
  %1864 = tail call %struct.Memory* @sub_400cf0_timer_read(%struct.State* nonnull %0, i64 %1859, %struct.Memory* %2557)
  %1865 = load i64, i64* %15, align 8
  %1866 = add i64 %1865, -64
  %1867 = load i64, i64* %3, align 8
  %1868 = load double, double* %630, align 1
  %1869 = inttoptr i64 %1866 to double*
  store double %1868, double* %1869
  %1870 = add i64 %1865, -232
  %1871 = inttoptr i64 %1870 to i32*
  %1872 = load i32, i32* %1871
  %1873 = add i32 %1872, -5
  %1874 = icmp ult i32 %1872, 5
  %1875 = zext i1 %1874 to i8
  store i8 %1875, i8* %47, align 1, !tbaa !1246
  %1876 = and i32 %1873, 255
  %1877 = tail call i32 @llvm.ctpop.i32(i32 %1876) #11
  %1878 = trunc i32 %1877 to i8
  %1879 = and i8 %1878, 1
  %1880 = xor i8 %1879, 1
  store i8 %1880, i8* %48, align 1, !tbaa !1260
  %1881 = xor i32 %1873, %1872
  %1882 = lshr i32 %1881, 4
  %1883 = trunc i32 %1882 to i8
  %1884 = and i8 %1883, 1
  store i8 %1884, i8* %49, align 1, !tbaa !1261
  %1885 = icmp eq i32 %1873, 0
  %1886 = zext i1 %1885 to i8
  store i8 %1886, i8* %50, align 1, !tbaa !1262
  %1887 = lshr i32 %1873, 31
  %1888 = trunc i32 %1887 to i8
  store i8 %1888, i8* %51, align 1, !tbaa !1263
  %1889 = lshr i32 %1872, 31
  %1890 = xor i32 %1887, %1889
  %1891 = add nuw nsw i32 %1890, %1889
  %1892 = icmp eq i32 %1891, 2
  %1893 = zext i1 %1892 to i8
  store i8 %1893, i8* %52, align 1, !tbaa !1264
  %1894 = select i1 %1885, i64 18, i64 102
  %1895 = add i64 %1867, %1894
  br i1 %1885, label %block_40209c, label %block_4020f0

block_400d6e:                                     ; preds = %block_400d64, %block_400d7b
  %1896 = phi i64 [ %2799, %block_400d64 ], [ %359, %block_400d7b ]
  %1897 = phi i64 [ %2797, %block_400d64 ], [ %352, %block_400d7b ]
  %1898 = phi %struct.Memory* [ %59, %block_400d64 ], [ %351, %block_400d7b ]
  %1899 = add i64 %1897, -232
  %1900 = inttoptr i64 %1899 to i32*
  %1901 = load i32, i32* %1900
  %1902 = add i32 %1901, -10
  %1903 = icmp ult i32 %1901, 10
  %1904 = zext i1 %1903 to i8
  store i8 %1904, i8* %47, align 1, !tbaa !1246
  %1905 = and i32 %1902, 255
  %1906 = tail call i32 @llvm.ctpop.i32(i32 %1905) #11
  %1907 = trunc i32 %1906 to i8
  %1908 = and i8 %1907, 1
  %1909 = xor i8 %1908, 1
  store i8 %1909, i8* %48, align 1, !tbaa !1260
  %1910 = xor i32 %1902, %1901
  %1911 = lshr i32 %1910, 4
  %1912 = trunc i32 %1911 to i8
  %1913 = and i8 %1912, 1
  store i8 %1913, i8* %49, align 1, !tbaa !1261
  %1914 = icmp eq i32 %1902, 0
  %1915 = zext i1 %1914 to i8
  store i8 %1915, i8* %50, align 1, !tbaa !1262
  %1916 = lshr i32 %1902, 31
  %1917 = trunc i32 %1916 to i8
  store i8 %1917, i8* %51, align 1, !tbaa !1263
  %1918 = lshr i32 %1901, 31
  %1919 = xor i32 %1916, %1918
  %1920 = add nuw nsw i32 %1919, %1918
  %1921 = icmp eq i32 %1920, 2
  %1922 = zext i1 %1921 to i8
  store i8 %1922, i8* %52, align 1, !tbaa !1264
  %1923 = icmp ne i8 %1917, 0
  %1924 = xor i1 %1923, %1921
  %1925 = select i1 %1924, i64 13, i64 44
  %1926 = add i64 %1896, %1925
  br i1 %1924, label %block_400d7b, label %block_400d9a

block_401c6a:                                     ; preds = %block_401c65, %block_401bd9
  %1927 = phi i64 [ %2764, %block_401c65 ], [ %89, %block_401bd9 ]
  %1928 = phi i8 [ %2765, %block_401c65 ], [ %1291, %block_401bd9 ]
  %1929 = phi i64 [ %2769, %block_401c65 ], [ %90, %block_401bd9 ]
  %1930 = phi i64 [ 5, %block_401c65 ], [ 129, %block_401bd9 ]
  %1931 = phi %struct.Memory* [ %2768, %block_401c65 ], [ %1763, %block_401bd9 ]
  %1932 = add i64 %1929, %1930
  br label %block_401c6f

block_40127c:                                     ; preds = %block_401263
  %1933 = add i64 %516, -200
  %1934 = inttoptr i64 %1933 to i32*
  %1935 = load i32, i32* %1934
  %1936 = add i32 %1935, -50
  %1937 = icmp eq i32 %1936, 0
  %1938 = select i1 %1937, i64 13, i64 26
  %1939 = add i64 %2796, %1938
  br i1 %1937, label %block_401289, label %block_401296

block_4013c5:                                     ; preds = %block_401390, %block_401356
  %1940 = phi i64 [ %2639, %block_401356 ], [ %3122, %block_401390 ]
  %1941 = phi i64 [ %2629, %block_401356 ], [ %3114, %block_401390 ]
  %1942 = phi %struct.Memory* [ %626, %block_401356 ], [ %626, %block_401390 ]
  %1943 = add i64 %1941, -188
  store i64 %1943, i64* %13, align 8, !tbaa !1240
  %1944 = add i64 %1941, -192
  store i64 %1944, i64* %12, align 8, !tbaa !1240
  %1945 = add i64 %1941, -196
  store i64 %1945, i64* %11, align 8, !tbaa !1240
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1236) to i32*)
  %1946 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %1947 = add i64 %1941, -48
  %1948 = inttoptr i64 %1947 to i32*
  store i32 %1946, i32* %1948
  %1949 = add i64 %1940, 3675
  %1950 = add i64 %1940, 47
  %1951 = load i64, i64* %14, align 8, !tbaa !1240
  %1952 = add i64 %1951, -8
  %1953 = inttoptr i64 %1952 to i64*
  store i64 %1950, i64* %1953
  store i64 %1952, i64* %14, align 8, !tbaa !1240
  %1954 = tail call %struct.Memory* @sub_402220_setup(%struct.State* nonnull %0, i64 %1949, %struct.Memory* %1942)
  %1955 = load i64, i64* %3, align 8
  %1956 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  %1957 = load i64, i64* %15, align 8
  %1958 = add i64 %1957, -188
  %1959 = inttoptr i64 %1958 to i32*
  %1960 = load i32, i32* %1959
  %1961 = zext i32 %1960 to i64
  store i64 %1961, i64* %12, align 8, !tbaa !1240
  %1962 = add i64 %1957, -192
  %1963 = inttoptr i64 %1962 to i32*
  %1964 = load i32, i32* %1963
  %1965 = zext i32 %1964 to i64
  %1966 = add i64 %1957, -196
  %1967 = inttoptr i64 %1966 to i32*
  %1968 = load i32, i32* %1967
  %1969 = zext i32 %1968 to i64
  store i64 %1969, i64* %10, align 8, !tbaa !1240
  store i64 %1956, i64* %13, align 8, !tbaa !1240
  store i64 %1965, i64* %11, align 8, !tbaa !1240
  %1970 = add i64 %1955, 5004
  %1971 = add i64 %1955, 36
  %1972 = load i64, i64* %14, align 8, !tbaa !1240
  %1973 = add i64 %1972, -8
  %1974 = inttoptr i64 %1973 to i64*
  store i64 %1971, i64* %1974
  store i64 %1973, i64* %14, align 8, !tbaa !1240
  %1975 = tail call %struct.Memory* @sub_402780_zero3(%struct.State* nonnull %0, i64 %1970, %struct.Memory* %1954)
  %1976 = load i64, i64* %3, align 8
  %1977 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  store i64 %1977, i64* %13, align 8, !tbaa !1240
  %1978 = load i64, i64* %15, align 8
  %1979 = add i64 %1978, -188
  %1980 = inttoptr i64 %1979 to i32*
  %1981 = load i32, i32* %1980
  %1982 = zext i32 %1981 to i64
  store i64 %1982, i64* %12, align 8, !tbaa !1240
  %1983 = add i64 %1978, -192
  %1984 = inttoptr i64 %1983 to i32*
  %1985 = load i32, i32* %1984
  %1986 = zext i32 %1985 to i64
  store i64 %1986, i64* %11, align 8, !tbaa !1240
  %1987 = add i64 %1978, -196
  %1988 = inttoptr i64 %1987 to i32*
  %1989 = load i32, i32* %1988
  %1990 = zext i32 %1989 to i64
  store i64 %1990, i64* %10, align 8, !tbaa !1240
  %1991 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %1992 = sext i32 %1991 to i64
  %1993 = shl nsw i64 %1992, 2
  %1994 = add i64 %1993, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %1995 = inttoptr i64 %1994 to i32*
  %1996 = load i32, i32* %1995
  %1997 = zext i32 %1996 to i64
  store i64 %1997, i64* %16, align 8, !tbaa !1240
  %1998 = add i64 %1993, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %1999 = inttoptr i64 %1998 to i32*
  %2000 = load i32, i32* %1999
  %2001 = zext i32 %2000 to i64
  store i64 %2001, i64* %17, align 8, !tbaa !1240
  %2002 = add i64 %1978, -48
  %2003 = inttoptr i64 %2002 to i32*
  %2004 = load i32, i32* %2003
  %2005 = load i64, i64* %14, align 8
  %2006 = inttoptr i64 %2005 to i32*
  store i32 %2004, i32* %2006
  %2007 = add i64 %1976, 5192
  %2008 = add i64 %1976, 69
  %2009 = add i64 %2005, -8
  %2010 = inttoptr i64 %2009 to i64*
  store i64 %2008, i64* %2010
  store i64 %2009, i64* %14, align 8, !tbaa !1240
  %2011 = tail call %struct.Memory* @sub_402860_zran3(%struct.State* nonnull %0, i64 %2007, %struct.Memory* %1975)
  %2012 = load i64, i64* %15, align 8
  %2013 = add i64 %2012, -152
  %2014 = load i64, i64* %3, align 8
  store i64 %2013, i64* %16, align 8, !tbaa !1240
  %2015 = add i64 %2012, -160
  store i64 %2015, i64* %17, align 8, !tbaa !1240
  %2016 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  store i64 %2016, i64* %13, align 8, !tbaa !1240
  %2017 = add i64 %2012, -188
  %2018 = inttoptr i64 %2017 to i32*
  %2019 = load i32, i32* %2018
  %2020 = zext i32 %2019 to i64
  store i64 %2020, i64* %12, align 8, !tbaa !1240
  %2021 = add i64 %2012, -192
  %2022 = inttoptr i64 %2021 to i32*
  %2023 = load i32, i32* %2022
  %2024 = zext i32 %2023 to i64
  store i64 %2024, i64* %11, align 8, !tbaa !1240
  %2025 = add i64 %2012, -196
  %2026 = inttoptr i64 %2025 to i32*
  %2027 = load i32, i32* %2026
  %2028 = zext i32 %2027 to i64
  store i64 %2028, i64* %10, align 8, !tbaa !1240
  %2029 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %2030 = sext i32 %2029 to i64
  %2031 = shl nsw i64 %2030, 2
  %2032 = add i64 %2031, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %2033 = inttoptr i64 %2032 to i32*
  %2034 = load i32, i32* %2033
  %2035 = add i64 %2031, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %2036 = inttoptr i64 %2035 to i32*
  %2037 = load i32, i32* %2036
  %2038 = add i64 %2031, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %2039 = inttoptr i64 %2038 to i32*
  %2040 = load i32, i32* %2039
  %2041 = zext i32 %2040 to i64
  store i64 %2041, i64* %9, align 8, !tbaa !1240
  %2042 = load i64, i64* %14, align 8
  %2043 = inttoptr i64 %2042 to i32*
  store i32 %2034, i32* %2043
  %2044 = add i64 %2042, 8
  %2045 = inttoptr i64 %2044 to i32*
  store i32 %2037, i32* %2045
  %2046 = add i64 %2042, 16
  %2047 = inttoptr i64 %2046 to i32*
  store i32 %2040, i32* %2047
  %2048 = add i64 %2014, 7635
  %2049 = add i64 %2014, 105
  %2050 = add i64 %2042, -8
  %2051 = inttoptr i64 %2050 to i64*
  store i64 %2049, i64* %2051
  store i64 %2050, i64* %14, align 8, !tbaa !1240
  %2052 = tail call %struct.Memory* @sub_403230_norm2u3(%struct.State* nonnull %0, i64 %2048, %struct.Memory* %2011)
  %2053 = load i64, i64* %3, align 8
  %2054 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %2055 = sext i32 %2054 to i64
  %2056 = shl nsw i64 %2055, 2
  %2057 = add i64 %2056, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %2058 = inttoptr i64 %2057 to i32*
  %2059 = load i32, i32* %2058
  %2060 = zext i32 %2059 to i64
  %2061 = add i64 %2056, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %2062 = inttoptr i64 %2061 to i32*
  %2063 = load i32, i32* %2062
  %2064 = zext i32 %2063 to i64
  store i64 %2064, i64* %11, align 8, !tbaa !1240
  %2065 = add i64 %2056, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %2066 = inttoptr i64 %2065 to i32*
  %2067 = load i32, i32* %2066
  %2068 = zext i32 %2067 to i64
  store i64 %2068, i64* %10, align 8, !tbaa !1240
  %2069 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  %2070 = sext i8 %2069 to i64
  %2071 = and i64 %2070, 4294967295
  store i64 %2071, i64* %16, align 8, !tbaa !1240
  %2072 = add i64 %2053, 74
  %2073 = load i64, i64* %14, align 8, !tbaa !1240
  %2074 = add i64 %2073, -8
  %2075 = inttoptr i64 %2074 to i64*
  store i64 %2072, i64* %2075
  %2076 = load i64, i64* %17, align 8, !alias.scope !1550, !noalias !1553
  %2077 = inttoptr i64 %2073 to i64*
  %2078 = load i64, i64* %2077
  %2079 = add i64 %2073, 8
  %2080 = inttoptr i64 %2079 to i64*
  %2081 = load i64, i64* %2080
  %2082 = add i64 %2073, 16
  %2083 = inttoptr i64 %2082 to i64*
  %2084 = load i64, i64* %2083
  %2085 = add i64 %2073, 24
  %2086 = inttoptr i64 %2085 to i64*
  %2087 = load i64, i64* %2086
  %2088 = add i64 %2073, 32
  %2089 = inttoptr i64 %2088 to i64*
  %2090 = load i64, i64* %2089
  %2091 = add i64 %2073, 40
  %2092 = inttoptr i64 %2091 to i64*
  %2093 = load i64, i64* %2092
  %2094 = add i64 %2073, 48
  %2095 = inttoptr i64 %2094 to i64*
  %2096 = load i64, i64* %2095
  %2097 = add i64 %2073, 56
  %2098 = inttoptr i64 %2097 to i64*
  %2099 = load i64, i64* %2098
  %2100 = add i64 %2073, 64
  %2101 = inttoptr i64 %2100 to i64*
  %2102 = load i64, i64* %2101
  %2103 = add i64 %2073, 72
  %2104 = inttoptr i64 %2103 to i64*
  %2105 = load i64, i64* %2104
  %2106 = inttoptr i64 %2074 to i64*
  %2107 = load i64, i64* %2106
  store i64 %2107, i64* %3, align 8, !alias.scope !1550, !noalias !1553
  store i64 %2073, i64* %14, align 8, !alias.scope !1550, !noalias !1553
  %2108 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1300), i64 %2060, i64 %2064, i64 %2068, i64 %2071, i64 %2076, i64 %2078, i64 %2081, i64 %2084, i64 %2087, i64 %2090, i64 %2093, i64 %2096, i64 %2099, i64 %2102, i64 %2105), !noalias !1550
  %2109 = load i64, i64* %3, align 8
  %2110 = load i64, i64* %15, align 8
  %2111 = add i64 %2110, -200
  %2112 = inttoptr i64 %2111 to i32*
  %2113 = load i32, i32* %2112
  %2114 = zext i32 %2113 to i64
  store i64 %2114, i64* %12, align 8, !tbaa !1240
  %2115 = add i64 %2110, -368
  %2116 = trunc i64 %2108 to i32
  %2117 = inttoptr i64 %2115 to i32*
  store i32 %2116, i32* %2117
  %2118 = add i64 %2109, 29
  %2119 = load i64, i64* %14, align 8, !tbaa !1240
  %2120 = add i64 %2119, -8
  %2121 = inttoptr i64 %2120 to i64*
  store i64 %2118, i64* %2121
  %2122 = load i64, i64* %1454, align 8, !alias.scope !1555, !noalias !1558
  %2123 = load i64, i64* %1453, align 8, !alias.scope !1555, !noalias !1558
  %2124 = load i64, i64* %16, align 8, !alias.scope !1555, !noalias !1558
  %2125 = load i64, i64* %17, align 8, !alias.scope !1555, !noalias !1558
  %2126 = inttoptr i64 %2119 to i64*
  %2127 = load i64, i64* %2126
  %2128 = add i64 %2119, 8
  %2129 = inttoptr i64 %2128 to i64*
  %2130 = load i64, i64* %2129
  %2131 = add i64 %2119, 16
  %2132 = inttoptr i64 %2131 to i64*
  %2133 = load i64, i64* %2132
  %2134 = add i64 %2119, 24
  %2135 = inttoptr i64 %2134 to i64*
  %2136 = load i64, i64* %2135
  %2137 = add i64 %2119, 32
  %2138 = inttoptr i64 %2137 to i64*
  %2139 = load i64, i64* %2138
  %2140 = add i64 %2119, 40
  %2141 = inttoptr i64 %2140 to i64*
  %2142 = load i64, i64* %2141
  %2143 = add i64 %2119, 48
  %2144 = inttoptr i64 %2143 to i64*
  %2145 = load i64, i64* %2144
  %2146 = add i64 %2119, 56
  %2147 = inttoptr i64 %2146 to i64*
  %2148 = load i64, i64* %2147
  %2149 = add i64 %2119, 64
  %2150 = inttoptr i64 %2149 to i64*
  %2151 = load i64, i64* %2150
  %2152 = add i64 %2119, 72
  %2153 = inttoptr i64 %2152 to i64*
  %2154 = load i64, i64* %2153
  %2155 = inttoptr i64 %2120 to i64*
  %2156 = load i64, i64* %2155
  store i64 %2156, i64* %3, align 8, !alias.scope !1555, !noalias !1558
  store i64 %2119, i64* %14, align 8, !alias.scope !1555, !noalias !1558
  %2157 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1332), i64 %2114, i64 %2122, i64 %2123, i64 %2124, i64 %2125, i64 %2127, i64 %2130, i64 %2133, i64 %2136, i64 %2139, i64 %2142, i64 %2145, i64 %2148, i64 %2151, i64 %2154), !noalias !1555
  %2158 = load i64, i64* %3, align 8
  %2159 = load i64, i64* %15, align 8
  %2160 = add i64 %2159, -372
  %2161 = trunc i64 %2157 to i32
  %2162 = inttoptr i64 %2160 to i32*
  store i32 %2161, i32* %2162
  %2163 = add i64 %2158, 23
  %2164 = load i64, i64* %14, align 8, !tbaa !1240
  %2165 = add i64 %2164, -8
  %2166 = inttoptr i64 %2165 to i64*
  store i64 %2163, i64* %2166
  %2167 = load i64, i64* %612, align 8, !alias.scope !1560, !noalias !1563
  %2168 = load i64, i64* %1454, align 8, !alias.scope !1560, !noalias !1563
  %2169 = load i64, i64* %1453, align 8, !alias.scope !1560, !noalias !1563
  %2170 = load i64, i64* %16, align 8, !alias.scope !1560, !noalias !1563
  %2171 = load i64, i64* %17, align 8, !alias.scope !1560, !noalias !1563
  %2172 = inttoptr i64 %2164 to i64*
  %2173 = load i64, i64* %2172
  %2174 = add i64 %2164, 8
  %2175 = inttoptr i64 %2174 to i64*
  %2176 = load i64, i64* %2175
  %2177 = add i64 %2164, 16
  %2178 = inttoptr i64 %2177 to i64*
  %2179 = load i64, i64* %2178
  %2180 = add i64 %2164, 24
  %2181 = inttoptr i64 %2180 to i64*
  %2182 = load i64, i64* %2181
  %2183 = add i64 %2164, 32
  %2184 = inttoptr i64 %2183 to i64*
  %2185 = load i64, i64* %2184
  %2186 = add i64 %2164, 40
  %2187 = inttoptr i64 %2186 to i64*
  %2188 = load i64, i64* %2187
  %2189 = add i64 %2164, 48
  %2190 = inttoptr i64 %2189 to i64*
  %2191 = load i64, i64* %2190
  %2192 = add i64 %2164, 56
  %2193 = inttoptr i64 %2192 to i64*
  %2194 = load i64, i64* %2193
  %2195 = add i64 %2164, 64
  %2196 = inttoptr i64 %2195 to i64*
  %2197 = load i64, i64* %2196
  %2198 = add i64 %2164, 72
  %2199 = inttoptr i64 %2198 to i64*
  %2200 = load i64, i64* %2199
  %2201 = inttoptr i64 %2165 to i64*
  %2202 = load i64, i64* %2201
  store i64 %2202, i64* %3, align 8, !alias.scope !1560, !noalias !1563
  store i64 %2164, i64* %14, align 8, !alias.scope !1560, !noalias !1563
  %2203 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2606), i64 %2167, i64 %2168, i64 %2169, i64 %2170, i64 %2171, i64 %2173, i64 %2176, i64 %2179, i64 %2182, i64 %2185, i64 %2188, i64 %2191, i64 %2194, i64 %2197, i64 %2200), !noalias !1560
  %2204 = load i64, i64* %15, align 8
  %2205 = add i64 %2204, -112
  %2206 = load i64, i64* %3, align 8
  %2207 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  %2208 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  %2209 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  store i64 %2209, i64* %22, align 8, !tbaa !1240
  %2210 = add i64 %2204, -188
  %2211 = inttoptr i64 %2210 to i32*
  %2212 = load i32, i32* %2211
  %2213 = zext i32 %2212 to i64
  store i64 %2213, i64* %10, align 8, !tbaa !1240
  %2214 = add i64 %2204, -192
  %2215 = inttoptr i64 %2214 to i32*
  %2216 = load i32, i32* %2215
  %2217 = zext i32 %2216 to i64
  store i64 %2217, i64* %16, align 8, !tbaa !1240
  %2218 = add i64 %2204, -196
  %2219 = inttoptr i64 %2218 to i32*
  %2220 = load i32, i32* %2219
  %2221 = add i64 %2204, -48
  %2222 = inttoptr i64 %2221 to i32*
  %2223 = load i32, i32* %2222
  %2224 = add i64 %2204, -384
  %2225 = inttoptr i64 %2224 to i64*
  store i64 %2205, i64* %2225
  store i64 %2207, i64* %13, align 8, !tbaa !1240
  %2226 = add i64 %2204, -388
  %2227 = inttoptr i64 %2226 to i32*
  store i32 %2223, i32* %2227
  store i64 %2208, i64* %12, align 8, !tbaa !1240
  %2228 = add i64 %2204, -392
  %2229 = inttoptr i64 %2228 to i32*
  store i32 %2220, i32* %2229
  store i64 %2209, i64* %11, align 8, !tbaa !1240
  %2230 = inttoptr i64 %2228 to i32*
  %2231 = load i32, i32* %2230
  %2232 = zext i32 %2231 to i64
  store i64 %2232, i64* %17, align 8, !tbaa !1240
  %2233 = inttoptr i64 %2224 to i64*
  %2234 = load i64, i64* %2233
  %2235 = load i64, i64* %14, align 8
  %2236 = inttoptr i64 %2235 to i64*
  store i64 %2234, i64* %2236
  %2237 = inttoptr i64 %2226 to i32*
  %2238 = load i32, i32* %2237
  %2239 = add i64 %2235, 8
  %2240 = inttoptr i64 %2239 to i32*
  store i32 %2238, i32* %2240
  %2241 = add i64 %2204, -396
  %2242 = trunc i64 %2203 to i32
  %2243 = inttoptr i64 %2241 to i32*
  store i32 %2242, i32* %2243
  %2244 = add i64 %2206, 7964
  %2245 = add i64 %2206, 119
  %2246 = add i64 %2235, -8
  %2247 = inttoptr i64 %2246 to i64*
  store i64 %2245, i64* %2247
  store i64 %2246, i64* %14, align 8, !tbaa !1240
  %2248 = tail call %struct.Memory* @sub_403460_resid(%struct.State* nonnull %0, i64 %2244, %struct.Memory* %2052)
  %2249 = load i64, i64* %15, align 8
  %2250 = add i64 %2249, -152
  %2251 = load i64, i64* %3, align 8
  store i64 %2250, i64* %16, align 8, !tbaa !1240
  %2252 = add i64 %2249, -160
  store i64 %2252, i64* %17, align 8, !tbaa !1240
  %2253 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  %2254 = add i64 %2249, -188
  %2255 = inttoptr i64 %2254 to i32*
  %2256 = load i32, i32* %2255
  %2257 = zext i32 %2256 to i64
  store i64 %2257, i64* %12, align 8, !tbaa !1240
  %2258 = add i64 %2249, -192
  %2259 = inttoptr i64 %2258 to i32*
  %2260 = load i32, i32* %2259
  %2261 = zext i32 %2260 to i64
  %2262 = add i64 %2249, -196
  %2263 = inttoptr i64 %2262 to i32*
  %2264 = load i32, i32* %2263
  %2265 = zext i32 %2264 to i64
  store i64 %2265, i64* %10, align 8, !tbaa !1240
  %2266 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %2267 = sext i32 %2266 to i64
  %2268 = shl nsw i64 %2267, 2
  %2269 = add i64 %2268, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %2270 = inttoptr i64 %2269 to i32*
  %2271 = load i32, i32* %2270
  %2272 = add i64 %2268, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %2273 = inttoptr i64 %2272 to i32*
  %2274 = load i32, i32* %2273
  %2275 = zext i32 %2274 to i64
  store i64 %2275, i64* %9, align 8, !tbaa !1240
  %2276 = add i64 %2268, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %2277 = inttoptr i64 %2276 to i32*
  %2278 = load i32, i32* %2277
  %2279 = zext i32 %2278 to i64
  store i64 %2279, i64* %23, align 8, !tbaa !1240
  store i64 %2253, i64* %13, align 8, !tbaa !1240
  store i64 %2261, i64* %11, align 8, !tbaa !1240
  %2280 = load i64, i64* %14, align 8
  %2281 = inttoptr i64 %2280 to i32*
  store i32 %2271, i32* %2281
  %2282 = add i64 %2280, 8
  %2283 = inttoptr i64 %2282 to i32*
  store i32 %2274, i32* %2283
  %2284 = add i64 %2280, 16
  %2285 = inttoptr i64 %2284 to i32*
  store i32 %2278, i32* %2285
  %2286 = add i64 %2251, 7285
  %2287 = add i64 %2251, 110
  %2288 = add i64 %2280, -8
  %2289 = inttoptr i64 %2288 to i64*
  store i64 %2287, i64* %2289
  store i64 %2288, i64* %14, align 8, !tbaa !1240
  %2290 = tail call %struct.Memory* @sub_403230_norm2u3(%struct.State* nonnull %0, i64 %2286, %struct.Memory* %2248)
  %2291 = load i64, i64* %15, align 8
  %2292 = add i64 %2291, -144
  %2293 = load i64, i64* %3, align 8
  store i64 %2292, i64* %16, align 8, !tbaa !1240
  %2294 = add i64 %2291, -112
  store i64 %2294, i64* %10, align 8, !tbaa !1240
  %2295 = add i64 %2291, -152
  %2296 = inttoptr i64 %2295 to double*
  %2297 = load double, double* %2296
  %2298 = add i64 %2291, -168
  %2299 = inttoptr i64 %2298 to double*
  store double %2297, double* %2299
  %2300 = add i64 %2291, -160
  %2301 = inttoptr i64 %2300 to double*
  %2302 = load double, double* %2301
  store double %2302, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %2303 = add i64 %2291, -176
  %2304 = inttoptr i64 %2303 to double*
  store double %2302, double* %2304
  %2305 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  store i64 %2305, i64* %13, align 8, !tbaa !1240
  %2306 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  store i64 %2306, i64* %12, align 8, !tbaa !1240
  %2307 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  store i64 %2307, i64* %11, align 8, !tbaa !1240
  %2308 = add i64 %2291, -188
  %2309 = inttoptr i64 %2308 to i32*
  %2310 = load i32, i32* %2309
  %2311 = zext i32 %2310 to i64
  store i64 %2311, i64* %17, align 8, !tbaa !1240
  %2312 = add i64 %2291, -192
  %2313 = inttoptr i64 %2312 to i32*
  %2314 = load i32, i32* %2313
  %2315 = add i64 %2291, -196
  %2316 = inttoptr i64 %2315 to i32*
  %2317 = load i32, i32* %2316
  %2318 = zext i32 %2317 to i64
  store i64 %2318, i64* %19, align 8, !tbaa !1240
  %2319 = load i64, i64* %14, align 8
  %2320 = inttoptr i64 %2319 to i32*
  store i32 %2314, i32* %2320
  %2321 = add i64 %2319, 8
  %2322 = inttoptr i64 %2321 to i32*
  store i32 %2317, i32* %2322
  %2323 = add i64 %2293, 9079
  %2324 = add i64 %2293, 100
  %2325 = add i64 %2319, -8
  %2326 = inttoptr i64 %2325 to i64*
  store i64 %2324, i64* %2326
  store i64 %2325, i64* %14, align 8, !tbaa !1240
  %2327 = tail call %struct.Memory* @sub_4039a0_mg3P(%struct.State* nonnull %0, i64 %2323, %struct.Memory* %2290)
  %2328 = load i64, i64* %15, align 8
  %2329 = add i64 %2328, -112
  %2330 = load i64, i64* %3, align 8
  %2331 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  %2332 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  store i64 %2332, i64* %12, align 8, !tbaa !1240
  %2333 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  %2334 = add i64 %2328, -188
  %2335 = inttoptr i64 %2334 to i32*
  %2336 = load i32, i32* %2335
  %2337 = zext i32 %2336 to i64
  %2338 = add i64 %2328, -192
  %2339 = inttoptr i64 %2338 to i32*
  %2340 = load i32, i32* %2339
  %2341 = zext i32 %2340 to i64
  store i64 %2341, i64* %16, align 8, !tbaa !1240
  %2342 = add i64 %2328, -196
  %2343 = inttoptr i64 %2342 to i32*
  %2344 = load i32, i32* %2343
  %2345 = zext i32 %2344 to i64
  store i64 %2345, i64* %17, align 8, !tbaa !1240
  %2346 = add i64 %2328, -48
  %2347 = inttoptr i64 %2346 to i32*
  %2348 = load i32, i32* %2347
  %2349 = add i64 %2328, -408
  %2350 = inttoptr i64 %2349 to i64*
  store i64 %2333, i64* %2350
  store i64 %2331, i64* %13, align 8, !tbaa !1240
  %2351 = inttoptr i64 %2349 to i64*
  %2352 = load i64, i64* %2351
  store i64 %2352, i64* %11, align 8, !tbaa !1240
  %2353 = add i64 %2328, -416
  %2354 = inttoptr i64 %2353 to i64*
  store i64 %2329, i64* %2354
  store i64 %2337, i64* %10, align 8, !tbaa !1240
  %2355 = inttoptr i64 %2353 to i64*
  %2356 = load i64, i64* %2355
  %2357 = load i64, i64* %14, align 8
  %2358 = inttoptr i64 %2357 to i64*
  store i64 %2356, i64* %2358
  %2359 = add i64 %2357, 8
  %2360 = inttoptr i64 %2359 to i32*
  store i32 %2348, i32* %2360
  %2361 = add i64 %2330, 7635
  %2362 = add i64 %2330, 99
  %2363 = add i64 %2357, -8
  %2364 = inttoptr i64 %2363 to i64*
  store i64 %2362, i64* %2364
  store i64 %2363, i64* %14, align 8, !tbaa !1240
  %2365 = tail call %struct.Memory* @sub_403460_resid(%struct.State* nonnull %0, i64 %2361, %struct.Memory* %2327)
  %2366 = load i64, i64* %15, align 8
  %2367 = add i64 %2366, -188
  %2368 = load i64, i64* %3, align 8
  store i64 %2367, i64* %13, align 8, !tbaa !1240
  %2369 = add i64 %2366, -192
  store i64 %2369, i64* %12, align 8, !tbaa !1240
  %2370 = add i64 %2366, -196
  store i64 %2370, i64* %11, align 8, !tbaa !1240
  %2371 = add i64 %2368, 2864
  %2372 = add i64 %2368, 26
  %2373 = load i64, i64* %14, align 8, !tbaa !1240
  %2374 = add i64 %2373, -8
  %2375 = inttoptr i64 %2374 to i64*
  store i64 %2372, i64* %2375
  store i64 %2374, i64* %14, align 8, !tbaa !1240
  %2376 = tail call %struct.Memory* @sub_402220_setup(%struct.State* nonnull %0, i64 %2371, %struct.Memory* %2365)
  %2377 = load i64, i64* %3, align 8
  %2378 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  %2379 = load i64, i64* %15, align 8
  %2380 = add i64 %2379, -188
  %2381 = inttoptr i64 %2380 to i32*
  %2382 = load i32, i32* %2381
  %2383 = zext i32 %2382 to i64
  store i64 %2383, i64* %12, align 8, !tbaa !1240
  %2384 = add i64 %2379, -192
  %2385 = inttoptr i64 %2384 to i32*
  %2386 = load i32, i32* %2385
  %2387 = zext i32 %2386 to i64
  %2388 = add i64 %2379, -196
  %2389 = inttoptr i64 %2388 to i32*
  %2390 = load i32, i32* %2389
  %2391 = zext i32 %2390 to i64
  store i64 %2391, i64* %10, align 8, !tbaa !1240
  store i64 %2378, i64* %13, align 8, !tbaa !1240
  store i64 %2387, i64* %11, align 8, !tbaa !1240
  %2392 = add i64 %2377, 4214
  %2393 = add i64 %2377, 36
  %2394 = load i64, i64* %14, align 8, !tbaa !1240
  %2395 = add i64 %2394, -8
  %2396 = inttoptr i64 %2395 to i64*
  store i64 %2393, i64* %2396
  store i64 %2395, i64* %14, align 8, !tbaa !1240
  %2397 = tail call %struct.Memory* @sub_402780_zero3(%struct.State* nonnull %0, i64 %2392, %struct.Memory* %2376)
  %2398 = load i64, i64* %3, align 8
  %2399 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  store i64 %2399, i64* %13, align 8, !tbaa !1240
  %2400 = load i64, i64* %15, align 8
  %2401 = add i64 %2400, -188
  %2402 = inttoptr i64 %2401 to i32*
  %2403 = load i32, i32* %2402
  %2404 = zext i32 %2403 to i64
  store i64 %2404, i64* %12, align 8, !tbaa !1240
  %2405 = add i64 %2400, -192
  %2406 = inttoptr i64 %2405 to i32*
  %2407 = load i32, i32* %2406
  %2408 = zext i32 %2407 to i64
  store i64 %2408, i64* %11, align 8, !tbaa !1240
  %2409 = add i64 %2400, -196
  %2410 = inttoptr i64 %2409 to i32*
  %2411 = load i32, i32* %2410
  %2412 = zext i32 %2411 to i64
  store i64 %2412, i64* %10, align 8, !tbaa !1240
  %2413 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %2414 = sext i32 %2413 to i64
  %2415 = shl nsw i64 %2414, 2
  %2416 = add i64 %2415, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %2417 = inttoptr i64 %2416 to i32*
  %2418 = load i32, i32* %2417
  %2419 = zext i32 %2418 to i64
  store i64 %2419, i64* %16, align 8, !tbaa !1240
  %2420 = add i64 %2415, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %2421 = inttoptr i64 %2420 to i32*
  %2422 = load i32, i32* %2421
  %2423 = zext i32 %2422 to i64
  store i64 %2423, i64* %17, align 8, !tbaa !1240
  %2424 = add i64 %2400, -48
  %2425 = inttoptr i64 %2424 to i32*
  %2426 = load i32, i32* %2425
  %2427 = load i64, i64* %14, align 8
  %2428 = inttoptr i64 %2427 to i32*
  store i32 %2426, i32* %2428
  %2429 = add i64 %2398, 4402
  %2430 = add i64 %2398, 69
  %2431 = add i64 %2427, -8
  %2432 = inttoptr i64 %2431 to i64*
  store i64 %2430, i64* %2432
  store i64 %2431, i64* %14, align 8, !tbaa !1240
  %2433 = tail call %struct.Memory* @sub_402860_zran3(%struct.State* nonnull %0, i64 %2429, %struct.Memory* %2397)
  %2434 = load i64, i64* %3, align 8
  store i64 0, i64* %13, align 8, !tbaa !1240
  %2435 = add i64 %2434, -2771
  %2436 = add i64 %2434, 7
  %2437 = load i64, i64* %14, align 8, !tbaa !1240
  %2438 = add i64 %2437, -8
  %2439 = inttoptr i64 %2438 to i64*
  store i64 %2436, i64* %2439
  store i64 %2438, i64* %14, align 8, !tbaa !1240
  %2440 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %2435, %struct.Memory* %2433)
  %2441 = load i64, i64* %3, align 8
  store i64 0, i64* %13, align 8, !tbaa !1240
  store i8 0, i8* %47, align 1, !tbaa !1246
  store i8 1, i8* %48, align 1, !tbaa !1260
  store i8 1, i8* %50, align 1, !tbaa !1262
  store i8 0, i8* %51, align 1, !tbaa !1263
  store i8 0, i8* %52, align 1, !tbaa !1264
  store i8 0, i8* %49, align 1, !tbaa !1261
  %2442 = add i64 %2441, -2698
  %2443 = add i64 %2441, 7
  %2444 = load i64, i64* %14, align 8, !tbaa !1240
  %2445 = add i64 %2444, -8
  %2446 = inttoptr i64 %2445 to i64*
  store i64 %2443, i64* %2446
  store i64 %2445, i64* %14, align 8, !tbaa !1240
  %2447 = tail call %struct.Memory* @sub_400cf0_timer_read(%struct.State* nonnull %0, i64 %2442, %struct.Memory* %2440)
  %2448 = load i64, i64* %3, align 8
  %2449 = load i64, i64* %15, align 8
  %2450 = add i64 %2449, -72
  %2451 = load double, double* %630, align 1
  %2452 = inttoptr i64 %2450 to double*
  store double %2451, double* %2452
  %2453 = inttoptr i64 %2450 to double*
  %2454 = load double, double* %2453
  store double %2454, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %2455 = add i64 %2448, 27
  %2456 = load i64, i64* %14, align 8, !tbaa !1240
  %2457 = add i64 %2456, -8
  %2458 = inttoptr i64 %2457 to i64*
  store i64 %2455, i64* %2458
  %2459 = load i64, i64* %612, align 8, !alias.scope !1565, !noalias !1568
  %2460 = load i64, i64* %1454, align 8, !alias.scope !1565, !noalias !1568
  %2461 = load i64, i64* %1453, align 8, !alias.scope !1565, !noalias !1568
  %2462 = load i64, i64* %16, align 8, !alias.scope !1565, !noalias !1568
  %2463 = load i64, i64* %17, align 8, !alias.scope !1565, !noalias !1568
  %2464 = inttoptr i64 %2456 to i64*
  %2465 = load i64, i64* %2464
  %2466 = add i64 %2456, 8
  %2467 = inttoptr i64 %2466 to i64*
  %2468 = load i64, i64* %2467
  %2469 = add i64 %2456, 16
  %2470 = inttoptr i64 %2469 to i64*
  %2471 = load i64, i64* %2470
  %2472 = add i64 %2456, 24
  %2473 = inttoptr i64 %2472 to i64*
  %2474 = load i64, i64* %2473
  %2475 = add i64 %2456, 32
  %2476 = inttoptr i64 %2475 to i64*
  %2477 = load i64, i64* %2476
  %2478 = add i64 %2456, 40
  %2479 = inttoptr i64 %2478 to i64*
  %2480 = load i64, i64* %2479
  %2481 = add i64 %2456, 48
  %2482 = inttoptr i64 %2481 to i64*
  %2483 = load i64, i64* %2482
  %2484 = add i64 %2456, 56
  %2485 = inttoptr i64 %2484 to i64*
  %2486 = load i64, i64* %2485
  %2487 = add i64 %2456, 64
  %2488 = inttoptr i64 %2487 to i64*
  %2489 = load i64, i64* %2488
  %2490 = add i64 %2456, 72
  %2491 = inttoptr i64 %2490 to i64*
  %2492 = load i64, i64* %2491
  %2493 = inttoptr i64 %2457 to i64*
  %2494 = load i64, i64* %2493
  store i64 %2494, i64* %3, align 8, !alias.scope !1565, !noalias !1568
  store i64 %2456, i64* %14, align 8, !alias.scope !1565, !noalias !1568
  %2495 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1350), i64 %2459, i64 %2460, i64 %2461, i64 %2462, i64 %2463, i64 %2465, i64 %2468, i64 %2471, i64 %2474, i64 %2477, i64 %2480, i64 %2483, i64 %2486, i64 %2489, i64 %2492), !noalias !1565
  %2496 = load i64, i64* %15, align 8
  %2497 = add i64 %2496, -232
  %2498 = load i64, i64* %3, align 8
  %2499 = inttoptr i64 %2497 to i32*
  store i32 1, i32* %2499
  %2500 = add i64 %2496, -420
  %2501 = trunc i64 %2495 to i32
  %2502 = add i64 %2498, 16
  %2503 = inttoptr i64 %2500 to i32*
  store i32 %2501, i32* %2503
  br label %block_4017ac

block_402014:                                     ; preds = %block_401e90
  store i64 1, i64* %13, align 8, !tbaa !1240
  %2504 = add i64 %1635, -4900
  %2505 = add i64 %1635, 10
  %2506 = load i64, i64* %14, align 8, !tbaa !1240
  %2507 = add i64 %2506, -8
  %2508 = inttoptr i64 %2507 to i64*
  store i64 %2505, i64* %2508
  store i64 %2507, i64* %14, align 8, !tbaa !1240
  %2509 = tail call %struct.Memory* @sub_400cf0_timer_read(%struct.State* nonnull %0, i64 %2504, %struct.Memory* %1622)
  %2510 = load i64, i64* %3, align 8
  store i32 0, i32* %1766, align 1, !tbaa !1481
  store i32 0, i32* %1768, align 1, !tbaa !1481
  store i32 0, i32* %1769, align 1, !tbaa !1481
  store i32 0, i32* %1771, align 1, !tbaa !1481
  %2511 = load i64, i64* %15, align 8
  %2512 = add i64 %2511, -328
  %2513 = load double, double* %630, align 1
  %2514 = inttoptr i64 %2512 to double*
  store double %2513, double* %2514
  %2515 = inttoptr i64 %2512 to double*
  %2516 = load double, double* %2515
  store double %2516, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %2517 = add i64 %2510, 23
  store i64 %2517, i64* %3, align 8
  %2518 = load double, double* %635, align 1
  %2519 = fcmp uno double %2516, %2518
  br i1 %2519, label %2520, label %2531

; <label>:2520:                                   ; preds = %block_402014
  %2521 = fadd double %2516, %2518
  %2522 = bitcast double %2521 to i64
  %2523 = and i64 %2522, 9221120237041090560
  %2524 = icmp eq i64 %2523, 9218868437227405312
  %2525 = and i64 %2522, 2251799813685247
  %2526 = icmp ne i64 %2525, 0
  %2527 = and i1 %2524, %2526
  br i1 %2527, label %2528, label %2537

; <label>:2528:                                   ; preds = %2520
  %2529 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2517, %struct.Memory* %2509) #14
  %2530 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit267

; <label>:2531:                                   ; preds = %block_402014
  %2532 = fcmp ogt double %2516, %2518
  br i1 %2532, label %2537, label %2533

; <label>:2533:                                   ; preds = %2531
  %2534 = fcmp olt double %2516, %2518
  br i1 %2534, label %2537, label %2535

; <label>:2535:                                   ; preds = %2533
  %2536 = fcmp oeq double %2516, %2518
  br i1 %2536, label %2537, label %2540

; <label>:2537:                                   ; preds = %2535, %2533, %2531, %2520
  %2538 = phi i8 [ 0, %2531 ], [ 0, %2533 ], [ 1, %2535 ], [ 1, %2520 ]
  %2539 = phi i8 [ 0, %2531 ], [ 0, %2533 ], [ 0, %2535 ], [ 1, %2520 ]
  store i8 %2538, i8* %50, align 1, !tbaa !1494
  store i8 %2539, i8* %48, align 1, !tbaa !1494
  br label %2540

; <label>:2540:                                   ; preds = %2537, %2535
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit267

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit267: ; preds = %2540, %2528
  %2541 = phi i64 [ %2530, %2528 ], [ %2517, %2540 ]
  %2542 = phi %struct.Memory* [ %2529, %2528 ], [ %2509, %2540 ]
  %2543 = add i64 %2541, 28
  %2544 = add i64 %2541, 6
  %2545 = load i8, i8* %50, align 1, !tbaa !1262
  %2546 = icmp eq i8 %2545, 0
  %2547 = select i1 %2546, i64 %2543, i64 %2544
  br i1 %2546, label %block_402051, label %block_40203b

block_4019ed:                                     ; preds = %block_4019df
  store i64 5, i64* %13, align 8, !tbaa !1240
  %2548 = add i64 %675, -3485
  %2549 = add i64 %675, 10
  %2550 = load i64, i64* %14, align 8, !tbaa !1240
  %2551 = add i64 %2550, -8
  %2552 = inttoptr i64 %2551 to i64*
  store i64 %2549, i64* %2552
  store i64 %2551, i64* %14, align 8, !tbaa !1240
  %2553 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %2548, %struct.Memory* %671)
  %2554 = load i64, i64* %3, align 8
  br label %block_4019f7

block_402072:                                     ; preds = %block_402051, %block_402143
  %2555 = phi i64 [ %2867, %block_402051 ], [ %542, %block_402143 ]
  %2556 = phi i64 [ %2861, %block_402051 ], [ %534, %block_402143 ]
  %2557 = phi %struct.Memory* [ %2819, %block_402051 ], [ %536, %block_402143 ]
  %2558 = add i64 %2556, -232
  %2559 = inttoptr i64 %2558 to i32*
  %2560 = load i32, i32* %2559
  %2561 = add i32 %2560, -10
  %2562 = icmp ult i32 %2560, 10
  %2563 = zext i1 %2562 to i8
  store i8 %2563, i8* %47, align 1, !tbaa !1246
  %2564 = and i32 %2561, 255
  %2565 = tail call i32 @llvm.ctpop.i32(i32 %2564) #11
  %2566 = trunc i32 %2565 to i8
  %2567 = and i8 %2566, 1
  %2568 = xor i8 %2567, 1
  store i8 %2568, i8* %48, align 1, !tbaa !1260
  %2569 = xor i32 %2561, %2560
  %2570 = lshr i32 %2569, 4
  %2571 = trunc i32 %2570 to i8
  %2572 = and i8 %2571, 1
  store i8 %2572, i8* %49, align 1, !tbaa !1261
  %2573 = icmp eq i32 %2561, 0
  %2574 = zext i1 %2573 to i8
  store i8 %2574, i8* %50, align 1, !tbaa !1262
  %2575 = lshr i32 %2561, 31
  %2576 = trunc i32 %2575 to i8
  store i8 %2576, i8* %51, align 1, !tbaa !1263
  %2577 = lshr i32 %2560, 31
  %2578 = xor i32 %2575, %2577
  %2579 = add nuw nsw i32 %2578, %2577
  %2580 = icmp eq i32 %2579, 2
  %2581 = zext i1 %2580 to i8
  store i8 %2581, i8* %52, align 1, !tbaa !1264
  %2582 = icmp ne i8 %2576, 0
  %2583 = xor i1 %2582, %2580
  %2584 = select i1 %2583, i64 13, i64 234
  %2585 = add i64 %2555, %2584
  br i1 %2583, label %block_40207f, label %block_40215c

block_401a71:                                     ; preds = %block_401a67, %block_4019f7
  %2586 = phi i64 [ %1361, %block_4019f7 ], [ %2733, %block_401a67 ]
  %2587 = phi %struct.Memory* [ %1356, %block_4019f7 ], [ %2732, %block_401a67 ]
  %2588 = load i64, i64* %15, align 8
  %2589 = add i64 %2588, -52
  %2590 = inttoptr i64 %2589 to i32*
  %2591 = load i32, i32* %2590
  %2592 = add i32 %2591, 1
  %2593 = inttoptr i64 %2589 to i32*
  store i32 %2592, i32* %2593
  %2594 = add i64 %2586, -362
  br label %block_401907

block_400f97:                                     ; preds = %block_400fac, %block_400f2b
  %2595 = phi i64 [ %731, %block_400f2b ], [ %3346, %block_400fac ]
  %2596 = phi i64 [ %727, %block_400f2b ], [ %3347, %block_400fac ]
  %2597 = phi %struct.Memory* [ %545, %block_400f2b ], [ %2597, %block_400fac ]
  %2598 = add i64 %2596, -336
  %2599 = inttoptr i64 %2598 to i64*
  %2600 = load i64, i64* %2599
  %2601 = add i64 %2595, 12
  %2602 = load i64, i64* %14, align 8, !tbaa !1240
  %2603 = add i64 %2602, -8
  %2604 = inttoptr i64 %2603 to i64*
  store i64 %2601, i64* %2604
  %2605 = inttoptr i64 %2603 to i64*
  %2606 = load i64, i64* %2605
  store i64 %2606, i64* %3, align 8, !alias.scope !1570, !noalias !1573
  store i64 %2602, i64* %14, align 8, !alias.scope !1570, !noalias !1573
  %2607 = tail call i64 @fgetc(i64 %2600), !noalias !1570
  %2608 = trunc i64 %2607 to i32
  %2609 = load i64, i64* %3, align 8
  %2610 = add i32 %2608, -10
  %2611 = icmp eq i32 %2610, 0
  %2612 = select i1 %2611, i64 14, i64 9
  %2613 = add i64 %2609, %2612
  br i1 %2611, label %block_400fb1, label %block_400fac

block_401d81:                                     ; preds = %block_401cbe, %block_401d22
  %2614 = phi i64 [ %506, %block_401d22 ], [ %1127, %block_401cbe ]
  %2615 = phi i64 [ %510, %block_401d22 ], [ %1132, %block_401cbe ]
  %2616 = phi %struct.Memory* [ %918, %block_401d22 ], [ %918, %block_401cbe ]
  %2617 = add i64 %2615, 92
  br label %block_401ddd

block_401356:                                     ; preds = %block_401345, %block_4012f4, %block_401334
  %2618 = phi i64 [ %1136, %block_401345 ], [ %665, %block_4012f4 ], [ %363, %block_401334 ]
  %2619 = bitcast [32 x %union.VectorReg]* %24 to i32*
  store i32 0, i32* %2619, align 1, !tbaa !1481
  %2620 = getelementptr inbounds i8, i8* %627, i64 4
  %2621 = bitcast i8* %2620 to i32*
  store i32 0, i32* %2621, align 1, !tbaa !1481
  %2622 = bitcast i64* %631 to i32*
  store i32 0, i32* %2622, align 1, !tbaa !1481
  %2623 = getelementptr inbounds i8, i8* %627, i64 12
  %2624 = bitcast i8* %2623 to i32*
  store i32 0, i32* %2624, align 1, !tbaa !1481
  %2625 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 856) to double*)
  store double %2625, double* %635, align 1, !tbaa !1244
  store double 0.000000e+00, double* %637, align 1, !tbaa !1244
  %2626 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 864) to double*)
  store double %2626, double* %653, align 1, !tbaa !1244
  %2627 = bitcast i64* %639 to double*
  store double 0.000000e+00, double* %2627, align 1, !tbaa !1244
  %2628 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 872) to double*)
  store double %2628, double* %647, align 1, !tbaa !1244
  store double 0.000000e+00, double* %649, align 1, !tbaa !1244
  %2629 = load i64, i64* %15, align 8
  %2630 = add i64 %2629, -144
  %2631 = inttoptr i64 %2630 to double*
  store double %2628, double* %2631
  %2632 = add i64 %2629, -136
  %2633 = inttoptr i64 %2632 to double*
  store double %2626, double* %2633
  %2634 = add i64 %2629, -128
  %2635 = inttoptr i64 %2634 to double*
  store double %2625, double* %2635
  %2636 = add i64 %2629, -120
  %2637 = load double, double* %630, align 1
  %2638 = inttoptr i64 %2636 to double*
  store double %2637, double* %2638
  %2639 = add i64 %2618, 111
  br label %block_4013c5

block_401c6f:                                     ; preds = %block_401c6a, %block_401bb3
  %2640 = phi i64 [ %1927, %block_401c6a ], [ %114, %block_401bb3 ]
  %2641 = phi i8 [ %1928, %block_401c6a ], [ %2871, %block_401bb3 ]
  %2642 = phi i64 [ %1932, %block_401c6a ], [ %115, %block_401bb3 ]
  %2643 = phi i64 [ 5, %block_401c6a ], [ 172, %block_401bb3 ]
  %2644 = phi %struct.Memory* [ %1931, %block_401c6a ], [ %1763, %block_401bb3 ]
  %2645 = add i64 %2642, %2643
  br label %block_401c74

block_40117d:                                     ; preds = %block_401167
  %2646 = add i64 %516, -200
  %2647 = inttoptr i64 %2646 to i32*
  %2648 = load i32, i32* %2647
  %2649 = add i32 %2648, -4
  %2650 = icmp eq i32 %2649, 0
  %2651 = select i1 %2650, i64 13, i64 26
  %2652 = add i64 %1366, %2651
  br i1 %2650, label %block_40118a, label %block_401197

block_40106b:                                     ; preds = %block_400e91
  %2653 = add i64 %1510, 17
  %2654 = load i64, i64* %14, align 8, !tbaa !1240
  %2655 = add i64 %2654, -8
  %2656 = inttoptr i64 %2655 to i64*
  store i64 %2653, i64* %2656
  %2657 = load i64, i64* %612, align 8, !alias.scope !1575, !noalias !1578
  %2658 = load i64, i64* %1454, align 8, !alias.scope !1575, !noalias !1578
  %2659 = load i64, i64* %1453, align 8, !alias.scope !1575, !noalias !1578
  %2660 = load i64, i64* %16, align 8, !alias.scope !1575, !noalias !1578
  %2661 = load i64, i64* %17, align 8, !alias.scope !1575, !noalias !1578
  %2662 = inttoptr i64 %2654 to i64*
  %2663 = load i64, i64* %2662
  %2664 = add i64 %2654, 8
  %2665 = inttoptr i64 %2664 to i64*
  %2666 = load i64, i64* %2665
  %2667 = add i64 %2654, 16
  %2668 = inttoptr i64 %2667 to i64*
  %2669 = load i64, i64* %2668
  %2670 = add i64 %2654, 24
  %2671 = inttoptr i64 %2670 to i64*
  %2672 = load i64, i64* %2671
  %2673 = add i64 %2654, 32
  %2674 = inttoptr i64 %2673 to i64*
  %2675 = load i64, i64* %2674
  %2676 = add i64 %2654, 40
  %2677 = inttoptr i64 %2676 to i64*
  %2678 = load i64, i64* %2677
  %2679 = add i64 %2654, 48
  %2680 = inttoptr i64 %2679 to i64*
  %2681 = load i64, i64* %2680
  %2682 = add i64 %2654, 56
  %2683 = inttoptr i64 %2682 to i64*
  %2684 = load i64, i64* %2683
  %2685 = add i64 %2654, 64
  %2686 = inttoptr i64 %2685 to i64*
  %2687 = load i64, i64* %2686
  %2688 = add i64 %2654, 72
  %2689 = inttoptr i64 %2688 to i64*
  %2690 = load i64, i64* %2689
  %2691 = inttoptr i64 %2655 to i64*
  %2692 = load i64, i64* %2691
  store i64 %2692, i64* %3, align 8, !alias.scope !1575, !noalias !1578
  store i64 %2654, i64* %14, align 8, !alias.scope !1575, !noalias !1578
  %2693 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1258), i64 %2657, i64 %2658, i64 %2659, i64 %2660, i64 %2661, i64 %2663, i64 %2666, i64 %2669, i64 %2672, i64 %2675, i64 %2678, i64 %2681, i64 %2684, i64 %2687, i64 %2690), !noalias !1575
  %2694 = load i64, i64* %3, align 8
  store i32 8, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %2695 = load i64, i64* %15, align 8
  %2696 = add i64 %2695, -200
  %2697 = inttoptr i64 %2696 to i32*
  store i32 4, i32* %2697
  %2698 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %2699 = sext i32 %2698 to i64
  %2700 = shl nsw i64 %2699, 2
  %2701 = add i64 %2700, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %2702 = inttoptr i64 %2701 to i32*
  store i32 256, i32* %2702
  %2703 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %2704 = sext i32 %2703 to i64
  %2705 = shl nsw i64 %2704, 2
  %2706 = add i64 %2705, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %2707 = inttoptr i64 %2706 to i32*
  store i32 256, i32* %2707
  %2708 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %2709 = sext i32 %2708 to i64
  %2710 = shl nsw i64 %2709, 2
  %2711 = add i64 %2710, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %2712 = inttoptr i64 %2711 to i32*
  store i32 256, i32* %2712
  %2713 = add i64 %2695, -232
  %2714 = inttoptr i64 %2713 to i32*
  store i32 0, i32* %2714
  %2715 = add i64 %2695, -364
  %2716 = trunc i64 %2693 to i32
  %2717 = add i64 %2694, 94
  %2718 = inttoptr i64 %2715 to i32*
  store i32 %2716, i32* %2718
  br label %block_4010da

block_40186a:                                     ; preds = %block_4017fa
  store i64 5, i64* %13, align 8, !tbaa !1240
  %2719 = add i64 %3345, -3018
  %2720 = add i64 %3345, 10
  %2721 = load i64, i64* %14, align 8, !tbaa !1240
  %2722 = add i64 %2721, -8
  %2723 = inttoptr i64 %2722 to i64*
  store i64 %2720, i64* %2723
  store i64 %2722, i64* %14, align 8, !tbaa !1240
  %2724 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %2719, %struct.Memory* %3340)
  %2725 = load i64, i64* %3, align 8
  br label %block_401874

block_40215c:                                     ; preds = %block_402072
  %2726 = add i64 %2585, 5
  br label %block_402161

block_401a67:                                     ; preds = %block_4019f7
  store i64 5, i64* %13, align 8, !tbaa !1240
  %2727 = add i64 %1361, -3527
  %2728 = add i64 %1361, 10
  %2729 = load i64, i64* %14, align 8, !tbaa !1240
  %2730 = add i64 %2729, -8
  %2731 = inttoptr i64 %2730 to i64*
  store i64 %2728, i64* %2731
  store i64 %2730, i64* %14, align 8, !tbaa !1240
  %2732 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %2727, %struct.Memory* %1356)
  %2733 = load i64, i64* %3, align 8
  br label %block_401a71

block_40192f:                                     ; preds = %block_401920
  %2734 = add i64 %563, -436
  %2735 = inttoptr i64 %2734 to i32*
  store i32 5, i32* %2735
  store i64 %568, i64* %8, align 8, !tbaa !1240
  %2736 = sext i32 %567 to i64
  %2737 = lshr i64 %2736, 32
  store i64 %2737, i64* %1454, align 8, !tbaa !1240
  %2738 = inttoptr i64 %2734 to i32*
  %2739 = load i32, i32* %2738
  %2740 = zext i32 %2739 to i64
  store i64 %2740, i64* %10, align 8, !tbaa !1240
  %2741 = add i64 %3349, 25
  store i64 %2741, i64* %3, align 8
  %2742 = sext i32 %2739 to i64
  %2743 = shl nuw i64 %2737, 32
  %2744 = or i64 %2743, %568
  %2745 = sdiv i64 %2744, %2742
  %2746 = shl i64 %2745, 32
  %2747 = ashr exact i64 %2746, 32
  %2748 = icmp eq i64 %2745, %2747
  br i1 %2748, label %2753, label %2749

; <label>:2749:                                   ; preds = %block_40192f
  %2750 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2741, %struct.Memory* %564) #14
  %2751 = load i32, i32* %7, align 4
  %2752 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:2753:                                   ; preds = %block_40192f
  %2754 = srem i64 %2744, %2742
  %2755 = and i64 %2754, 4294967295
  store i64 %2755, i64* %11, align 8, !tbaa !1240
  %2756 = trunc i64 %2754 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %2753, %2749
  %2757 = phi i64 [ %2752, %2749 ], [ %2741, %2753 ]
  %2758 = phi i32 [ %2751, %2749 ], [ %2756, %2753 ]
  %2759 = phi %struct.Memory* [ %2750, %2749 ], [ %564, %2753 ]
  %2760 = icmp eq i32 %2758, 0
  %2761 = select i1 %2760, i64 9, i64 35
  %2762 = add i64 %2757, %2761
  br i1 %2760, label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit.block_401951_crit_edge, label %block_40196b

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit.block_401951_crit_edge: ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %2763 = load i64, i64* %15, align 8
  br label %block_401951

block_401c65:                                     ; preds = %block_401c25, %block_401c5b, %block_401bff
  %2764 = phi i64 [ %3176, %block_401c5b ], [ %3205, %block_401c25 ], [ %66, %block_401bff ]
  %2765 = phi i8 [ %3155, %block_401c5b ], [ %3218, %block_401c25 ], [ %325, %block_401bff ]
  %2766 = phi i64 [ %3179, %block_401c5b ], [ %3207, %block_401c25 ], [ %67, %block_401bff ]
  %2767 = phi i64 [ 5, %block_401c5b ], [ 5, %block_401c25 ], [ 86, %block_401bff ]
  %2768 = phi %struct.Memory* [ %3178, %block_401c5b ], [ %1763, %block_401c25 ], [ %1763, %block_401bff ]
  %2769 = add i64 %2766, %2767
  br label %block_401c6a

block_401b7c:                                     ; preds = %block_401b56
  store i64 %3405, i64* %8, align 8, !tbaa !1240
  %2770 = add nsw i32 %3406, -87
  %2771 = icmp ult i8 %3403, 87
  %2772 = zext i1 %2771 to i8
  store i8 %2772, i8* %47, align 1, !tbaa !1246
  %2773 = and i32 %2770, 255
  %2774 = tail call i32 @llvm.ctpop.i32(i32 %2773) #11
  %2775 = trunc i32 %2774 to i8
  %2776 = and i8 %2775, 1
  %2777 = xor i8 %2776, 1
  store i8 %2777, i8* %48, align 1, !tbaa !1260
  %2778 = xor i32 %3415, %2770
  %2779 = lshr i32 %2778, 4
  %2780 = trunc i32 %2779 to i8
  %2781 = and i8 %2780, 1
  store i8 %2781, i8* %49, align 1, !tbaa !1261
  %2782 = icmp eq i32 %2770, 0
  %2783 = zext i1 %2782 to i8
  store i8 %2783, i8* %50, align 1, !tbaa !1262
  %2784 = lshr i32 %2770, 31
  %2785 = trunc i32 %2784 to i8
  store i8 %2785, i8* %51, align 1, !tbaa !1263
  %2786 = xor i32 %2784, %3424
  %2787 = add nuw nsw i32 %2786, %3424
  %2788 = icmp eq i32 %2787, 2
  %2789 = zext i1 %2788 to i8
  store i8 %2789, i8* %52, align 1, !tbaa !1264
  %2790 = select i1 %2782, i64 17, i64 38
  %2791 = add i64 %3430, %2790
  br i1 %2782, label %block_401b8d, label %block_401ba2

block_401263:                                     ; preds = %block_401230, %block_401249
  %2792 = phi i64 [ %3184, %block_401230 ], [ %3092, %block_401249 ]
  %2793 = add i32 %526, -1024
  %2794 = icmp eq i32 %2793, 0
  %2795 = select i1 %2794, i64 25, i64 51
  %2796 = add i64 %2792, %2795
  br i1 %2794, label %block_40127c, label %block_401296

block_400d64:                                     ; preds = %block_400d10
  %2797 = load i64, i64* %15, align 8
  %2798 = add i64 %2797, -232
  %2799 = add i64 %64, 10
  %2800 = inttoptr i64 %2798 to i32*
  store i32 0, i32* %2800
  br label %block_400d6e

block_401256:                                     ; preds = %block_401249
  %2801 = add i64 %3092, 8
  store i8 67, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  br label %block_4012db

block_401054:                                     ; preds = %block_400ffa
  %2802 = add i64 %70, -336
  %2803 = inttoptr i64 %2802 to i64*
  %2804 = load i64, i64* %2803
  %2805 = add i64 %87, 12
  %2806 = load i64, i64* %14, align 8, !tbaa !1240
  %2807 = add i64 %2806, -8
  %2808 = inttoptr i64 %2807 to i64*
  store i64 %2805, i64* %2808
  %2809 = inttoptr i64 %2807 to i64*
  %2810 = load i64, i64* %2809
  store i64 %2810, i64* %3, align 8, !alias.scope !1580, !noalias !1583
  store i64 %2806, i64* %14, align 8, !alias.scope !1580, !noalias !1583
  %2811 = tail call i64 @fclose(i64 %2804), !noalias !1580
  %2812 = load i64, i64* %15, align 8
  %2813 = add i64 %2812, -360
  %2814 = trunc i64 %2811 to i32
  %2815 = load i64, i64* %3, align 8
  %2816 = add i64 %2815, 6
  %2817 = inttoptr i64 %2813 to i32*
  store i32 %2814, i32* %2817
  br label %block_401112

block_402051:                                     ; preds = %block_40203b, %block_402041, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit267
  %2818 = phi i64 [ %2543, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit267 ], [ %3149, %block_40203b ], [ %3144, %block_402041 ]
  %2819 = phi %struct.Memory* [ %2542, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit267 ], [ %2542, %block_40203b ], [ %2542, %block_402041 ]
  %2820 = add i64 %2818, 17
  %2821 = load i64, i64* %14, align 8, !tbaa !1240
  %2822 = add i64 %2821, -8
  %2823 = inttoptr i64 %2822 to i64*
  store i64 %2820, i64* %2823
  %2824 = load i64, i64* %612, align 8, !alias.scope !1585, !noalias !1588
  %2825 = load i64, i64* %1454, align 8, !alias.scope !1585, !noalias !1588
  %2826 = load i64, i64* %1453, align 8, !alias.scope !1585, !noalias !1588
  %2827 = load i64, i64* %16, align 8, !alias.scope !1585, !noalias !1588
  %2828 = load i64, i64* %17, align 8, !alias.scope !1585, !noalias !1588
  %2829 = inttoptr i64 %2821 to i64*
  %2830 = load i64, i64* %2829
  %2831 = add i64 %2821, 8
  %2832 = inttoptr i64 %2831 to i64*
  %2833 = load i64, i64* %2832
  %2834 = add i64 %2821, 16
  %2835 = inttoptr i64 %2834 to i64*
  %2836 = load i64, i64* %2835
  %2837 = add i64 %2821, 24
  %2838 = inttoptr i64 %2837 to i64*
  %2839 = load i64, i64* %2838
  %2840 = add i64 %2821, 32
  %2841 = inttoptr i64 %2840 to i64*
  %2842 = load i64, i64* %2841
  %2843 = add i64 %2821, 40
  %2844 = inttoptr i64 %2843 to i64*
  %2845 = load i64, i64* %2844
  %2846 = add i64 %2821, 48
  %2847 = inttoptr i64 %2846 to i64*
  %2848 = load i64, i64* %2847
  %2849 = add i64 %2821, 56
  %2850 = inttoptr i64 %2849 to i64*
  %2851 = load i64, i64* %2850
  %2852 = add i64 %2821, 64
  %2853 = inttoptr i64 %2852 to i64*
  %2854 = load i64, i64* %2853
  %2855 = add i64 %2821, 72
  %2856 = inttoptr i64 %2855 to i64*
  %2857 = load i64, i64* %2856
  %2858 = inttoptr i64 %2822 to i64*
  %2859 = load i64, i64* %2858
  store i64 %2859, i64* %3, align 8, !alias.scope !1585, !noalias !1588
  store i64 %2821, i64* %14, align 8, !alias.scope !1585, !noalias !1588
  %2860 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1718), i64 %2824, i64 %2825, i64 %2826, i64 %2827, i64 %2828, i64 %2830, i64 %2833, i64 %2836, i64 %2839, i64 %2842, i64 %2845, i64 %2848, i64 %2851, i64 %2854, i64 %2857), !noalias !1585
  %2861 = load i64, i64* %15, align 8
  %2862 = add i64 %2861, -232
  %2863 = load i64, i64* %3, align 8
  %2864 = inttoptr i64 %2862 to i32*
  store i32 1, i32* %2864
  %2865 = add i64 %2861, -556
  %2866 = trunc i64 %2860 to i32
  %2867 = add i64 %2863, 16
  %2868 = inttoptr i64 %2865 to i32*
  store i32 %2866, i32* %2868
  br label %block_402072

block_401ba2:                                     ; preds = %block_401b7c
  store i64 %3405, i64* %8, align 8, !tbaa !1240
  %2869 = add nsw i32 %3406, -65
  %2870 = icmp ult i8 %3403, 65
  %2871 = zext i1 %2870 to i8
  store i8 %2871, i8* %47, align 1, !tbaa !1246
  %2872 = and i32 %2869, 255
  %2873 = tail call i32 @llvm.ctpop.i32(i32 %2872) #11
  %2874 = trunc i32 %2873 to i8
  %2875 = and i8 %2874, 1
  %2876 = xor i8 %2875, 1
  store i8 %2876, i8* %48, align 1, !tbaa !1260
  %2877 = xor i32 %2869, %3406
  %2878 = lshr i32 %2877, 4
  %2879 = trunc i32 %2878 to i8
  %2880 = and i8 %2879, 1
  store i8 %2880, i8* %49, align 1, !tbaa !1261
  %2881 = icmp eq i32 %2869, 0
  %2882 = zext i1 %2881 to i8
  store i8 %2882, i8* %50, align 1, !tbaa !1262
  %2883 = lshr i32 %2869, 31
  %2884 = trunc i32 %2883 to i8
  store i8 %2884, i8* %51, align 1, !tbaa !1263
  %2885 = xor i32 %2883, %3424
  %2886 = add nuw nsw i32 %2885, %3424
  %2887 = icmp eq i32 %2886, 2
  %2888 = zext i1 %2887 to i8
  store i8 %2888, i8* %52, align 1, !tbaa !1264
  %2889 = select i1 %2881, i64 17, i64 38
  %2890 = add i64 %2791, %2889
  br i1 %2881, label %block_401bb3, label %block_401bc8

block_401289:                                     ; preds = %block_40127c
  %2891 = add i64 %1939, 8
  store i8 68, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  br label %block_4012d6

block_401e4f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit325, %block_401e44
  %2892 = phi i64 [ %3297, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit325 ], [ %3128, %block_401e44 ]
  %2893 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 952) to double*)
  store double %2893, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %2894 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 960) to double*)
  %2895 = load i64, i64* %15, align 8
  %2896 = add i64 %2895, -200
  %2897 = inttoptr i64 %2896 to i32*
  %2898 = load i32, i32* %2897
  %2899 = sitofp i32 %2898 to double
  store double %2899, double* %653, align 1, !tbaa !1244
  %2900 = fmul double %2899, %2894
  %2901 = add i64 %2895, -208
  %2902 = inttoptr i64 %2901 to double*
  %2903 = load double, double* %2902
  %2904 = fmul double %2900, %2903
  %2905 = fmul double %2904, %2893
  %2906 = add i64 %2895, -64
  %2907 = inttoptr i64 %2906 to double*
  %2908 = load double, double* %2907
  %2909 = fdiv double %2905, %2908
  store double %2909, double* %635, align 1, !tbaa !1244
  store i64 0, i64* %636, align 1, !tbaa !1244
  %2910 = add i64 %2895, -80
  %2911 = inttoptr i64 %2910 to double*
  store double %2909, double* %2911
  %2912 = add i64 %2892, 65
  br label %block_401e90

block_401197:                                     ; preds = %block_40117d, %block_401167
  %2913 = phi i64 [ %2652, %block_40117d ], [ %1366, %block_401167 ]
  %2914 = add i32 %526, -128
  %2915 = icmp eq i32 %2914, 0
  %2916 = select i1 %2915, i64 25, i64 51
  %2917 = add i64 %2913, %2916
  br i1 %2915, label %block_4011b0, label %block_4011ca

block_401c4b:                                     ; preds = %block_401c3a
  %2918 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 888) to double*)
  store double %2918, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %2919 = add i64 %1824, -216
  %2920 = add i64 %3174, 16
  %2921 = inttoptr i64 %2919 to double*
  store double %2918, double* %2921
  br label %block_401c5b

block_401979:                                     ; preds = %block_40196b
  store i64 2, i64* %13, align 8, !tbaa !1240
  %2922 = add i64 %302, -3369
  %2923 = add i64 %302, 10
  %2924 = load i64, i64* %14, align 8, !tbaa !1240
  %2925 = add i64 %2924, -8
  %2926 = inttoptr i64 %2925 to i64*
  store i64 %2923, i64* %2926
  store i64 %2925, i64* %14, align 8, !tbaa !1240
  %2927 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %2922, %struct.Memory* %298)
  %2928 = load i64, i64* %3, align 8
  br label %block_401983

block_401e4a:                                     ; preds = %block_401e44
  store i32 0, i32* %3239, align 1, !tbaa !1481
  store i32 0, i32* %3238, align 1, !tbaa !1481
  store i32 0, i32* %3244, align 1, !tbaa !1481
  store i32 0, i32* %3245, align 1, !tbaa !1481
  %2929 = load i64, i64* %15, align 8
  %2930 = add i64 %2929, -80
  %2931 = add i64 %3128, 70
  %2932 = load double, double* %630, align 1
  %2933 = inttoptr i64 %2930 to double*
  store double %2932, double* %2933
  br label %block_401e90

block_401d86:                                     ; preds = %block_401a84
  %2934 = add i64 %1824, -228
  %2935 = inttoptr i64 %2934 to i32*
  store i32 0, i32* %2935
  %2936 = add i64 %1857, 27
  %2937 = load i64, i64* %14, align 8, !tbaa !1240
  %2938 = add i64 %2937, -8
  %2939 = inttoptr i64 %2938 to i64*
  store i64 %2936, i64* %2939
  %2940 = load i64, i64* %612, align 8, !alias.scope !1590, !noalias !1593
  %2941 = load i64, i64* %1454, align 8, !alias.scope !1590, !noalias !1593
  %2942 = load i64, i64* %16, align 8, !alias.scope !1590, !noalias !1593
  %2943 = load i64, i64* %17, align 8, !alias.scope !1590, !noalias !1593
  %2944 = inttoptr i64 %2937 to i64*
  %2945 = load i64, i64* %2944
  %2946 = add i64 %2937, 8
  %2947 = inttoptr i64 %2946 to i64*
  %2948 = load i64, i64* %2947
  %2949 = add i64 %2937, 16
  %2950 = inttoptr i64 %2949 to i64*
  %2951 = load i64, i64* %2950
  %2952 = add i64 %2937, 24
  %2953 = inttoptr i64 %2952 to i64*
  %2954 = load i64, i64* %2953
  %2955 = add i64 %2937, 32
  %2956 = inttoptr i64 %2955 to i64*
  %2957 = load i64, i64* %2956
  %2958 = add i64 %2937, 40
  %2959 = inttoptr i64 %2958 to i64*
  %2960 = load i64, i64* %2959
  %2961 = add i64 %2937, 48
  %2962 = inttoptr i64 %2961 to i64*
  %2963 = load i64, i64* %2962
  %2964 = add i64 %2937, 56
  %2965 = inttoptr i64 %2964 to i64*
  %2966 = load i64, i64* %2965
  %2967 = add i64 %2937, 64
  %2968 = inttoptr i64 %2967 to i64*
  %2969 = load i64, i64* %2968
  %2970 = add i64 %2937, 72
  %2971 = inttoptr i64 %2970 to i64*
  %2972 = load i64, i64* %2971
  %2973 = inttoptr i64 %2938 to i64*
  %2974 = load i64, i64* %2973
  store i64 %2974, i64* %3, align 8, !alias.scope !1590, !noalias !1593
  store i64 %2937, i64* %14, align 8, !alias.scope !1590, !noalias !1593
  %2975 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1559), i64 %2940, i64 %2941, i64 %1829, i64 %2942, i64 %2943, i64 %2945, i64 %2948, i64 %2951, i64 %2954, i64 %2957, i64 %2960, i64 %2963, i64 %2966, i64 %2969, i64 %2972), !noalias !1590
  %2976 = load i64, i64* %3, align 8
  %2977 = load i64, i64* %15, align 8
  %2978 = add i64 %2977, -488
  %2979 = trunc i64 %2975 to i32
  %2980 = inttoptr i64 %2978 to i32*
  store i32 %2979, i32* %2980
  %2981 = add i64 %2976, 23
  %2982 = load i64, i64* %14, align 8, !tbaa !1240
  %2983 = add i64 %2982, -8
  %2984 = inttoptr i64 %2983 to i64*
  store i64 %2981, i64* %2984
  %2985 = load i64, i64* %612, align 8, !alias.scope !1595, !noalias !1598
  %2986 = load i64, i64* %1454, align 8, !alias.scope !1595, !noalias !1598
  %2987 = load i64, i64* %1453, align 8, !alias.scope !1595, !noalias !1598
  %2988 = load i64, i64* %16, align 8, !alias.scope !1595, !noalias !1598
  %2989 = load i64, i64* %17, align 8, !alias.scope !1595, !noalias !1598
  %2990 = inttoptr i64 %2982 to i64*
  %2991 = load i64, i64* %2990
  %2992 = add i64 %2982, 8
  %2993 = inttoptr i64 %2992 to i64*
  %2994 = load i64, i64* %2993
  %2995 = add i64 %2982, 16
  %2996 = inttoptr i64 %2995 to i64*
  %2997 = load i64, i64* %2996
  %2998 = add i64 %2982, 24
  %2999 = inttoptr i64 %2998 to i64*
  %3000 = load i64, i64* %2999
  %3001 = add i64 %2982, 32
  %3002 = inttoptr i64 %3001 to i64*
  %3003 = load i64, i64* %3002
  %3004 = add i64 %2982, 40
  %3005 = inttoptr i64 %3004 to i64*
  %3006 = load i64, i64* %3005
  %3007 = add i64 %2982, 48
  %3008 = inttoptr i64 %3007 to i64*
  %3009 = load i64, i64* %3008
  %3010 = add i64 %2982, 56
  %3011 = inttoptr i64 %3010 to i64*
  %3012 = load i64, i64* %3011
  %3013 = add i64 %2982, 64
  %3014 = inttoptr i64 %3013 to i64*
  %3015 = load i64, i64* %3014
  %3016 = add i64 %2982, 72
  %3017 = inttoptr i64 %3016 to i64*
  %3018 = load i64, i64* %3017
  %3019 = inttoptr i64 %2983 to i64*
  %3020 = load i64, i64* %3019
  store i64 %3020, i64* %3, align 8, !alias.scope !1595, !noalias !1598
  store i64 %2982, i64* %14, align 8, !alias.scope !1595, !noalias !1598
  %3021 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1582), i64 %2985, i64 %2986, i64 %2987, i64 %2988, i64 %2989, i64 %2991, i64 %2994, i64 %2997, i64 %3000, i64 %3003, i64 %3006, i64 %3009, i64 %3012, i64 %3015, i64 %3018), !noalias !1595
  %3022 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1538), i64* %13, align 8, !tbaa !1240
  %3023 = load i64, i64* %15, align 8
  %3024 = add i64 %3023, -152
  %3025 = inttoptr i64 %3024 to double*
  %3026 = load double, double* %3025
  store double %3026, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %3027 = add i64 %3023, -492
  %3028 = trunc i64 %3021 to i32
  %3029 = inttoptr i64 %3027 to i32*
  store i32 %3028, i32* %3029
  %3030 = add i64 %3022, 31
  %3031 = load i64, i64* %14, align 8, !tbaa !1240
  %3032 = add i64 %3031, -8
  %3033 = inttoptr i64 %3032 to i64*
  store i64 %3030, i64* %3033
  %3034 = load i64, i64* %612, align 8, !alias.scope !1600, !noalias !1603
  %3035 = load i64, i64* %1454, align 8, !alias.scope !1600, !noalias !1603
  %3036 = load i64, i64* %1453, align 8, !alias.scope !1600, !noalias !1603
  %3037 = load i64, i64* %16, align 8, !alias.scope !1600, !noalias !1603
  %3038 = load i64, i64* %17, align 8, !alias.scope !1600, !noalias !1603
  %3039 = inttoptr i64 %3031 to i64*
  %3040 = load i64, i64* %3039
  %3041 = add i64 %3031, 8
  %3042 = inttoptr i64 %3041 to i64*
  %3043 = load i64, i64* %3042
  %3044 = add i64 %3031, 16
  %3045 = inttoptr i64 %3044 to i64*
  %3046 = load i64, i64* %3045
  %3047 = add i64 %3031, 24
  %3048 = inttoptr i64 %3047 to i64*
  %3049 = load i64, i64* %3048
  %3050 = add i64 %3031, 32
  %3051 = inttoptr i64 %3050 to i64*
  %3052 = load i64, i64* %3051
  %3053 = add i64 %3031, 40
  %3054 = inttoptr i64 %3053 to i64*
  %3055 = load i64, i64* %3054
  %3056 = add i64 %3031, 48
  %3057 = inttoptr i64 %3056 to i64*
  %3058 = load i64, i64* %3057
  %3059 = add i64 %3031, 56
  %3060 = inttoptr i64 %3059 to i64*
  %3061 = load i64, i64* %3060
  %3062 = add i64 %3031, 64
  %3063 = inttoptr i64 %3062 to i64*
  %3064 = load i64, i64* %3063
  %3065 = add i64 %3031, 72
  %3066 = inttoptr i64 %3065 to i64*
  %3067 = load i64, i64* %3066
  %3068 = inttoptr i64 %3032 to i64*
  %3069 = load i64, i64* %3068
  store i64 %3069, i64* %3, align 8, !alias.scope !1600, !noalias !1603
  store i64 %3031, i64* %14, align 8, !alias.scope !1600, !noalias !1603
  %3070 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1538), i64 %3034, i64 %3035, i64 %3036, i64 %3037, i64 %3038, i64 %3040, i64 %3043, i64 %3046, i64 %3049, i64 %3052, i64 %3055, i64 %3058, i64 %3061, i64 %3064, i64 %3067), !noalias !1600
  %3071 = load i64, i64* %15, align 8
  %3072 = add i64 %3071, -496
  %3073 = trunc i64 %3070 to i32
  %3074 = load i64, i64* %3, align 8
  %3075 = add i64 %3074, 6
  %3076 = inttoptr i64 %3072 to i32*
  store i32 %3073, i32* %3076
  %3077 = bitcast [32 x %union.VectorReg]* %24 to i32*
  %3078 = getelementptr inbounds i8, i8* %627, i64 4
  %3079 = bitcast i8* %3078 to i32*
  br label %block_401ddd

block_401c74:                                     ; preds = %block_401c6f, %block_401b8d
  %3080 = phi i64 [ %2640, %block_401c6f ], [ %174, %block_401b8d ]
  %3081 = phi i8 [ %2641, %block_401c6f ], [ %2772, %block_401b8d ]
  %3082 = phi i64 [ %2645, %block_401c6f ], [ %175, %block_401b8d ]
  %3083 = phi i64 [ 5, %block_401c6f ], [ 215, %block_401b8d ]
  %3084 = phi %struct.Memory* [ %2644, %block_401c6f ], [ %1763, %block_401b8d ]
  %3085 = add i64 %3082, %3083
  br label %block_401c79

block_401249:                                     ; preds = %block_401230
  %3086 = add i64 %516, -200
  %3087 = inttoptr i64 %3086 to i32*
  %3088 = load i32, i32* %3087
  %3089 = add i32 %3088, -20
  %3090 = icmp eq i32 %3089, 0
  %3091 = select i1 %3090, i64 13, i64 26
  %3092 = add i64 %3184, %3091
  br i1 %3090, label %block_401256, label %block_401263

block_4017d8:                                     ; preds = %block_4017ac
  store i64 1, i64* %13, align 8, !tbaa !1240
  %3093 = add i64 %831, -2952
  %3094 = add i64 %831, 10
  %3095 = load i64, i64* %14, align 8, !tbaa !1240
  %3096 = add i64 %3095, -8
  %3097 = inttoptr i64 %3096 to i64*
  store i64 %3094, i64* %3097
  store i64 %3096, i64* %14, align 8, !tbaa !1240
  %3098 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %3093, %struct.Memory* %803)
  %3099 = load i64, i64* %3, align 8
  %3100 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %3101 = icmp eq i32 %3100, 0
  %3102 = select i1 %3101, i64 24, i64 14
  %3103 = add i64 %3099, %3102
  br i1 %3101, label %block_4017fa, label %block_4017f0

block_401390:                                     ; preds = %block_401345
  %3104 = bitcast [32 x %union.VectorReg]* %24 to i32*
  store i32 0, i32* %3104, align 1, !tbaa !1481
  %3105 = getelementptr inbounds i8, i8* %627, i64 4
  %3106 = bitcast i8* %3105 to i32*
  store i32 0, i32* %3106, align 1, !tbaa !1481
  %3107 = bitcast i64* %631 to i32*
  store i32 0, i32* %3107, align 1, !tbaa !1481
  %3108 = getelementptr inbounds i8, i8* %627, i64 12
  %3109 = bitcast i8* %3108 to i32*
  store i32 0, i32* %3109, align 1, !tbaa !1481
  %3110 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 832) to double*)
  store double %3110, double* %635, align 1, !tbaa !1244
  store double 0.000000e+00, double* %637, align 1, !tbaa !1244
  %3111 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 840) to double*)
  store double %3111, double* %653, align 1, !tbaa !1244
  %3112 = bitcast i64* %639 to double*
  store double 0.000000e+00, double* %3112, align 1, !tbaa !1244
  %3113 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 848) to double*)
  store double %3113, double* %647, align 1, !tbaa !1244
  store double 0.000000e+00, double* %649, align 1, !tbaa !1244
  %3114 = load i64, i64* %15, align 8
  %3115 = add i64 %3114, -144
  %3116 = inttoptr i64 %3115 to double*
  store double %3113, double* %3116
  %3117 = add i64 %3114, -136
  %3118 = inttoptr i64 %3117 to double*
  store double %3111, double* %3118
  %3119 = add i64 %3114, -128
  %3120 = inttoptr i64 %3119 to double*
  store double %3110, double* %3120
  %3121 = add i64 %3114, -120
  %3122 = add i64 %1136, 53
  %3123 = load double, double* %630, align 1
  %3124 = inttoptr i64 %3121 to double*
  store double %3123, double* %3124
  br label %block_4013c5

block_401e44:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit325
  %3125 = load i8, i8* %48, align 1, !tbaa !1260
  %3126 = icmp ne i8 %3125, 0
  %3127 = select i1 %3126, i64 11, i64 6
  %3128 = add i64 %3301, %3127
  %3129 = icmp eq i8 %3125, 1
  br i1 %3129, label %block_401e4f, label %block_401e4a

block_4019d5:                                     ; preds = %block_401983
  store i64 2, i64* %13, align 8, !tbaa !1240
  %3130 = add i64 %242, -3381
  %3131 = add i64 %242, 10
  %3132 = load i64, i64* %14, align 8, !tbaa !1240
  %3133 = add i64 %3132, -8
  %3134 = inttoptr i64 %3133 to i64*
  store i64 %3131, i64* %3134
  store i64 %3133, i64* %14, align 8, !tbaa !1240
  %3135 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %3130, %struct.Memory* %237)
  %3136 = load i64, i64* %3, align 8
  br label %block_4019df

block_4012e0:                                     ; preds = %block_401223, %block_4012db
  %3137 = phi i64 [ %3208, %block_401223 ], [ %835, %block_4012db ]
  %3138 = phi i64 [ 186, %block_401223 ], [ 10, %block_4012db ]
  %3139 = phi %struct.Memory* [ %519, %block_401223 ], [ %834, %block_4012db ]
  %3140 = add i64 %3138, %3137
  br label %block_4012ea

block_402041:                                     ; preds = %block_40203b
  %3141 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 944) to double*)
  store double %3141, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %3142 = load i64, i64* %15, align 8
  %3143 = add i64 %3142, -328
  %3144 = add i64 %3149, 16
  %3145 = inttoptr i64 %3143 to double*
  store double %3141, double* %3145
  br label %block_402051

block_40203b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit267
  %3146 = load i8, i8* %48, align 1, !tbaa !1260
  %3147 = icmp ne i8 %3146, 0
  %3148 = select i1 %3147, i64 22, i64 6
  %3149 = add i64 %2547, %3148
  %3150 = icmp eq i8 %3146, 1
  br i1 %3150, label %block_402051, label %block_402041

block_400feb:                                     ; preds = %block_400fd6
  %3151 = add i64 %3203, -21
  %3152 = load i64, i64* %15, align 8
  br label %block_400fd6

block_401c3a:                                     ; preds = %block_401c14
  store i64 %3405, i64* %8, align 8, !tbaa !1240
  %3153 = add nsw i32 %3406, -69
  %3154 = icmp ult i8 %3403, 69
  %3155 = zext i1 %3154 to i8
  store i8 %3155, i8* %47, align 1, !tbaa !1246
  %3156 = and i32 %3153, 255
  %3157 = tail call i32 @llvm.ctpop.i32(i32 %3156) #11
  %3158 = trunc i32 %3157 to i8
  %3159 = and i8 %3158, 1
  %3160 = xor i8 %3159, 1
  store i8 %3160, i8* %48, align 1, !tbaa !1260
  %3161 = xor i32 %3153, %3406
  %3162 = lshr i32 %3161, 4
  %3163 = trunc i32 %3162 to i8
  %3164 = and i8 %3163, 1
  store i8 %3164, i8* %49, align 1, !tbaa !1261
  %3165 = icmp eq i32 %3153, 0
  %3166 = zext i1 %3165 to i8
  store i8 %3166, i8* %50, align 1, !tbaa !1262
  %3167 = lshr i32 %3153, 31
  %3168 = trunc i32 %3167 to i8
  store i8 %3168, i8* %51, align 1, !tbaa !1263
  %3169 = xor i32 %3167, %3424
  %3170 = add nuw nsw i32 %3169, %3424
  %3171 = icmp eq i32 %3170, 2
  %3172 = zext i1 %3171 to i8
  store i8 %3172, i8* %52, align 1, !tbaa !1264
  %3173 = select i1 %3165, i64 17, i64 33
  %3174 = add i64 %3237, %3173
  br i1 %3165, label %block_401c4b, label %block_401c3a.block_401c5b_crit_edge

block_401c3a.block_401c5b_crit_edge:              ; preds = %block_401c3a
  %3175 = add i64 %1824, -216
  br label %block_401c5b

block_401c5b:                                     ; preds = %block_401c3a.block_401c5b_crit_edge, %block_401c4b
  %3176 = phi i64 [ %3175, %block_401c3a.block_401c5b_crit_edge ], [ %2919, %block_401c4b ]
  %3177 = phi i64 [ %3174, %block_401c3a.block_401c5b_crit_edge ], [ %2920, %block_401c4b ]
  %3178 = phi %struct.Memory* [ %1763, %block_401c3a.block_401c5b_crit_edge ], [ %1763, %block_401c4b ]
  %3179 = add i64 %3177, 5
  br label %block_401c65

block_401230:                                     ; preds = %block_401216, %block_4011fd
  %3180 = phi i64 [ %3215, %block_401216 ], [ %245, %block_4011fd ]
  %3181 = add i32 %526, -512
  %3182 = icmp eq i32 %3181, 0
  %3183 = select i1 %3182, i64 25, i64 51
  %3184 = add i64 %3180, %3183
  br i1 %3182, label %block_401249, label %block_401263

block_400fd6:                                     ; preds = %block_400feb, %block_400fb1
  %3185 = phi i64 [ %165, %block_400fb1 ], [ %3151, %block_400feb ]
  %3186 = phi i64 [ %161, %block_400fb1 ], [ %3152, %block_400feb ]
  %3187 = phi %struct.Memory* [ %2597, %block_400fb1 ], [ %3187, %block_400feb ]
  %3188 = add i64 %3186, -336
  %3189 = inttoptr i64 %3188 to i64*
  %3190 = load i64, i64* %3189
  %3191 = add i64 %3185, 12
  %3192 = load i64, i64* %14, align 8, !tbaa !1240
  %3193 = add i64 %3192, -8
  %3194 = inttoptr i64 %3193 to i64*
  store i64 %3191, i64* %3194
  %3195 = inttoptr i64 %3193 to i64*
  %3196 = load i64, i64* %3195
  store i64 %3196, i64* %3, align 8, !alias.scope !1605, !noalias !1608
  store i64 %3192, i64* %14, align 8, !alias.scope !1605, !noalias !1608
  %3197 = tail call i64 @fgetc(i64 %3190), !noalias !1605
  %3198 = trunc i64 %3197 to i32
  %3199 = load i64, i64* %3, align 8
  %3200 = add i32 %3198, -10
  %3201 = icmp eq i32 %3200, 0
  %3202 = select i1 %3201, i64 14, i64 9
  %3203 = add i64 %3199, %3202
  br i1 %3201, label %block_400ff0, label %block_400feb

block_401c25:                                     ; preds = %block_401c14
  %3204 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 896) to double*)
  store double %3204, double* %630, align 1, !tbaa !1244
  store double 0.000000e+00, double* %632, align 1, !tbaa !1244
  %3205 = add i64 %1824, -216
  %3206 = inttoptr i64 %3205 to double*
  store double %3204, double* %3206
  %3207 = add i64 %3237, 59
  br label %block_401c65

block_401223:                                     ; preds = %block_401216
  %3208 = add i64 %3215, 8
  store i8 66, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  br label %block_4012e0

block_401216:                                     ; preds = %block_4011fd
  %3209 = add i64 %516, -200
  %3210 = inttoptr i64 %3209 to i32*
  %3211 = load i32, i32* %3210
  %3212 = add i32 %3211, -20
  %3213 = icmp eq i32 %3212, 0
  %3214 = select i1 %3213, i64 13, i64 26
  %3215 = add i64 %245, %3214
  br i1 %3213, label %block_401223, label %block_401230

block_401c14:                                     ; preds = %block_401bee
  store i64 %3405, i64* %8, align 8, !tbaa !1240
  %3216 = add nsw i32 %3406, -68
  %3217 = icmp ult i8 %3403, 68
  %3218 = zext i1 %3217 to i8
  store i8 %3218, i8* %47, align 1, !tbaa !1246
  %3219 = and i32 %3216, 255
  %3220 = tail call i32 @llvm.ctpop.i32(i32 %3219) #11
  %3221 = trunc i32 %3220 to i8
  %3222 = and i8 %3221, 1
  %3223 = xor i8 %3222, 1
  store i8 %3223, i8* %48, align 1, !tbaa !1260
  %3224 = xor i32 %3216, %3406
  %3225 = lshr i32 %3224, 4
  %3226 = trunc i32 %3225 to i8
  %3227 = and i8 %3226, 1
  store i8 %3227, i8* %49, align 1, !tbaa !1261
  %3228 = icmp eq i32 %3216, 0
  %3229 = zext i1 %3228 to i8
  store i8 %3229, i8* %50, align 1, !tbaa !1262
  %3230 = lshr i32 %3216, 31
  %3231 = trunc i32 %3230 to i8
  store i8 %3231, i8* %51, align 1, !tbaa !1263
  %3232 = xor i32 %3230, %3424
  %3233 = add nuw nsw i32 %3232, %3424
  %3234 = icmp eq i32 %3233, 2
  %3235 = zext i1 %3234 to i8
  store i8 %3235, i8* %52, align 1, !tbaa !1264
  %3236 = select i1 %3228, i64 17, i64 38
  %3237 = add i64 %344, %3236
  br i1 %3228, label %block_401c25, label %block_401c3a

block_401ddd:                                     ; preds = %block_401d86, %block_401d81
  %3238 = phi i32* [ %3079, %block_401d86 ], [ %881, %block_401d81 ]
  %3239 = phi i32* [ %3077, %block_401d86 ], [ %879, %block_401d81 ]
  %3240 = phi i64 [ %3071, %block_401d86 ], [ %2614, %block_401d81 ]
  %3241 = phi i64 [ %3075, %block_401d86 ], [ %2617, %block_401d81 ]
  %3242 = phi %struct.Memory* [ %1763, %block_401d86 ], [ %2616, %block_401d81 ]
  %3243 = getelementptr inbounds i8, i8* %627, i64 12
  %3244 = bitcast i64* %631 to i32*
  %3245 = bitcast i8* %3243 to i32*
  store i32 0, i32* %3239, align 1, !tbaa !1481
  store i32 0, i32* %3238, align 1, !tbaa !1481
  store i32 0, i32* %3244, align 1, !tbaa !1481
  store i32 0, i32* %3245, align 1, !tbaa !1481
  %3246 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 944) to double*)
  %3247 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %3248 = sext i32 %3247 to i64
  %3249 = shl nsw i64 %3248, 2
  %3250 = add i64 %3249, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %3251 = inttoptr i64 %3250 to i32*
  %3252 = load i32, i32* %3251
  %3253 = sitofp i32 %3252 to double
  %3254 = fmul double %3253, %3246
  %3255 = add i64 %3249, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %3256 = inttoptr i64 %3255 to i32*
  %3257 = load i32, i32* %3256
  %3258 = sitofp i32 %3257 to double
  %3259 = fmul double %3258, %3254
  store i64 %3248, i64* %8, align 8, !tbaa !1240
  %3260 = add i64 %3249, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %3261 = inttoptr i64 %3260 to i32*
  %3262 = load i32, i32* %3261
  %3263 = zext i32 %3262 to i64
  store i64 %3263, i64* %10, align 8, !tbaa !1240
  %3264 = sitofp i32 %3262 to double
  store double %3264, double* %653, align 1, !tbaa !1244
  %3265 = fmul double %3264, %3259
  %3266 = add i64 %3240, -208
  %3267 = inttoptr i64 %3266 to double*
  store double %3265, double* %3267
  %3268 = add i64 %3240, -64
  %3269 = inttoptr i64 %3268 to double*
  %3270 = load double, double* %3269
  store double %3270, double* %635, align 1, !tbaa !1244
  store double 0.000000e+00, double* %637, align 1, !tbaa !1244
  %3271 = add i64 %3241, 97
  store i64 %3271, i64* %3, align 8
  %3272 = load double, double* %630, align 1
  %3273 = fcmp uno double %3270, %3272
  br i1 %3273, label %3274, label %3285

; <label>:3274:                                   ; preds = %block_401ddd
  %3275 = fadd double %3270, %3272
  %3276 = bitcast double %3275 to i64
  %3277 = and i64 %3276, 9221120237041090560
  %3278 = icmp eq i64 %3277, 9218868437227405312
  %3279 = and i64 %3276, 2251799813685247
  %3280 = icmp ne i64 %3279, 0
  %3281 = and i1 %3278, %3280
  br i1 %3281, label %3282, label %3291

; <label>:3282:                                   ; preds = %3274
  %3283 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3271, %struct.Memory* %3242) #14
  %3284 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit325

; <label>:3285:                                   ; preds = %block_401ddd
  %3286 = fcmp ogt double %3270, %3272
  br i1 %3286, label %3291, label %3287

; <label>:3287:                                   ; preds = %3285
  %3288 = fcmp olt double %3270, %3272
  br i1 %3288, label %3291, label %3289

; <label>:3289:                                   ; preds = %3287
  %3290 = fcmp oeq double %3270, %3272
  br i1 %3290, label %3291, label %3294

; <label>:3291:                                   ; preds = %3289, %3287, %3285, %3274
  %3292 = phi i8 [ 0, %3285 ], [ 0, %3287 ], [ 1, %3289 ], [ 1, %3274 ]
  %3293 = phi i8 [ 0, %3285 ], [ 0, %3287 ], [ 0, %3289 ], [ 1, %3274 ]
  store i8 %3292, i8* %50, align 1, !tbaa !1494
  store i8 %3293, i8* %48, align 1, !tbaa !1494
  br label %3294

; <label>:3294:                                   ; preds = %3291, %3289
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit325

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit325: ; preds = %3294, %3282
  %3295 = phi i64 [ %3284, %3282 ], [ %3271, %3294 ]
  %3296 = phi %struct.Memory* [ %3283, %3282 ], [ %3242, %3294 ]
  %3297 = add i64 %3295, 17
  %3298 = add i64 %3295, 6
  %3299 = load i8, i8* %50, align 1, !tbaa !1262
  %3300 = icmp eq i8 %3299, 0
  %3301 = select i1 %3300, i64 %3297, i64 %3298
  br i1 %3300, label %block_401e4f, label %block_401e44

block_4017fa:                                     ; preds = %block_4017d8, %block_4017f0
  %3302 = phi i64 [ %3103, %block_4017d8 ], [ %1441, %block_4017f0 ]
  %3303 = phi %struct.Memory* [ %3098, %block_4017d8 ], [ %1440, %block_4017f0 ]
  %3304 = load i64, i64* %15, align 8
  %3305 = add i64 %3304, -112
  %3306 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  %3307 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  %3308 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  %3309 = add i64 %3304, -188
  %3310 = inttoptr i64 %3309 to i32*
  %3311 = load i32, i32* %3310
  %3312 = add i64 %3304, -192
  %3313 = inttoptr i64 %3312 to i32*
  %3314 = load i32, i32* %3313
  %3315 = zext i32 %3314 to i64
  store i64 %3315, i64* %16, align 8, !tbaa !1240
  %3316 = add i64 %3304, -196
  %3317 = inttoptr i64 %3316 to i32*
  %3318 = load i32, i32* %3317
  %3319 = zext i32 %3318 to i64
  store i64 %3319, i64* %17, align 8, !tbaa !1240
  %3320 = add i64 %3304, -48
  %3321 = inttoptr i64 %3320 to i32*
  %3322 = load i32, i32* %3321
  %3323 = add i64 %3304, -424
  %3324 = inttoptr i64 %3323 to i32*
  store i32 %3311, i32* %3324
  store i64 %3306, i64* %13, align 8, !tbaa !1240
  %3325 = add i64 %3304, -432
  %3326 = inttoptr i64 %3325 to i64*
  store i64 %3308, i64* %3326
  store i64 %3307, i64* %12, align 8, !tbaa !1240
  %3327 = inttoptr i64 %3325 to i64*
  %3328 = load i64, i64* %3327
  store i64 %3328, i64* %11, align 8, !tbaa !1240
  %3329 = inttoptr i64 %3323 to i32*
  %3330 = load i32, i32* %3329
  %3331 = zext i32 %3330 to i64
  store i64 %3331, i64* %10, align 8, !tbaa !1240
  %3332 = load i64, i64* %14, align 8
  %3333 = inttoptr i64 %3332 to i64*
  store i64 %3305, i64* %3333
  %3334 = add i64 %3332, 8
  %3335 = inttoptr i64 %3334 to i32*
  store i32 %3322, i32* %3335
  %3336 = add i64 %3302, 7270
  %3337 = add i64 %3302, 98
  %3338 = add i64 %3332, -8
  %3339 = inttoptr i64 %3338 to i64*
  store i64 %3337, i64* %3339
  store i64 %3338, i64* %14, align 8, !tbaa !1240
  %3340 = tail call %struct.Memory* @sub_403460_resid(%struct.State* nonnull %0, i64 %3336, %struct.Memory* %3303)
  %3341 = load i64, i64* %3, align 8
  %3342 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %3343 = icmp eq i32 %3342, 0
  %3344 = select i1 %3343, i64 24, i64 14
  %3345 = add i64 %3341, %3344
  br i1 %3343, label %block_401874, label %block_40186a

block_400fac:                                     ; preds = %block_400f97
  %3346 = add i64 %2613, -21
  %3347 = load i64, i64* %15, align 8
  br label %block_400f97

block_401920:                                     ; preds = %block_401916
  store i8 %574, i8* %47, align 1, !tbaa !1246
  store i8 %579, i8* %48, align 1, !tbaa !1260
  store i8 %584, i8* %49, align 1, !tbaa !1261
  store i8 %586, i8* %50, align 1, !tbaa !1262
  store i8 %588, i8* %51, align 1, !tbaa !1263
  store i8 %595, i8* %52, align 1, !tbaa !1264
  %3348 = select i1 %585, i64 49, i64 15
  %3349 = add i64 %515, %3348
  br i1 %585, label %block_401951, label %block_40192f

block_401007:                                     ; preds = %block_400ffa
  %3350 = add i64 %70, -336
  %3351 = inttoptr i64 %3350 to i64*
  %3352 = load i64, i64* %3351
  %3353 = sext i32 %74 to i64
  %3354 = shl nsw i64 %3353, 2
  %3355 = add i64 %3354, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1200)
  %3356 = add i64 %87, 51
  %3357 = load i64, i64* %14, align 8, !tbaa !1240
  %3358 = add i64 %3357, -8
  %3359 = inttoptr i64 %3358 to i64*
  store i64 %3356, i64* %3359
  %3360 = inttoptr i64 %3357 to i64*
  %3361 = load i64, i64* %3360
  %3362 = add i64 %3357, 8
  %3363 = inttoptr i64 %3362 to i64*
  %3364 = load i64, i64* %3363
  %3365 = add i64 %3357, 16
  %3366 = inttoptr i64 %3365 to i64*
  %3367 = load i64, i64* %3366
  %3368 = add i64 %3357, 24
  %3369 = inttoptr i64 %3368 to i64*
  %3370 = load i64, i64* %3369
  %3371 = add i64 %3357, 32
  %3372 = inttoptr i64 %3371 to i64*
  %3373 = load i64, i64* %3372
  %3374 = add i64 %3357, 40
  %3375 = inttoptr i64 %3374 to i64*
  %3376 = load i64, i64* %3375
  %3377 = add i64 %3357, 48
  %3378 = inttoptr i64 %3377 to i64*
  %3379 = load i64, i64* %3378
  %3380 = add i64 %3357, 56
  %3381 = inttoptr i64 %3380 to i64*
  %3382 = load i64, i64* %3381
  %3383 = add i64 %3357, 64
  %3384 = inttoptr i64 %3383 to i64*
  %3385 = load i64, i64* %3384
  %3386 = add i64 %3357, 72
  %3387 = inttoptr i64 %3386 to i64*
  %3388 = load i64, i64* %3387
  %3389 = inttoptr i64 %3358 to i64*
  %3390 = load i64, i64* %3389
  store i64 %3390, i64* %3, align 8, !alias.scope !1610, !noalias !1613
  store i64 %3357, i64* %14, align 8, !alias.scope !1610, !noalias !1613
  %3391 = tail call i64 @__isoc99_fscanf(i64 %3352, i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1255), i64 %3355, i64 %3354, i64 %171, i64 %172, i64 %3361, i64 %3364, i64 %3367, i64 %3370, i64 %3373, i64 %3376, i64 %3379, i64 %3382, i64 %3385, i64 %3388), !noalias !1610
  %3392 = load i64, i64* %15, align 8
  %3393 = add i64 %3392, -340
  %3394 = trunc i64 %3391 to i32
  %3395 = load i64, i64* %3, align 8
  %3396 = inttoptr i64 %3393 to i32*
  store i32 %3394, i32* %3396
  %3397 = add i64 %3392, -232
  %3398 = inttoptr i64 %3397 to i32*
  %3399 = load i32, i32* %3398
  %3400 = add i32 %3399, 1
  %3401 = inttoptr i64 %3397 to i32*
  store i32 %3400, i32* %3401
  %3402 = add i64 %3395, -64
  br label %block_400ffa

block_401b56:                                     ; preds = %block_401a84
  %3403 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1232) to i8*)
  %3404 = sext i8 %3403 to i64
  %3405 = and i64 %3404, 4294967295
  store i64 %3405, i64* %8, align 8, !tbaa !1240
  %3406 = sext i8 %3403 to i32
  %3407 = add nsw i32 %3406, -83
  %3408 = icmp ult i8 %3403, 83
  %3409 = zext i1 %3408 to i8
  store i8 %3409, i8* %47, align 1, !tbaa !1246
  %3410 = and i32 %3407, 255
  %3411 = tail call i32 @llvm.ctpop.i32(i32 %3410) #11
  %3412 = trunc i32 %3411 to i8
  %3413 = and i8 %3412, 1
  %3414 = xor i8 %3413, 1
  store i8 %3414, i8* %48, align 1, !tbaa !1260
  %3415 = xor i32 %3406, 16
  %3416 = xor i32 %3415, %3407
  %3417 = lshr i32 %3416, 4
  %3418 = trunc i32 %3417 to i8
  %3419 = and i8 %3418, 1
  store i8 %3419, i8* %49, align 1, !tbaa !1261
  %3420 = icmp eq i32 %3407, 0
  %3421 = zext i1 %3420 to i8
  store i8 %3421, i8* %50, align 1, !tbaa !1262
  %3422 = lshr i32 %3407, 31
  %3423 = trunc i32 %3422 to i8
  store i8 %3423, i8* %51, align 1, !tbaa !1263
  %3424 = lshr i32 %3406, 31
  %3425 = xor i32 %3422, %3424
  %3426 = add nuw nsw i32 %3425, %3424
  %3427 = icmp eq i32 %3426, 2
  %3428 = zext i1 %3427 to i8
  store i8 %3428, i8* %52, align 1, !tbaa !1264
  %3429 = select i1 %3420, i64 17, i64 38
  %3430 = add i64 %1857, %3429
  br i1 %3420, label %block_401b67, label %block_401b7c
}

; Function Attrs: noinline
define %struct.Memory* @sub_407190_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_407190:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %19, align 8, !tbaa !1240
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %29, i64* %32
  store i64 %31, i64* %20, align 8, !tbaa !1240
  %33 = load i64, i64* %26, align 8
  %34 = add i64 %30, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = load i64, i64* %25, align 8
  %37 = add i64 %30, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %24, align 8
  %40 = add i64 %30, -32
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = load i64, i64* %23, align 8
  %43 = add i64 %30, -40
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44
  %45 = load i64, i64* %14, align 8
  %46 = add i64 %30, -48
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  %48 = add i64 %30, -328
  store i64 %48, i64* %19, align 8, !tbaa !1240
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %55 = load i8, i8* %5, align 1
  %56 = add i64 %30, 88
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %21, align 8, !tbaa !1240
  %59 = add i64 %30, 80
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %22, align 8, !tbaa !1240
  %62 = add i64 %30, 72
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %14, align 8, !tbaa !1240
  %65 = add i64 %30, 64
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  store i64 %67, i64* %25, align 8, !tbaa !1240
  %68 = add i64 %30, 56
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %26, align 8, !tbaa !1240
  %71 = add i64 %30, 48
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %23, align 8, !tbaa !1240
  %74 = load i64, i64* %20, align 8
  %75 = add i64 %74, 48
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %24, align 8, !tbaa !1240
  %78 = add i64 %74, 40
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %17, align 8, !tbaa !1240
  %81 = add i64 %74, -117
  %82 = inttoptr i64 %81 to i8*
  store i8 %55, i8* %82
  %83 = add i64 %74, 32
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %74, -124
  %87 = load i32, i32* %7, align 4
  %88 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %88
  %89 = add i64 %74, 24
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = add i64 %74, -136
  %93 = inttoptr i64 %92 to i64*
  store i64 %85, i64* %93
  %94 = add i64 %74, 16
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %74, -140
  %98 = inttoptr i64 %97 to i32*
  store i32 %91, i32* %98
  %99 = inttoptr i64 %86 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %15, align 8, !tbaa !1240
  %102 = add i64 %74, -152
  %103 = inttoptr i64 %102 to i64*
  store i64 %96, i64* %103
  %104 = add i64 %74, -48
  %105 = load i64, i64* %18, align 8
  %106 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %106
  %107 = inttoptr i64 %81 to i8*
  %108 = load i8, i8* %107
  %109 = add i64 %74, -49
  %110 = inttoptr i64 %109 to i8*
  store i8 %108, i8* %110
  %111 = add i64 %74, -56
  %112 = load i32, i32* %9, align 4
  %113 = inttoptr i64 %111 to i32*
  store i32 %112, i32* %113
  %114 = add i64 %74, -60
  %115 = inttoptr i64 %114 to i32*
  store i32 %100, i32* %115
  %116 = add i64 %74, -64
  %117 = load i32, i32* %11, align 4
  %118 = inttoptr i64 %116 to i32*
  store i32 %117, i32* %118
  %119 = add i64 %74, -68
  %120 = load i32, i32* %13, align 4
  %121 = inttoptr i64 %119 to i32*
  store i32 %120, i32* %121
  %122 = add i64 %74, -80
  %123 = bitcast [32 x %union.VectorReg]* %27 to double*
  %124 = load double, double* %123, align 1
  %125 = inttoptr i64 %122 to double*
  store double %124, double* %125
  %126 = add i64 %74, -88
  %127 = bitcast %union.VectorReg* %28 to double*
  %128 = load double, double* %127, align 1
  %129 = inttoptr i64 %126 to double*
  store double %128, double* %129
  %130 = inttoptr i64 %104 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %74, -160
  %133 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %133
  %134 = load i64, i64* %20, align 8
  %135 = add i64 %134, -160
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %134, -168
  %139 = load i64, i64* %17, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %140
  %141 = add i64 %134, -176
  %142 = load i64, i64* %22, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %142, i64* %143
  %144 = add i64 %134, -184
  %145 = load i64, i64* %14, align 8
  %146 = inttoptr i64 %144 to i64*
  store i64 %145, i64* %146
  %147 = add i64 %134, -192
  %148 = load i64, i64* %25, align 8
  %149 = inttoptr i64 %147 to i64*
  store i64 %148, i64* %149
  %150 = add i64 %134, -200
  %151 = load i64, i64* %26, align 8
  %152 = inttoptr i64 %150 to i64*
  store i64 %151, i64* %152
  %153 = add i64 %134, -208
  %154 = load i64, i64* %24, align 8
  %155 = inttoptr i64 %153 to i64*
  store i64 %154, i64* %155
  %156 = add i64 %134, -216
  %157 = load i64, i64* %23, align 8
  %158 = inttoptr i64 %156 to i64*
  store i64 %157, i64* %158
  %159 = add i64 %134, -224
  %160 = load i64, i64* %21, align 8
  %161 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %161
  %162 = add i64 %1, 228
  %163 = load i64, i64* %19, align 8, !tbaa !1240
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %172 = load i64, i64* %168, align 8, !alias.scope !1615, !noalias !1618
  %173 = load i64, i64* %167, align 8, !alias.scope !1615, !noalias !1618
  %174 = load i64, i64* %170, align 8, !alias.scope !1615, !noalias !1618
  %175 = load i64, i64* %171, align 8, !alias.scope !1615, !noalias !1618
  %176 = inttoptr i64 %163 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %163, 8
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = add i64 %163, 16
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %163, 24
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %163, 32
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %163, 40
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %163, 48
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %163, 56
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %163, 64
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %163, 72
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = inttoptr i64 %164 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %3, align 8, !alias.scope !1615, !noalias !1618
  store i64 %163, i64* %19, align 8, !alias.scope !1615, !noalias !1618
  %207 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2035), i64 %137, i64 %172, i64 %173, i64 %174, i64 %175, i64 %177, i64 %180, i64 %183, i64 %186, i64 %189, i64 %192, i64 %195, i64 %198, i64 %201, i64 %204), !noalias !1615
  %208 = load i64, i64* %3, align 8
  %209 = load i64, i64* %20, align 8
  %210 = add i64 %209, -49
  %211 = inttoptr i64 %210 to i8*
  %212 = load i8, i8* %211
  %213 = sext i8 %212 to i64
  %214 = and i64 %213, 4294967295
  store i64 %214, i64* %17, align 8, !tbaa !1240
  %215 = add i64 %209, -228
  %216 = trunc i64 %207 to i32
  %217 = inttoptr i64 %215 to i32*
  store i32 %216, i32* %217
  %218 = add i64 %208, 27
  %219 = load i64, i64* %19, align 8, !tbaa !1240
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %168, align 8, !alias.scope !1620, !noalias !1623
  %223 = load i64, i64* %167, align 8, !alias.scope !1620, !noalias !1623
  %224 = load i64, i64* %170, align 8, !alias.scope !1620, !noalias !1623
  %225 = load i64, i64* %171, align 8, !alias.scope !1620, !noalias !1623
  %226 = inttoptr i64 %219 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %219, 8
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %219, 16
  %232 = inttoptr i64 %231 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %219, 24
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235
  %237 = add i64 %219, 32
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %219, 40
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %219, 48
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %219, 56
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %219, 64
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %219, 72
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = inttoptr i64 %220 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %3, align 8, !alias.scope !1620, !noalias !1623
  store i64 %219, i64* %19, align 8, !alias.scope !1620, !noalias !1623
  %257 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2063), i64 %214, i64 %222, i64 %223, i64 %224, i64 %225, i64 %227, i64 %230, i64 %233, i64 %236, i64 %239, i64 %242, i64 %245, i64 %248, i64 %251, i64 %254), !noalias !1620
  %258 = load i64, i64* %20, align 8
  %259 = add i64 %258, -60
  %260 = load i64, i64* %3, align 8
  %261 = inttoptr i64 %259 to i32*
  %262 = load i32, i32* %261
  %263 = icmp eq i32 %262, 0
  %264 = add i64 %258, -232
  %265 = trunc i64 %257 to i32
  %266 = inttoptr i64 %264 to i32*
  store i32 %265, i32* %266
  %267 = select i1 %263, i64 16, i64 240
  %268 = add i64 %260, %267
  %269 = add i64 %258, -64
  %270 = inttoptr i64 %269 to i32*
  %271 = load i32, i32* %270
  br i1 %263, label %block_40729f, label %block_40737f

block_40745d:                                     ; preds = %block_407416, %block_40743c
  %272 = phi i64 [ %835, %block_40743c ], [ %1199, %block_407416 ]
  %273 = phi i64 [ %839, %block_40743c ], [ %1204, %block_407416 ]
  %274 = phi %struct.Memory* [ %955, %block_40743c ], [ %955, %block_407416 ]
  %275 = add i64 %272, 32
  %276 = inttoptr i64 %275 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %273, 21
  %279 = load i64, i64* %19, align 8, !tbaa !1240
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %278, i64* %281
  %282 = load i64, i64* %168, align 8, !alias.scope !1625, !noalias !1628
  %283 = load i64, i64* %167, align 8, !alias.scope !1625, !noalias !1628
  %284 = load i64, i64* %170, align 8, !alias.scope !1625, !noalias !1628
  %285 = load i64, i64* %171, align 8, !alias.scope !1625, !noalias !1628
  %286 = inttoptr i64 %279 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %279, 8
  %289 = inttoptr i64 %288 to i64*
  %290 = load i64, i64* %289
  %291 = add i64 %279, 16
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %279, 24
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %279, 32
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %279, 40
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %279, 48
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304
  %306 = add i64 %279, 56
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  %309 = add i64 %279, 64
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = add i64 %279, 72
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  %315 = inttoptr i64 %280 to i64*
  %316 = load i64, i64* %315
  store i64 %316, i64* %3, align 8, !alias.scope !1625, !noalias !1628
  store i64 %279, i64* %19, align 8, !alias.scope !1625, !noalias !1628
  %317 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 434), i64 %277, i64 %282, i64 %283, i64 %284, i64 %285, i64 %287, i64 %290, i64 %293, i64 %296, i64 %299, i64 %302, i64 %305, i64 %308, i64 %311, i64 %314), !noalias !1625
  %318 = load i64, i64* %3, align 8
  %319 = load i64, i64* %20, align 8
  %320 = add i64 %319, 40
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  %323 = add i64 %319, -284
  %324 = trunc i64 %317 to i32
  %325 = inttoptr i64 %323 to i32*
  store i32 %324, i32* %325
  %326 = add i64 %318, 27
  %327 = load i64, i64* %19, align 8, !tbaa !1240
  %328 = add i64 %327, -8
  %329 = inttoptr i64 %328 to i64*
  store i64 %326, i64* %329
  %330 = load i64, i64* %168, align 8, !alias.scope !1630, !noalias !1633
  %331 = load i64, i64* %167, align 8, !alias.scope !1630, !noalias !1633
  %332 = load i64, i64* %170, align 8, !alias.scope !1630, !noalias !1633
  %333 = load i64, i64* %171, align 8, !alias.scope !1630, !noalias !1633
  %334 = inttoptr i64 %327 to i64*
  %335 = load i64, i64* %334
  %336 = add i64 %327, 8
  %337 = inttoptr i64 %336 to i64*
  %338 = load i64, i64* %337
  %339 = add i64 %327, 16
  %340 = inttoptr i64 %339 to i64*
  %341 = load i64, i64* %340
  %342 = add i64 %327, 24
  %343 = inttoptr i64 %342 to i64*
  %344 = load i64, i64* %343
  %345 = add i64 %327, 32
  %346 = inttoptr i64 %345 to i64*
  %347 = load i64, i64* %346
  %348 = add i64 %327, 40
  %349 = inttoptr i64 %348 to i64*
  %350 = load i64, i64* %349
  %351 = add i64 %327, 48
  %352 = inttoptr i64 %351 to i64*
  %353 = load i64, i64* %352
  %354 = add i64 %327, 56
  %355 = inttoptr i64 %354 to i64*
  %356 = load i64, i64* %355
  %357 = add i64 %327, 64
  %358 = inttoptr i64 %357 to i64*
  %359 = load i64, i64* %358
  %360 = add i64 %327, 72
  %361 = inttoptr i64 %360 to i64*
  %362 = load i64, i64* %361
  %363 = inttoptr i64 %328 to i64*
  %364 = load i64, i64* %363
  store i64 %364, i64* %3, align 8, !alias.scope !1630, !noalias !1633
  store i64 %327, i64* %19, align 8, !alias.scope !1630, !noalias !1633
  %365 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 471), i64 %322, i64 %330, i64 %331, i64 %332, i64 %333, i64 %335, i64 %338, i64 %341, i64 %344, i64 %347, i64 %350, i64 %353, i64 %356, i64 %359, i64 %362), !noalias !1630
  %366 = load i64, i64* %3, align 8
  %367 = load i64, i64* %20, align 8
  %368 = add i64 %367, 48
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = add i64 %367, -288
  %372 = trunc i64 %365 to i32
  %373 = inttoptr i64 %371 to i32*
  store i32 %372, i32* %373
  %374 = add i64 %366, 27
  %375 = load i64, i64* %19, align 8, !tbaa !1240
  %376 = add i64 %375, -8
  %377 = inttoptr i64 %376 to i64*
  store i64 %374, i64* %377
  %378 = load i64, i64* %168, align 8, !alias.scope !1635, !noalias !1638
  %379 = load i64, i64* %167, align 8, !alias.scope !1635, !noalias !1638
  %380 = load i64, i64* %170, align 8, !alias.scope !1635, !noalias !1638
  %381 = load i64, i64* %171, align 8, !alias.scope !1635, !noalias !1638
  %382 = inttoptr i64 %375 to i64*
  %383 = load i64, i64* %382
  %384 = add i64 %375, 8
  %385 = inttoptr i64 %384 to i64*
  %386 = load i64, i64* %385
  %387 = add i64 %375, 16
  %388 = inttoptr i64 %387 to i64*
  %389 = load i64, i64* %388
  %390 = add i64 %375, 24
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391
  %393 = add i64 %375, 32
  %394 = inttoptr i64 %393 to i64*
  %395 = load i64, i64* %394
  %396 = add i64 %375, 40
  %397 = inttoptr i64 %396 to i64*
  %398 = load i64, i64* %397
  %399 = add i64 %375, 48
  %400 = inttoptr i64 %399 to i64*
  %401 = load i64, i64* %400
  %402 = add i64 %375, 56
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  %405 = add i64 %375, 64
  %406 = inttoptr i64 %405 to i64*
  %407 = load i64, i64* %406
  %408 = add i64 %375, 72
  %409 = inttoptr i64 %408 to i64*
  %410 = load i64, i64* %409
  %411 = inttoptr i64 %376 to i64*
  %412 = load i64, i64* %411
  store i64 %412, i64* %3, align 8, !alias.scope !1635, !noalias !1638
  store i64 %375, i64* %19, align 8, !alias.scope !1635, !noalias !1638
  %413 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2348), i64 %370, i64 %378, i64 %379, i64 %380, i64 %381, i64 %383, i64 %386, i64 %389, i64 %392, i64 %395, i64 %398, i64 %401, i64 %404, i64 %407, i64 %410), !noalias !1635
  %414 = load i64, i64* %3, align 8
  %415 = load i64, i64* %20, align 8
  %416 = add i64 %415, 56
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %415, -292
  %420 = trunc i64 %413 to i32
  %421 = inttoptr i64 %419 to i32*
  store i32 %420, i32* %421
  %422 = add i64 %414, 27
  %423 = load i64, i64* %19, align 8, !tbaa !1240
  %424 = add i64 %423, -8
  %425 = inttoptr i64 %424 to i64*
  store i64 %422, i64* %425
  %426 = load i64, i64* %168, align 8, !alias.scope !1640, !noalias !1643
  %427 = load i64, i64* %167, align 8, !alias.scope !1640, !noalias !1643
  %428 = load i64, i64* %170, align 8, !alias.scope !1640, !noalias !1643
  %429 = load i64, i64* %171, align 8, !alias.scope !1640, !noalias !1643
  %430 = inttoptr i64 %423 to i64*
  %431 = load i64, i64* %430
  %432 = add i64 %423, 8
  %433 = inttoptr i64 %432 to i64*
  %434 = load i64, i64* %433
  %435 = add i64 %423, 16
  %436 = inttoptr i64 %435 to i64*
  %437 = load i64, i64* %436
  %438 = add i64 %423, 24
  %439 = inttoptr i64 %438 to i64*
  %440 = load i64, i64* %439
  %441 = add i64 %423, 32
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %423, 40
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %423, 48
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i64 %423, 56
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  %453 = add i64 %423, 64
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %423, 72
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = inttoptr i64 %424 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %3, align 8, !alias.scope !1640, !noalias !1643
  store i64 %423, i64* %19, align 8, !alias.scope !1640, !noalias !1643
  %461 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 528), i64 %418, i64 %426, i64 %427, i64 %428, i64 %429, i64 %431, i64 %434, i64 %437, i64 %440, i64 %443, i64 %446, i64 %449, i64 %452, i64 %455, i64 %458), !noalias !1640
  %462 = load i64, i64* %3, align 8
  %463 = load i64, i64* %20, align 8
  %464 = add i64 %463, 64
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %463, -296
  %468 = trunc i64 %461 to i32
  %469 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %469
  %470 = add i64 %462, 27
  %471 = load i64, i64* %19, align 8, !tbaa !1240
  %472 = add i64 %471, -8
  %473 = inttoptr i64 %472 to i64*
  store i64 %470, i64* %473
  %474 = load i64, i64* %168, align 8, !alias.scope !1645, !noalias !1648
  %475 = load i64, i64* %167, align 8, !alias.scope !1645, !noalias !1648
  %476 = load i64, i64* %170, align 8, !alias.scope !1645, !noalias !1648
  %477 = load i64, i64* %171, align 8, !alias.scope !1645, !noalias !1648
  %478 = inttoptr i64 %471 to i64*
  %479 = load i64, i64* %478
  %480 = add i64 %471, 8
  %481 = inttoptr i64 %480 to i64*
  %482 = load i64, i64* %481
  %483 = add i64 %471, 16
  %484 = inttoptr i64 %483 to i64*
  %485 = load i64, i64* %484
  %486 = add i64 %471, 24
  %487 = inttoptr i64 %486 to i64*
  %488 = load i64, i64* %487
  %489 = add i64 %471, 32
  %490 = inttoptr i64 %489 to i64*
  %491 = load i64, i64* %490
  %492 = add i64 %471, 40
  %493 = inttoptr i64 %492 to i64*
  %494 = load i64, i64* %493
  %495 = add i64 %471, 48
  %496 = inttoptr i64 %495 to i64*
  %497 = load i64, i64* %496
  %498 = add i64 %471, 56
  %499 = inttoptr i64 %498 to i64*
  %500 = load i64, i64* %499
  %501 = add i64 %471, 64
  %502 = inttoptr i64 %501 to i64*
  %503 = load i64, i64* %502
  %504 = add i64 %471, 72
  %505 = inttoptr i64 %504 to i64*
  %506 = load i64, i64* %505
  %507 = inttoptr i64 %472 to i64*
  %508 = load i64, i64* %507
  store i64 %508, i64* %3, align 8, !alias.scope !1645, !noalias !1648
  store i64 %471, i64* %19, align 8, !alias.scope !1645, !noalias !1648
  %509 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 551), i64 %466, i64 %474, i64 %475, i64 %476, i64 %477, i64 %479, i64 %482, i64 %485, i64 %488, i64 %491, i64 %494, i64 %497, i64 %500, i64 %503, i64 %506), !noalias !1645
  %510 = load i64, i64* %3, align 8
  %511 = load i64, i64* %20, align 8
  %512 = add i64 %511, 72
  %513 = inttoptr i64 %512 to i64*
  %514 = load i64, i64* %513
  %515 = add i64 %511, -300
  %516 = trunc i64 %509 to i32
  %517 = inttoptr i64 %515 to i32*
  store i32 %516, i32* %517
  %518 = add i64 %510, 27
  %519 = load i64, i64* %19, align 8, !tbaa !1240
  %520 = add i64 %519, -8
  %521 = inttoptr i64 %520 to i64*
  store i64 %518, i64* %521
  %522 = load i64, i64* %168, align 8, !alias.scope !1650, !noalias !1653
  %523 = load i64, i64* %167, align 8, !alias.scope !1650, !noalias !1653
  %524 = load i64, i64* %170, align 8, !alias.scope !1650, !noalias !1653
  %525 = load i64, i64* %171, align 8, !alias.scope !1650, !noalias !1653
  %526 = inttoptr i64 %519 to i64*
  %527 = load i64, i64* %526
  %528 = add i64 %519, 8
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = add i64 %519, 16
  %532 = inttoptr i64 %531 to i64*
  %533 = load i64, i64* %532
  %534 = add i64 %519, 24
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  %537 = add i64 %519, 32
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  %540 = add i64 %519, 40
  %541 = inttoptr i64 %540 to i64*
  %542 = load i64, i64* %541
  %543 = add i64 %519, 48
  %544 = inttoptr i64 %543 to i64*
  %545 = load i64, i64* %544
  %546 = add i64 %519, 56
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  %549 = add i64 %519, 64
  %550 = inttoptr i64 %549 to i64*
  %551 = load i64, i64* %550
  %552 = add i64 %519, 72
  %553 = inttoptr i64 %552 to i64*
  %554 = load i64, i64* %553
  %555 = inttoptr i64 %520 to i64*
  %556 = load i64, i64* %555
  store i64 %556, i64* %3, align 8, !alias.scope !1650, !noalias !1653
  store i64 %519, i64* %19, align 8, !alias.scope !1650, !noalias !1653
  %557 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 574), i64 %514, i64 %522, i64 %523, i64 %524, i64 %525, i64 %527, i64 %530, i64 %533, i64 %536, i64 %539, i64 %542, i64 %545, i64 %548, i64 %551, i64 %554), !noalias !1650
  %558 = load i64, i64* %3, align 8
  %559 = load i64, i64* %20, align 8
  %560 = add i64 %559, 80
  %561 = inttoptr i64 %560 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %559, -304
  %564 = trunc i64 %557 to i32
  %565 = inttoptr i64 %563 to i32*
  store i32 %564, i32* %565
  %566 = add i64 %558, 27
  %567 = load i64, i64* %19, align 8, !tbaa !1240
  %568 = add i64 %567, -8
  %569 = inttoptr i64 %568 to i64*
  store i64 %566, i64* %569
  %570 = load i64, i64* %168, align 8, !alias.scope !1655, !noalias !1658
  %571 = load i64, i64* %167, align 8, !alias.scope !1655, !noalias !1658
  %572 = load i64, i64* %170, align 8, !alias.scope !1655, !noalias !1658
  %573 = load i64, i64* %171, align 8, !alias.scope !1655, !noalias !1658
  %574 = inttoptr i64 %567 to i64*
  %575 = load i64, i64* %574
  %576 = add i64 %567, 8
  %577 = inttoptr i64 %576 to i64*
  %578 = load i64, i64* %577
  %579 = add i64 %567, 16
  %580 = inttoptr i64 %579 to i64*
  %581 = load i64, i64* %580
  %582 = add i64 %567, 24
  %583 = inttoptr i64 %582 to i64*
  %584 = load i64, i64* %583
  %585 = add i64 %567, 32
  %586 = inttoptr i64 %585 to i64*
  %587 = load i64, i64* %586
  %588 = add i64 %567, 40
  %589 = inttoptr i64 %588 to i64*
  %590 = load i64, i64* %589
  %591 = add i64 %567, 48
  %592 = inttoptr i64 %591 to i64*
  %593 = load i64, i64* %592
  %594 = add i64 %567, 56
  %595 = inttoptr i64 %594 to i64*
  %596 = load i64, i64* %595
  %597 = add i64 %567, 64
  %598 = inttoptr i64 %597 to i64*
  %599 = load i64, i64* %598
  %600 = add i64 %567, 72
  %601 = inttoptr i64 %600 to i64*
  %602 = load i64, i64* %601
  %603 = inttoptr i64 %568 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %3, align 8, !alias.scope !1655, !noalias !1658
  store i64 %567, i64* %19, align 8, !alias.scope !1655, !noalias !1658
  %605 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 597), i64 %562, i64 %570, i64 %571, i64 %572, i64 %573, i64 %575, i64 %578, i64 %581, i64 %584, i64 %587, i64 %590, i64 %593, i64 %596, i64 %599, i64 %602), !noalias !1655
  %606 = load i64, i64* %3, align 8
  %607 = load i64, i64* %20, align 8
  %608 = add i64 %607, 88
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %607, -308
  %612 = trunc i64 %605 to i32
  %613 = inttoptr i64 %611 to i32*
  store i32 %612, i32* %613
  %614 = add i64 %606, 27
  %615 = load i64, i64* %19, align 8, !tbaa !1240
  %616 = add i64 %615, -8
  %617 = inttoptr i64 %616 to i64*
  store i64 %614, i64* %617
  %618 = load i64, i64* %168, align 8, !alias.scope !1660, !noalias !1663
  %619 = load i64, i64* %167, align 8, !alias.scope !1660, !noalias !1663
  %620 = load i64, i64* %170, align 8, !alias.scope !1660, !noalias !1663
  %621 = load i64, i64* %171, align 8, !alias.scope !1660, !noalias !1663
  %622 = inttoptr i64 %615 to i64*
  %623 = load i64, i64* %622
  %624 = add i64 %615, 8
  %625 = inttoptr i64 %624 to i64*
  %626 = load i64, i64* %625
  %627 = add i64 %615, 16
  %628 = inttoptr i64 %627 to i64*
  %629 = load i64, i64* %628
  %630 = add i64 %615, 24
  %631 = inttoptr i64 %630 to i64*
  %632 = load i64, i64* %631
  %633 = add i64 %615, 32
  %634 = inttoptr i64 %633 to i64*
  %635 = load i64, i64* %634
  %636 = add i64 %615, 40
  %637 = inttoptr i64 %636 to i64*
  %638 = load i64, i64* %637
  %639 = add i64 %615, 48
  %640 = inttoptr i64 %639 to i64*
  %641 = load i64, i64* %640
  %642 = add i64 %615, 56
  %643 = inttoptr i64 %642 to i64*
  %644 = load i64, i64* %643
  %645 = add i64 %615, 64
  %646 = inttoptr i64 %645 to i64*
  %647 = load i64, i64* %646
  %648 = add i64 %615, 72
  %649 = inttoptr i64 %648 to i64*
  %650 = load i64, i64* %649
  %651 = inttoptr i64 %616 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %3, align 8, !alias.scope !1660, !noalias !1663
  store i64 %615, i64* %19, align 8, !alias.scope !1660, !noalias !1663
  %653 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 620), i64 %610, i64 %618, i64 %619, i64 %620, i64 %621, i64 %623, i64 %626, i64 %629, i64 %632, i64 %635, i64 %638, i64 %641, i64 %644, i64 %647, i64 %650), !noalias !1660
  %654 = load i64, i64* %3, align 8
  %655 = load i64, i64* %20, align 8
  %656 = add i64 %655, 96
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %17, align 8, !tbaa !1240
  %659 = add i64 %655, -312
  %660 = trunc i64 %653 to i32
  %661 = inttoptr i64 %659 to i32*
  store i32 %660, i32* %661
  %662 = add i64 %654, 27
  %663 = load i64, i64* %19, align 8, !tbaa !1240
  %664 = add i64 %663, -8
  %665 = inttoptr i64 %664 to i64*
  store i64 %662, i64* %665
  %666 = load i64, i64* %168, align 8, !alias.scope !1665, !noalias !1668
  %667 = load i64, i64* %167, align 8, !alias.scope !1665, !noalias !1668
  %668 = load i64, i64* %170, align 8, !alias.scope !1665, !noalias !1668
  %669 = load i64, i64* %171, align 8, !alias.scope !1665, !noalias !1668
  %670 = inttoptr i64 %663 to i64*
  %671 = load i64, i64* %670
  %672 = add i64 %663, 8
  %673 = inttoptr i64 %672 to i64*
  %674 = load i64, i64* %673
  %675 = add i64 %663, 16
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = add i64 %663, 24
  %679 = inttoptr i64 %678 to i64*
  %680 = load i64, i64* %679
  %681 = add i64 %663, 32
  %682 = inttoptr i64 %681 to i64*
  %683 = load i64, i64* %682
  %684 = add i64 %663, 40
  %685 = inttoptr i64 %684 to i64*
  %686 = load i64, i64* %685
  %687 = add i64 %663, 48
  %688 = inttoptr i64 %687 to i64*
  %689 = load i64, i64* %688
  %690 = add i64 %663, 56
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %663, 64
  %694 = inttoptr i64 %693 to i64*
  %695 = load i64, i64* %694
  %696 = add i64 %663, 72
  %697 = inttoptr i64 %696 to i64*
  %698 = load i64, i64* %697
  %699 = inttoptr i64 %664 to i64*
  %700 = load i64, i64* %699
  store i64 %700, i64* %3, align 8, !alias.scope !1665, !noalias !1668
  store i64 %663, i64* %19, align 8, !alias.scope !1665, !noalias !1668
  %701 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2390), i64 %658, i64 %666, i64 %667, i64 %668, i64 %669, i64 %671, i64 %674, i64 %677, i64 %680, i64 %683, i64 %686, i64 %689, i64 %692, i64 %695, i64 %698), !noalias !1665
  %702 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2413), i64* %18, align 8, !tbaa !1240
  %703 = load i64, i64* %20, align 8
  %704 = add i64 %703, -316
  %705 = trunc i64 %701 to i32
  %706 = inttoptr i64 %704 to i32*
  store i32 %705, i32* %706
  %707 = add i64 %702, 23
  %708 = load i64, i64* %19, align 8, !tbaa !1240
  %709 = add i64 %708, -8
  %710 = inttoptr i64 %709 to i64*
  store i64 %707, i64* %710
  %711 = load i64, i64* %169, align 8, !alias.scope !1670, !noalias !1673
  %712 = load i64, i64* %168, align 8, !alias.scope !1670, !noalias !1673
  %713 = load i64, i64* %167, align 8, !alias.scope !1670, !noalias !1673
  %714 = load i64, i64* %170, align 8, !alias.scope !1670, !noalias !1673
  %715 = load i64, i64* %171, align 8, !alias.scope !1670, !noalias !1673
  %716 = inttoptr i64 %708 to i64*
  %717 = load i64, i64* %716
  %718 = add i64 %708, 8
  %719 = inttoptr i64 %718 to i64*
  %720 = load i64, i64* %719
  %721 = add i64 %708, 16
  %722 = inttoptr i64 %721 to i64*
  %723 = load i64, i64* %722
  %724 = add i64 %708, 24
  %725 = inttoptr i64 %724 to i64*
  %726 = load i64, i64* %725
  %727 = add i64 %708, 32
  %728 = inttoptr i64 %727 to i64*
  %729 = load i64, i64* %728
  %730 = add i64 %708, 40
  %731 = inttoptr i64 %730 to i64*
  %732 = load i64, i64* %731
  %733 = add i64 %708, 48
  %734 = inttoptr i64 %733 to i64*
  %735 = load i64, i64* %734
  %736 = add i64 %708, 56
  %737 = inttoptr i64 %736 to i64*
  %738 = load i64, i64* %737
  %739 = add i64 %708, 64
  %740 = inttoptr i64 %739 to i64*
  %741 = load i64, i64* %740
  %742 = add i64 %708, 72
  %743 = inttoptr i64 %742 to i64*
  %744 = load i64, i64* %743
  store i64 %708, i64* %19, align 8, !alias.scope !1670, !noalias !1673
  %745 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2413), i64 %711, i64 %712, i64 %713, i64 %714, i64 %715, i64 %717, i64 %720, i64 %723, i64 %726, i64 %729, i64 %732, i64 %735, i64 %738, i64 %741, i64 %744), !noalias !1670
  store i64 %745, i64* %166, align 8, !alias.scope !1670, !noalias !1673
  %746 = load i64, i64* %20, align 8
  %747 = add i64 %746, -320
  %748 = trunc i64 %745 to i32
  %749 = inttoptr i64 %747 to i32*
  store i32 %748, i32* %749
  %750 = load i64, i64* %19, align 8
  %751 = add i64 %750, 280
  %752 = icmp ugt i64 %750, -281
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %49, align 1, !tbaa !1246
  %754 = trunc i64 %751 to i32
  %755 = and i32 %754, 255
  %756 = tail call i32 @llvm.ctpop.i32(i32 %755) #11
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  store i8 %759, i8* %50, align 1, !tbaa !1260
  %760 = xor i64 %750, 16
  %761 = xor i64 %760, %751
  %762 = lshr i64 %761, 4
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %51, align 1, !tbaa !1261
  %765 = icmp eq i64 %751, 0
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %52, align 1, !tbaa !1262
  %767 = lshr i64 %751, 63
  %768 = trunc i64 %767 to i8
  store i8 %768, i8* %53, align 1, !tbaa !1263
  %769 = lshr i64 %750, 63
  %770 = xor i64 %767, %769
  %771 = add nuw nsw i64 %770, %767
  %772 = icmp eq i64 %771, 2
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %54, align 1, !tbaa !1264
  %774 = add i64 %750, 288
  %775 = inttoptr i64 %751 to i64*
  %776 = load i64, i64* %775
  store i64 %776, i64* %14, align 8, !tbaa !1240
  %777 = add i64 %750, 296
  %778 = inttoptr i64 %774 to i64*
  %779 = load i64, i64* %778
  store i64 %779, i64* %23, align 8, !tbaa !1240
  %780 = add i64 %750, 304
  %781 = inttoptr i64 %777 to i64*
  %782 = load i64, i64* %781
  store i64 %782, i64* %24, align 8, !tbaa !1240
  %783 = add i64 %750, 312
  %784 = inttoptr i64 %780 to i64*
  %785 = load i64, i64* %784
  store i64 %785, i64* %25, align 8, !tbaa !1240
  %786 = add i64 %750, 320
  %787 = inttoptr i64 %783 to i64*
  %788 = load i64, i64* %787
  store i64 %788, i64* %26, align 8, !tbaa !1240
  %789 = add i64 %750, 328
  %790 = inttoptr i64 %786 to i64*
  %791 = load i64, i64* %790
  store i64 %791, i64* %20, align 8, !tbaa !1240
  %792 = inttoptr i64 %789 to i64*
  %793 = load i64, i64* %792
  store i64 %793, i64* %3, align 8, !tbaa !1240
  %794 = add i64 %750, 336
  store i64 %794, i64* %19, align 8, !tbaa !1240
  ret %struct.Memory* %274

block_40743c:                                     ; preds = %block_40739f
  %795 = add i64 %1158, 27
  %796 = load i64, i64* %19, align 8, !tbaa !1240
  %797 = add i64 %796, -8
  %798 = inttoptr i64 %797 to i64*
  store i64 %795, i64* %798
  %799 = load i64, i64* %168, align 8, !alias.scope !1675, !noalias !1678
  %800 = load i64, i64* %167, align 8, !alias.scope !1675, !noalias !1678
  %801 = load i64, i64* %170, align 8, !alias.scope !1675, !noalias !1678
  %802 = load i64, i64* %171, align 8, !alias.scope !1675, !noalias !1678
  %803 = inttoptr i64 %796 to i64*
  %804 = load i64, i64* %803
  %805 = add i64 %796, 8
  %806 = inttoptr i64 %805 to i64*
  %807 = load i64, i64* %806
  %808 = add i64 %796, 16
  %809 = inttoptr i64 %808 to i64*
  %810 = load i64, i64* %809
  %811 = add i64 %796, 24
  %812 = inttoptr i64 %811 to i64*
  %813 = load i64, i64* %812
  %814 = add i64 %796, 32
  %815 = inttoptr i64 %814 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %796, 40
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818
  %820 = add i64 %796, 48
  %821 = inttoptr i64 %820 to i64*
  %822 = load i64, i64* %821
  %823 = add i64 %796, 56
  %824 = inttoptr i64 %823 to i64*
  %825 = load i64, i64* %824
  %826 = add i64 %796, 64
  %827 = inttoptr i64 %826 to i64*
  %828 = load i64, i64* %827
  %829 = add i64 %796, 72
  %830 = inttoptr i64 %829 to i64*
  %831 = load i64, i64* %830
  %832 = inttoptr i64 %797 to i64*
  %833 = load i64, i64* %832
  store i64 %833, i64* %3, align 8, !alias.scope !1675, !noalias !1678
  store i64 %796, i64* %19, align 8, !alias.scope !1675, !noalias !1678
  %834 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2298), i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2335), i64 %799, i64 %800, i64 %801, i64 %802, i64 %804, i64 %807, i64 %810, i64 %813, i64 %816, i64 %819, i64 %822, i64 %825, i64 %828, i64 %831), !noalias !1675
  %835 = load i64, i64* %20, align 8
  %836 = add i64 %835, -280
  %837 = trunc i64 %834 to i32
  %838 = load i64, i64* %3, align 8
  %839 = add i64 %838, 6
  %840 = inttoptr i64 %836 to i32*
  store i32 %837, i32* %840
  br label %block_40745d

block_40737f:                                     ; preds = %block_40729f, %block_407190
  %841 = phi i64 [ %1207, %block_40729f ], [ %268, %block_407190 ]
  %842 = add i64 %258, -56
  %843 = inttoptr i64 %842 to i32*
  %844 = load i32, i32* %843
  %845 = zext i32 %844 to i64
  %846 = inttoptr i64 %259 to i32*
  %847 = load i32, i32* %846
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %16, align 8, !tbaa !1240
  %849 = zext i32 %271 to i64
  store i64 %849, i64* %15, align 8, !tbaa !1240
  %850 = add i64 %841, 26
  %851 = load i64, i64* %19, align 8, !tbaa !1240
  %852 = add i64 %851, -8
  %853 = inttoptr i64 %852 to i64*
  store i64 %850, i64* %853
  %854 = load i64, i64* %170, align 8, !alias.scope !1680, !noalias !1683
  %855 = load i64, i64* %171, align 8, !alias.scope !1680, !noalias !1683
  %856 = inttoptr i64 %851 to i64*
  %857 = load i64, i64* %856
  %858 = add i64 %851, 8
  %859 = inttoptr i64 %858 to i64*
  %860 = load i64, i64* %859
  %861 = add i64 %851, 16
  %862 = inttoptr i64 %861 to i64*
  %863 = load i64, i64* %862
  %864 = add i64 %851, 24
  %865 = inttoptr i64 %864 to i64*
  %866 = load i64, i64* %865
  %867 = add i64 %851, 32
  %868 = inttoptr i64 %867 to i64*
  %869 = load i64, i64* %868
  %870 = add i64 %851, 40
  %871 = inttoptr i64 %870 to i64*
  %872 = load i64, i64* %871
  %873 = add i64 %851, 48
  %874 = inttoptr i64 %873 to i64*
  %875 = load i64, i64* %874
  %876 = add i64 %851, 56
  %877 = inttoptr i64 %876 to i64*
  %878 = load i64, i64* %877
  %879 = add i64 %851, 64
  %880 = inttoptr i64 %879 to i64*
  %881 = load i64, i64* %880
  %882 = add i64 %851, 72
  %883 = inttoptr i64 %882 to i64*
  %884 = load i64, i64* %883
  %885 = inttoptr i64 %852 to i64*
  %886 = load i64, i64* %885
  store i64 %886, i64* %3, align 8, !alias.scope !1680, !noalias !1683
  store i64 %851, i64* %19, align 8, !alias.scope !1680, !noalias !1683
  %887 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2179), i64 %845, i64 %848, i64 %849, i64 %854, i64 %855, i64 %857, i64 %860, i64 %863, i64 %866, i64 %869, i64 %872, i64 %875, i64 %878, i64 %881, i64 %884), !noalias !1680
  %888 = load i64, i64* %20, align 8
  %889 = add i64 %888, -256
  %890 = trunc i64 %887 to i32
  %891 = load i64, i64* %3, align 8
  %892 = add i64 %891, 6
  %893 = inttoptr i64 %889 to i32*
  store i32 %890, i32* %893
  br label %block_40739f

block_40737a:                                     ; preds = %block_407360, %block_407332
  %894 = phi i64 [ %1345, %block_407360 ], [ %947, %block_407332 ]
  %895 = phi i64 [ %1349, %block_407360 ], [ %952, %block_407332 ]
  %896 = phi %struct.Memory* [ %2, %block_407360 ], [ %899, %block_407332 ]
  %897 = add i64 %895, 37
  br label %block_40739f

block_407332:                                     ; preds = %block_407320, %block_4072ca
  %898 = phi i64 [ %1299, %block_4072ca ], [ %1372, %block_407320 ]
  %899 = phi %struct.Memory* [ %2, %block_4072ca ], [ %2, %block_407320 ]
  %900 = add i64 %1281, -112
  %901 = inttoptr i64 %1282 to i32*
  %902 = load i32, i32* %901
  %903 = add i32 %902, 1
  %904 = sext i32 %903 to i64
  store i64 %904, i64* %15, align 8, !tbaa !1240
  %905 = add nsw i64 %904, -112
  %906 = add i64 %905, %1281
  %907 = inttoptr i64 %906 to i8*
  store i8 0, i8* %907
  %908 = add i64 %898, 35
  %909 = load i64, i64* %19, align 8, !tbaa !1240
  %910 = add i64 %909, -8
  %911 = inttoptr i64 %910 to i64*
  store i64 %908, i64* %911
  %912 = load i64, i64* %168, align 8, !alias.scope !1685, !noalias !1688
  %913 = load i64, i64* %170, align 8, !alias.scope !1685, !noalias !1688
  %914 = load i64, i64* %171, align 8, !alias.scope !1685, !noalias !1688
  %915 = inttoptr i64 %909 to i64*
  %916 = load i64, i64* %915
  %917 = add i64 %909, 8
  %918 = inttoptr i64 %917 to i64*
  %919 = load i64, i64* %918
  %920 = add i64 %909, 16
  %921 = inttoptr i64 %920 to i64*
  %922 = load i64, i64* %921
  %923 = add i64 %909, 24
  %924 = inttoptr i64 %923 to i64*
  %925 = load i64, i64* %924
  %926 = add i64 %909, 32
  %927 = inttoptr i64 %926 to i64*
  %928 = load i64, i64* %927
  %929 = add i64 %909, 40
  %930 = inttoptr i64 %929 to i64*
  %931 = load i64, i64* %930
  %932 = add i64 %909, 48
  %933 = inttoptr i64 %932 to i64*
  %934 = load i64, i64* %933
  %935 = add i64 %909, 56
  %936 = inttoptr i64 %935 to i64*
  %937 = load i64, i64* %936
  %938 = add i64 %909, 64
  %939 = inttoptr i64 %938 to i64*
  %940 = load i64, i64* %939
  %941 = add i64 %909, 72
  %942 = inttoptr i64 %941 to i64*
  %943 = load i64, i64* %942
  %944 = inttoptr i64 %910 to i64*
  %945 = load i64, i64* %944
  store i64 %945, i64* %3, align 8, !alias.scope !1685, !noalias !1688
  store i64 %909, i64* %19, align 8, !alias.scope !1685, !noalias !1688
  %946 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2108), i64 %900, i64 %912, i64 %904, i64 %913, i64 %914, i64 %916, i64 %919, i64 %922, i64 %925, i64 %928, i64 %931, i64 %934, i64 %937, i64 %940, i64 %943), !noalias !1685
  %947 = load i64, i64* %20, align 8
  %948 = add i64 %947, -248
  %949 = trunc i64 %946 to i32
  %950 = load i64, i64* %3, align 8
  %951 = inttoptr i64 %948 to i32*
  store i32 %949, i32* %951
  %952 = add i64 %950, 37
  br label %block_40737a

block_40739f:                                     ; preds = %block_40737a, %block_40737f
  %953 = phi i64 [ %888, %block_40737f ], [ %894, %block_40737a ]
  %954 = phi i64 [ %892, %block_40737f ], [ %897, %block_40737a ]
  %955 = phi %struct.Memory* [ %2, %block_40737f ], [ %896, %block_40737a ]
  %956 = add i64 %953, -68
  %957 = inttoptr i64 %956 to i32*
  %958 = load i32, i32* %957
  %959 = zext i32 %958 to i64
  store i64 %959, i64* %17, align 8, !tbaa !1240
  %960 = add i64 %954, 20
  %961 = load i64, i64* %19, align 8, !tbaa !1240
  %962 = add i64 %961, -8
  %963 = inttoptr i64 %962 to i64*
  store i64 %960, i64* %963
  %964 = load i64, i64* %168, align 8, !alias.scope !1690, !noalias !1693
  %965 = load i64, i64* %167, align 8, !alias.scope !1690, !noalias !1693
  %966 = load i64, i64* %170, align 8, !alias.scope !1690, !noalias !1693
  %967 = load i64, i64* %171, align 8, !alias.scope !1690, !noalias !1693
  %968 = inttoptr i64 %961 to i64*
  %969 = load i64, i64* %968
  %970 = add i64 %961, 8
  %971 = inttoptr i64 %970 to i64*
  %972 = load i64, i64* %971
  %973 = add i64 %961, 16
  %974 = inttoptr i64 %973 to i64*
  %975 = load i64, i64* %974
  %976 = add i64 %961, 24
  %977 = inttoptr i64 %976 to i64*
  %978 = load i64, i64* %977
  %979 = add i64 %961, 32
  %980 = inttoptr i64 %979 to i64*
  %981 = load i64, i64* %980
  %982 = add i64 %961, 40
  %983 = inttoptr i64 %982 to i64*
  %984 = load i64, i64* %983
  %985 = add i64 %961, 48
  %986 = inttoptr i64 %985 to i64*
  %987 = load i64, i64* %986
  %988 = add i64 %961, 56
  %989 = inttoptr i64 %988 to i64*
  %990 = load i64, i64* %989
  %991 = add i64 %961, 64
  %992 = inttoptr i64 %991 to i64*
  %993 = load i64, i64* %992
  %994 = add i64 %961, 72
  %995 = inttoptr i64 %994 to i64*
  %996 = load i64, i64* %995
  %997 = inttoptr i64 %962 to i64*
  %998 = load i64, i64* %997
  store i64 %998, i64* %3, align 8, !alias.scope !1690, !noalias !1693
  store i64 %961, i64* %19, align 8, !alias.scope !1690, !noalias !1693
  %999 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 159), i64 %959, i64 %964, i64 %965, i64 %966, i64 %967, i64 %969, i64 %972, i64 %975, i64 %978, i64 %981, i64 %984, i64 %987, i64 %990, i64 %993, i64 %996), !noalias !1690
  %1000 = load i64, i64* %3, align 8
  %1001 = load i64, i64* %20, align 8
  %1002 = add i64 %1001, -80
  %1003 = inttoptr i64 %1002 to double*
  %1004 = load double, double* %1003
  store double %1004, double* %123, align 1, !tbaa !1244
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1006 = bitcast i64* %1005 to double*
  store double 0.000000e+00, double* %1006, align 1, !tbaa !1244
  %1007 = add i64 %1001, -260
  %1008 = trunc i64 %999 to i32
  %1009 = inttoptr i64 %1007 to i32*
  store i32 %1008, i32* %1009
  %1010 = add i64 %1000, 28
  %1011 = load i64, i64* %19, align 8, !tbaa !1240
  %1012 = add i64 %1011, -8
  %1013 = inttoptr i64 %1012 to i64*
  store i64 %1010, i64* %1013
  %1014 = load i64, i64* %169, align 8, !alias.scope !1695, !noalias !1698
  %1015 = load i64, i64* %168, align 8, !alias.scope !1695, !noalias !1698
  %1016 = load i64, i64* %167, align 8, !alias.scope !1695, !noalias !1698
  %1017 = load i64, i64* %170, align 8, !alias.scope !1695, !noalias !1698
  %1018 = load i64, i64* %171, align 8, !alias.scope !1695, !noalias !1698
  %1019 = inttoptr i64 %1011 to i64*
  %1020 = load i64, i64* %1019
  %1021 = add i64 %1011, 8
  %1022 = inttoptr i64 %1021 to i64*
  %1023 = load i64, i64* %1022
  %1024 = add i64 %1011, 16
  %1025 = inttoptr i64 %1024 to i64*
  %1026 = load i64, i64* %1025
  %1027 = add i64 %1011, 24
  %1028 = inttoptr i64 %1027 to i64*
  %1029 = load i64, i64* %1028
  %1030 = add i64 %1011, 32
  %1031 = inttoptr i64 %1030 to i64*
  %1032 = load i64, i64* %1031
  %1033 = add i64 %1011, 40
  %1034 = inttoptr i64 %1033 to i64*
  %1035 = load i64, i64* %1034
  %1036 = add i64 %1011, 48
  %1037 = inttoptr i64 %1036 to i64*
  %1038 = load i64, i64* %1037
  %1039 = add i64 %1011, 56
  %1040 = inttoptr i64 %1039 to i64*
  %1041 = load i64, i64* %1040
  %1042 = add i64 %1011, 64
  %1043 = inttoptr i64 %1042 to i64*
  %1044 = load i64, i64* %1043
  %1045 = add i64 %1011, 72
  %1046 = inttoptr i64 %1045 to i64*
  %1047 = load i64, i64* %1046
  %1048 = inttoptr i64 %1012 to i64*
  %1049 = load i64, i64* %1048
  store i64 %1049, i64* %3, align 8, !alias.scope !1695, !noalias !1698
  store i64 %1011, i64* %19, align 8, !alias.scope !1695, !noalias !1698
  %1050 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2221), i64 %1014, i64 %1015, i64 %1016, i64 %1017, i64 %1018, i64 %1020, i64 %1023, i64 %1026, i64 %1029, i64 %1032, i64 %1035, i64 %1038, i64 %1041, i64 %1044, i64 %1047), !noalias !1695
  %1051 = load i64, i64* %3, align 8
  %1052 = load i64, i64* %20, align 8
  %1053 = add i64 %1052, -88
  %1054 = inttoptr i64 %1053 to double*
  %1055 = load double, double* %1054
  store double %1055, double* %123, align 1, !tbaa !1244
  store double 0.000000e+00, double* %1006, align 1, !tbaa !1244
  %1056 = add i64 %1052, -264
  %1057 = trunc i64 %1050 to i32
  %1058 = inttoptr i64 %1056 to i32*
  store i32 %1057, i32* %1058
  %1059 = add i64 %1051, 28
  %1060 = load i64, i64* %19, align 8, !tbaa !1240
  %1061 = add i64 %1060, -8
  %1062 = inttoptr i64 %1061 to i64*
  store i64 %1059, i64* %1062
  %1063 = load i64, i64* %169, align 8, !alias.scope !1700, !noalias !1703
  %1064 = load i64, i64* %168, align 8, !alias.scope !1700, !noalias !1703
  %1065 = load i64, i64* %167, align 8, !alias.scope !1700, !noalias !1703
  %1066 = load i64, i64* %170, align 8, !alias.scope !1700, !noalias !1703
  %1067 = load i64, i64* %171, align 8, !alias.scope !1700, !noalias !1703
  %1068 = inttoptr i64 %1060 to i64*
  %1069 = load i64, i64* %1068
  %1070 = add i64 %1060, 8
  %1071 = inttoptr i64 %1070 to i64*
  %1072 = load i64, i64* %1071
  %1073 = add i64 %1060, 16
  %1074 = inttoptr i64 %1073 to i64*
  %1075 = load i64, i64* %1074
  %1076 = add i64 %1060, 24
  %1077 = inttoptr i64 %1076 to i64*
  %1078 = load i64, i64* %1077
  %1079 = add i64 %1060, 32
  %1080 = inttoptr i64 %1079 to i64*
  %1081 = load i64, i64* %1080
  %1082 = add i64 %1060, 40
  %1083 = inttoptr i64 %1082 to i64*
  %1084 = load i64, i64* %1083
  %1085 = add i64 %1060, 48
  %1086 = inttoptr i64 %1085 to i64*
  %1087 = load i64, i64* %1086
  %1088 = add i64 %1060, 56
  %1089 = inttoptr i64 %1088 to i64*
  %1090 = load i64, i64* %1089
  %1091 = add i64 %1060, 64
  %1092 = inttoptr i64 %1091 to i64*
  %1093 = load i64, i64* %1092
  %1094 = add i64 %1060, 72
  %1095 = inttoptr i64 %1094 to i64*
  %1096 = load i64, i64* %1095
  %1097 = inttoptr i64 %1061 to i64*
  %1098 = load i64, i64* %1097
  store i64 %1098, i64* %3, align 8, !alias.scope !1700, !noalias !1703
  store i64 %1060, i64* %19, align 8, !alias.scope !1700, !noalias !1703
  %1099 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2261), i64 %1063, i64 %1064, i64 %1065, i64 %1066, i64 %1067, i64 %1069, i64 %1072, i64 %1075, i64 %1078, i64 %1081, i64 %1084, i64 %1087, i64 %1090, i64 %1093, i64 %1096), !noalias !1700
  %1100 = load i64, i64* %3, align 8
  %1101 = load i64, i64* %20, align 8
  %1102 = add i64 %1101, 16
  %1103 = inttoptr i64 %1102 to i64*
  %1104 = load i64, i64* %1103
  %1105 = add i64 %1101, -268
  %1106 = trunc i64 %1099 to i32
  %1107 = inttoptr i64 %1105 to i32*
  store i32 %1106, i32* %1107
  %1108 = add i64 %1100, 27
  %1109 = load i64, i64* %19, align 8, !tbaa !1240
  %1110 = add i64 %1109, -8
  %1111 = inttoptr i64 %1110 to i64*
  store i64 %1108, i64* %1111
  %1112 = load i64, i64* %168, align 8, !alias.scope !1705, !noalias !1708
  %1113 = load i64, i64* %167, align 8, !alias.scope !1705, !noalias !1708
  %1114 = load i64, i64* %170, align 8, !alias.scope !1705, !noalias !1708
  %1115 = load i64, i64* %171, align 8, !alias.scope !1705, !noalias !1708
  %1116 = inttoptr i64 %1109 to i64*
  %1117 = load i64, i64* %1116
  %1118 = add i64 %1109, 8
  %1119 = inttoptr i64 %1118 to i64*
  %1120 = load i64, i64* %1119
  %1121 = add i64 %1109, 16
  %1122 = inttoptr i64 %1121 to i64*
  %1123 = load i64, i64* %1122
  %1124 = add i64 %1109, 24
  %1125 = inttoptr i64 %1124 to i64*
  %1126 = load i64, i64* %1125
  %1127 = add i64 %1109, 32
  %1128 = inttoptr i64 %1127 to i64*
  %1129 = load i64, i64* %1128
  %1130 = add i64 %1109, 40
  %1131 = inttoptr i64 %1130 to i64*
  %1132 = load i64, i64* %1131
  %1133 = add i64 %1109, 48
  %1134 = inttoptr i64 %1133 to i64*
  %1135 = load i64, i64* %1134
  %1136 = add i64 %1109, 56
  %1137 = inttoptr i64 %1136 to i64*
  %1138 = load i64, i64* %1137
  %1139 = add i64 %1109, 64
  %1140 = inttoptr i64 %1139 to i64*
  %1141 = load i64, i64* %1140
  %1142 = add i64 %1109, 72
  %1143 = inttoptr i64 %1142 to i64*
  %1144 = load i64, i64* %1143
  %1145 = inttoptr i64 %1110 to i64*
  %1146 = load i64, i64* %1145
  store i64 %1146, i64* %3, align 8, !alias.scope !1705, !noalias !1708
  store i64 %1109, i64* %19, align 8, !alias.scope !1705, !noalias !1708
  %1147 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 274), i64 %1104, i64 %1112, i64 %1113, i64 %1114, i64 %1115, i64 %1117, i64 %1120, i64 %1123, i64 %1126, i64 %1129, i64 %1132, i64 %1135, i64 %1138, i64 %1141, i64 %1144), !noalias !1705
  %1148 = load i64, i64* %20, align 8
  %1149 = add i64 %1148, 24
  %1150 = load i64, i64* %3, align 8
  %1151 = inttoptr i64 %1149 to i32*
  %1152 = load i32, i32* %1151
  %1153 = icmp eq i32 %1152, 0
  %1154 = add i64 %1148, -272
  %1155 = trunc i64 %1147 to i32
  %1156 = inttoptr i64 %1154 to i32*
  store i32 %1155, i32* %1156
  %1157 = select i1 %1153, i64 54, i64 16
  %1158 = add i64 %1150, %1157
  br i1 %1153, label %block_40743c, label %block_407416

block_407416:                                     ; preds = %block_40739f
  %1159 = add i64 %1158, 27
  %1160 = load i64, i64* %19, align 8, !tbaa !1240
  %1161 = add i64 %1160, -8
  %1162 = inttoptr i64 %1161 to i64*
  store i64 %1159, i64* %1162
  %1163 = load i64, i64* %168, align 8, !alias.scope !1710, !noalias !1713
  %1164 = load i64, i64* %167, align 8, !alias.scope !1710, !noalias !1713
  %1165 = load i64, i64* %170, align 8, !alias.scope !1710, !noalias !1713
  %1166 = load i64, i64* %171, align 8, !alias.scope !1710, !noalias !1713
  %1167 = inttoptr i64 %1160 to i64*
  %1168 = load i64, i64* %1167
  %1169 = add i64 %1160, 8
  %1170 = inttoptr i64 %1169 to i64*
  %1171 = load i64, i64* %1170
  %1172 = add i64 %1160, 16
  %1173 = inttoptr i64 %1172 to i64*
  %1174 = load i64, i64* %1173
  %1175 = add i64 %1160, 24
  %1176 = inttoptr i64 %1175 to i64*
  %1177 = load i64, i64* %1176
  %1178 = add i64 %1160, 32
  %1179 = inttoptr i64 %1178 to i64*
  %1180 = load i64, i64* %1179
  %1181 = add i64 %1160, 40
  %1182 = inttoptr i64 %1181 to i64*
  %1183 = load i64, i64* %1182
  %1184 = add i64 %1160, 48
  %1185 = inttoptr i64 %1184 to i64*
  %1186 = load i64, i64* %1185
  %1187 = add i64 %1160, 56
  %1188 = inttoptr i64 %1187 to i64*
  %1189 = load i64, i64* %1188
  %1190 = add i64 %1160, 64
  %1191 = inttoptr i64 %1190 to i64*
  %1192 = load i64, i64* %1191
  %1193 = add i64 %1160, 72
  %1194 = inttoptr i64 %1193 to i64*
  %1195 = load i64, i64* %1194
  %1196 = inttoptr i64 %1161 to i64*
  %1197 = load i64, i64* %1196
  store i64 %1197, i64* %3, align 8, !alias.scope !1710, !noalias !1713
  store i64 %1160, i64* %19, align 8, !alias.scope !1710, !noalias !1713
  %1198 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2298), i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2337), i64 %1163, i64 %1164, i64 %1165, i64 %1166, i64 %1168, i64 %1171, i64 %1174, i64 %1177, i64 %1180, i64 %1183, i64 %1186, i64 %1189, i64 %1192, i64 %1195), !noalias !1710
  %1199 = load i64, i64* %20, align 8
  %1200 = add i64 %1199, -276
  %1201 = trunc i64 %1198 to i32
  %1202 = load i64, i64* %3, align 8
  %1203 = inttoptr i64 %1200 to i32*
  store i32 %1201, i32* %1203
  %1204 = add i64 %1202, 44
  br label %block_40745d

block_40729f:                                     ; preds = %block_407190
  %1205 = icmp eq i32 %271, 0
  %1206 = select i1 %1205, i64 10, i64 224
  %1207 = add i64 %268, %1206
  br i1 %1205, label %block_4072a9, label %block_40737f

block_4072b9:                                     ; preds = %block_4072a9
  %1208 = add i64 %1353, 1
  %1209 = inttoptr i64 %1208 to i8*
  %1210 = load i8, i8* %1209
  %1211 = sext i8 %1210 to i64
  %1212 = and i64 %1211, 4294967295
  store i64 %1212, i64* %15, align 8, !tbaa !1240
  %1213 = sext i8 %1210 to i32
  %1214 = add nsw i32 %1213, -80
  %1215 = icmp eq i32 %1214, 0
  %1216 = select i1 %1215, i64 17, i64 167
  %1217 = add i64 %1362, %1216
  br i1 %1215, label %block_4072ca, label %block_407360

block_4072ca:                                     ; preds = %block_4072b9
  %1218 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1008) to double*)
  store double %1218, double* %123, align 1, !tbaa !1244
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1220 = bitcast i64* %1219 to double*
  store double 0.000000e+00, double* %1220, align 1, !tbaa !1244
  %1221 = add i64 %258, -112
  %1222 = add i64 %258, -56
  %1223 = inttoptr i64 %1222 to i32*
  %1224 = load i32, i32* %1223
  %1225 = sitofp i32 %1224 to double
  store double %1225, double* %127, align 1, !tbaa !1244
  %1226 = add i64 %258, -240
  %1227 = inttoptr i64 %1226 to i64*
  store i64 %1221, i64* %1227
  %1228 = add i64 %1217, 31
  %1229 = load i64, i64* %19, align 8, !tbaa !1240
  %1230 = add i64 %1229, -8
  %1231 = inttoptr i64 %1230 to i64*
  store i64 %1228, i64* %1231
  %1232 = load i64, i64* %169, align 8, !alias.scope !1715, !noalias !1718
  %1233 = inttoptr i64 %1230 to i64*
  %1234 = load i64, i64* %1233
  store i64 %1234, i64* %3, align 8, !alias.scope !1715, !noalias !1718
  store i64 %1229, i64* %19, align 8, !alias.scope !1715, !noalias !1718
  %1235 = tail call i64 @pow(i64 %1221, i64 %1232), !noalias !1715
  %1236 = load i64, i64* %3, align 8
  %1237 = load i64, i64* %20, align 8
  %1238 = add i64 %1237, -240
  %1239 = inttoptr i64 %1238 to i64*
  %1240 = load i64, i64* %1239
  %1241 = add i64 %1236, 24
  %1242 = load i64, i64* %19, align 8, !tbaa !1240
  %1243 = add i64 %1242, -8
  %1244 = inttoptr i64 %1243 to i64*
  store i64 %1241, i64* %1244
  %1245 = load i64, i64* %168, align 8, !alias.scope !1720, !noalias !1723
  %1246 = load i64, i64* %167, align 8, !alias.scope !1720, !noalias !1723
  %1247 = load i64, i64* %170, align 8, !alias.scope !1720, !noalias !1723
  %1248 = load i64, i64* %171, align 8, !alias.scope !1720, !noalias !1723
  %1249 = inttoptr i64 %1242 to i64*
  %1250 = load i64, i64* %1249
  %1251 = add i64 %1242, 8
  %1252 = inttoptr i64 %1251 to i64*
  %1253 = load i64, i64* %1252
  %1254 = add i64 %1242, 16
  %1255 = inttoptr i64 %1254 to i64*
  %1256 = load i64, i64* %1255
  %1257 = add i64 %1242, 24
  %1258 = inttoptr i64 %1257 to i64*
  %1259 = load i64, i64* %1258
  %1260 = add i64 %1242, 32
  %1261 = inttoptr i64 %1260 to i64*
  %1262 = load i64, i64* %1261
  %1263 = add i64 %1242, 40
  %1264 = inttoptr i64 %1263 to i64*
  %1265 = load i64, i64* %1264
  %1266 = add i64 %1242, 48
  %1267 = inttoptr i64 %1266 to i64*
  %1268 = load i64, i64* %1267
  %1269 = add i64 %1242, 56
  %1270 = inttoptr i64 %1269 to i64*
  %1271 = load i64, i64* %1270
  %1272 = add i64 %1242, 64
  %1273 = inttoptr i64 %1272 to i64*
  %1274 = load i64, i64* %1273
  %1275 = add i64 %1242, 72
  %1276 = inttoptr i64 %1275 to i64*
  %1277 = load i64, i64* %1276
  %1278 = inttoptr i64 %1243 to i64*
  %1279 = load i64, i64* %1278
  store i64 %1279, i64* %3, align 8, !alias.scope !1720, !noalias !1723
  store i64 %1242, i64* %19, align 8, !alias.scope !1720, !noalias !1723
  %1280 = tail call i64 @sprintf(i64 %1240, i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2100), i64 %1245, i64 %1246, i64 %1247, i64 %1248, i64 %1250, i64 %1253, i64 %1256, i64 %1259, i64 %1262, i64 %1265, i64 %1268, i64 %1271, i64 %1274, i64 %1277), !noalias !1720
  %1281 = load i64, i64* %20, align 8
  %1282 = add i64 %1281, -116
  %1283 = load i64, i64* %3, align 8
  %1284 = inttoptr i64 %1282 to i32*
  store i32 14, i32* %1284
  %1285 = inttoptr i64 %1282 to i32*
  %1286 = load i32, i32* %1285
  %1287 = sext i32 %1286 to i64
  %1288 = add nsw i64 %1287, -112
  %1289 = add i64 %1288, %1281
  %1290 = inttoptr i64 %1289 to i8*
  %1291 = load i8, i8* %1290
  %1292 = sext i8 %1291 to i32
  %1293 = add nsw i32 %1292, -46
  %1294 = icmp eq i32 %1293, 0
  %1295 = add i64 %1281, -244
  %1296 = trunc i64 %1280 to i32
  %1297 = inttoptr i64 %1295 to i32*
  store i32 %1296, i32* %1297
  %1298 = select i1 %1294, i64 31, i64 49
  %1299 = add i64 %1283, %1298
  br i1 %1294, label %block_407320, label %block_407332

block_407360:                                     ; preds = %block_4072a9, %block_4072b9
  %1300 = phi i64 [ %1357, %block_4072a9 ], [ %1212, %block_4072b9 ]
  %1301 = phi i64 [ %1362, %block_4072a9 ], [ %1217, %block_4072b9 ]
  %1302 = add i64 %258, -56
  %1303 = inttoptr i64 %1302 to i32*
  %1304 = load i32, i32* %1303
  %1305 = zext i32 %1304 to i64
  %1306 = add i64 %1301, 20
  %1307 = load i64, i64* %19, align 8, !tbaa !1240
  %1308 = add i64 %1307, -8
  %1309 = inttoptr i64 %1308 to i64*
  store i64 %1306, i64* %1309
  %1310 = load i64, i64* %168, align 8, !alias.scope !1725, !noalias !1728
  %1311 = load i64, i64* %170, align 8, !alias.scope !1725, !noalias !1728
  %1312 = load i64, i64* %171, align 8, !alias.scope !1725, !noalias !1728
  %1313 = inttoptr i64 %1307 to i64*
  %1314 = load i64, i64* %1313
  %1315 = add i64 %1307, 8
  %1316 = inttoptr i64 %1315 to i64*
  %1317 = load i64, i64* %1316
  %1318 = add i64 %1307, 16
  %1319 = inttoptr i64 %1318 to i64*
  %1320 = load i64, i64* %1319
  %1321 = add i64 %1307, 24
  %1322 = inttoptr i64 %1321 to i64*
  %1323 = load i64, i64* %1322
  %1324 = add i64 %1307, 32
  %1325 = inttoptr i64 %1324 to i64*
  %1326 = load i64, i64* %1325
  %1327 = add i64 %1307, 40
  %1328 = inttoptr i64 %1327 to i64*
  %1329 = load i64, i64* %1328
  %1330 = add i64 %1307, 48
  %1331 = inttoptr i64 %1330 to i64*
  %1332 = load i64, i64* %1331
  %1333 = add i64 %1307, 56
  %1334 = inttoptr i64 %1333 to i64*
  %1335 = load i64, i64* %1334
  %1336 = add i64 %1307, 64
  %1337 = inttoptr i64 %1336 to i64*
  %1338 = load i64, i64* %1337
  %1339 = add i64 %1307, 72
  %1340 = inttoptr i64 %1339 to i64*
  %1341 = load i64, i64* %1340
  %1342 = inttoptr i64 %1308 to i64*
  %1343 = load i64, i64* %1342
  store i64 %1343, i64* %3, align 8, !alias.scope !1725, !noalias !1728
  store i64 %1307, i64* %19, align 8, !alias.scope !1725, !noalias !1728
  %1344 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2142), i64 %1305, i64 %1310, i64 %1300, i64 %1311, i64 %1312, i64 %1314, i64 %1317, i64 %1320, i64 %1323, i64 %1326, i64 %1329, i64 %1332, i64 %1335, i64 %1338, i64 %1341), !noalias !1725
  %1345 = load i64, i64* %20, align 8
  %1346 = add i64 %1345, -252
  %1347 = trunc i64 %1344 to i32
  %1348 = load i64, i64* %3, align 8
  %1349 = add i64 %1348, 6
  %1350 = inttoptr i64 %1346 to i32*
  store i32 %1347, i32* %1350
  br label %block_40737a

block_4072a9:                                     ; preds = %block_40729f
  %1351 = add i64 %258, -48
  %1352 = inttoptr i64 %1351 to i64*
  %1353 = load i64, i64* %1352
  %1354 = inttoptr i64 %1353 to i8*
  %1355 = load i8, i8* %1354
  %1356 = sext i8 %1355 to i64
  %1357 = and i64 %1356, 4294967295
  store i64 %1357, i64* %15, align 8, !tbaa !1240
  %1358 = sext i8 %1355 to i32
  %1359 = add nsw i32 %1358, -69
  %1360 = icmp eq i32 %1359, 0
  %1361 = select i1 %1360, i64 16, i64 183
  %1362 = add i64 %1207, %1361
  br i1 %1360, label %block_4072b9, label %block_407360

block_407320:                                     ; preds = %block_4072ca
  %1363 = inttoptr i64 %1282 to i32*
  %1364 = load i32, i32* %1363
  %1365 = sext i32 %1364 to i64
  %1366 = add nsw i64 %1365, -112
  %1367 = add i64 %1366, %1281
  %1368 = inttoptr i64 %1367 to i8*
  store i8 32, i8* %1368
  %1369 = inttoptr i64 %1282 to i32*
  %1370 = load i32, i32* %1369
  %1371 = add i32 %1370, -1
  %1372 = add i64 %1299, 18
  %1373 = inttoptr i64 %1282 to i32*
  store i32 %1371, i32* %1373
  br label %block_407332
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4076d0_vranlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4076d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %11, align 8, !tbaa !1240
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22
  store i64 %21, i64* %12, align 8, !tbaa !1240
  %23 = add i64 %20, -24
  store i64 %23, i64* %11, align 8, !tbaa !1240
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %30 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2624) to double*)
  %31 = bitcast %union.VectorReg* %14 to double*
  store double %30, double* %31, align 1, !tbaa !1244
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to double*
  %34 = bitcast %union.VectorReg* %15 to i8*
  %35 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2632) to double*)
  %36 = bitcast %union.VectorReg* %15 to double*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %38 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2616) to double*)
  %39 = bitcast %union.VectorReg* %16 to double*
  store double %38, double* %39, align 1, !tbaa !1244
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %41 = bitcast i64* %40 to double*
  store double 0.000000e+00, double* %41, align 1, !tbaa !1244
  %42 = bitcast %union.VectorReg* %17 to i8*
  %43 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2608) to double*)
  %44 = bitcast %union.VectorReg* %17 to double*
  store double %43, double* %44, align 1, !tbaa !1244
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %46 = bitcast i64* %45 to double*
  store double 0.000000e+00, double* %46, align 1, !tbaa !1244
  %47 = add i64 %20, -12
  %48 = load i32, i32* %5, align 4
  %49 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %49
  %50 = add i64 %20, -24
  %51 = load i64, i64* %9, align 8
  %52 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %52
  %53 = add i64 %20, -32
  %54 = bitcast [32 x %union.VectorReg]* %13 to double*
  %55 = load double, double* %54, align 1
  %56 = inttoptr i64 %53 to double*
  store double %55, double* %56
  %57 = add i64 %20, -40
  %58 = load i64, i64* %8, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %59
  %60 = add i64 %20, -48
  %61 = inttoptr i64 %60 to double*
  store double %35, double* %61
  %62 = add i64 %20, -56
  %63 = inttoptr i64 %62 to double*
  store double %43, double* %63
  %64 = add i64 %20, -64
  %65 = inttoptr i64 %64 to double*
  store double %30, double* %65
  %66 = load i64, i64* %12, align 8
  %67 = add i64 %66, -64
  %68 = inttoptr i64 %67 to double*
  store double %38, double* %68
  %69 = add i64 %66, -24
  %70 = inttoptr i64 %69 to double*
  %71 = load double, double* %70
  %72 = fmul double %35, %71
  store double %72, double* %36, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %73 = add i64 %66, -72
  %74 = inttoptr i64 %73 to double*
  store double %72, double* %74
  %75 = inttoptr i64 %73 to double*
  %76 = load double, double* %75
  %77 = tail call double @llvm.trunc.f64(double %76) #11
  %78 = tail call double @llvm.fabs.f64(double %77) #11
  %79 = fcmp ogt double %78, 0x41DFFFFFFFC00000
  %80 = fptosi double %77 to i32
  %81 = zext i32 %80 to i64
  %82 = select i1 %79, i64 2147483648, i64 %81
  store i64 %82, i64* %10, align 8, !tbaa !1240
  %83 = trunc i64 %82 to i32
  %84 = sitofp i32 %83 to double
  %85 = add i64 %66, -104
  %86 = inttoptr i64 %85 to double*
  store double %84, double* %86
  %87 = inttoptr i64 %69 to double*
  %88 = load double, double* %87
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast i64* %89 to double*
  %91 = load double, double* %31, align 1
  %92 = inttoptr i64 %85 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  store double %94, double* %31, align 1, !tbaa !1244
  store i64 0, i64* %32, align 1, !tbaa !1244
  %95 = fsub double %88, %94
  store double %95, double* %54, align 1, !tbaa !1244
  store i64 0, i64* %89, align 1, !tbaa !1244
  %96 = add i64 %66, -112
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %66, -140
  %99 = inttoptr i64 %98 to i32*
  store i32 0, i32* %99
  %100 = add i64 %66, -4
  %101 = add i64 %66, -16
  %102 = bitcast %union.VectorReg* %17 to i32*
  %103 = getelementptr inbounds i8, i8* %42, i64 4
  %104 = bitcast i8* %103 to i32*
  %105 = bitcast i64* %45 to i32*
  %106 = getelementptr inbounds i8, i8* %42, i64 12
  %107 = bitcast i8* %106 to i32*
  %108 = add i64 %66, -120
  %109 = bitcast %union.VectorReg* %18 to i8*
  %110 = bitcast %union.VectorReg* %18 to i32*
  %111 = getelementptr inbounds i8, i8* %109, i64 4
  %112 = bitcast i8* %111 to i32*
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %114 = bitcast %union.VectorReg* %18 to double*
  %115 = add i64 %66, -128
  %116 = add i64 %66, -80
  %117 = add i64 %66, -136
  %118 = add i64 %66, -88
  %119 = bitcast [32 x %union.VectorReg]* %13 to <2 x i32>*
  %120 = bitcast %union.VectorReg* %15 to i32*
  %121 = getelementptr inbounds i8, i8* %34, i64 4
  %122 = bitcast i8* %121 to i32*
  %123 = add i64 %66, -96
  %124 = add i64 %66, -32
  br label %block_407751

block_407871:                                     ; preds = %block_407751
  %125 = zext i32 %280 to i64
  store i64 %125, i64* %6, align 8, !tbaa !1240
  %126 = load i64, i64* %11, align 8
  %127 = add i64 %126, 16
  %128 = icmp ugt i64 %126, -17
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %24, align 1, !tbaa !1246
  %130 = trunc i64 %127 to i32
  %131 = and i32 %130, 255
  %132 = tail call i32 @llvm.ctpop.i32(i32 %131) #11
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  store i8 %135, i8* %25, align 1, !tbaa !1260
  %136 = xor i64 %126, 16
  %137 = xor i64 %136, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %26, align 1, !tbaa !1261
  %141 = icmp eq i64 %127, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !1262
  %143 = lshr i64 %127, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %28, align 1, !tbaa !1263
  %145 = lshr i64 %126, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %29, align 1, !tbaa !1264
  %150 = add i64 %126, 24
  %151 = inttoptr i64 %127 to i64*
  %152 = load i64, i64* %151
  store i64 %152, i64* %12, align 8, !tbaa !1240
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %3, align 8, !tbaa !1240
  %155 = add i64 %126, 32
  store i64 %155, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %278

block_407760:                                     ; preds = %block_407751
  %156 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2608) to double*)
  store double %156, double* %54, align 1, !tbaa !1244
  store double 0.000000e+00, double* %90, align 1, !tbaa !1244
  %157 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2616) to double*)
  store double %157, double* %31, align 1, !tbaa !1244
  store double 0.000000e+00, double* %33, align 1, !tbaa !1244
  %158 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2624) to double*)
  store double %158, double* %36, align 1, !tbaa !1244
  %159 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2632) to double*)
  %160 = inttoptr i64 %101 to i64*
  %161 = load i64, i64* %160
  %162 = bitcast double %159 to <2 x i32>
  %163 = extractelement <2 x i32> %162, i32 0
  store i32 %163, i32* %102, align 1, !tbaa !1492
  %164 = extractelement <2 x i32> %162, i32 1
  store i32 %164, i32* %104, align 1, !tbaa !1492
  %165 = load double, double* %44, align 1
  %166 = inttoptr i64 %161 to double*
  %167 = load double, double* %166
  %168 = fmul double %165, %167
  %169 = inttoptr i64 %73 to double*
  store double %168, double* %169
  %170 = inttoptr i64 %73 to double*
  %171 = load double, double* %170
  %172 = tail call double @llvm.trunc.f64(double %171) #11
  %173 = tail call double @llvm.fabs.f64(double %172) #11
  %174 = fcmp ogt double %173, 0x41DFFFFFFFC00000
  %175 = fptosi double %172 to i32
  %176 = sitofp i32 %175 to double
  %177 = select i1 %174, double 0xC1E0000000000000, double %176
  %178 = inttoptr i64 %108 to double*
  store double %177, double* %178
  %179 = inttoptr i64 %101 to i64*
  %180 = load i64, i64* %179
  %181 = inttoptr i64 %180 to double*
  %182 = load double, double* %181
  %183 = bitcast double %158 to <2 x i32>
  %184 = extractelement <2 x i32> %183, i32 0
  store i32 %184, i32* %110, align 1, !tbaa !1492
  %185 = extractelement <2 x i32> %183, i32 1
  store i32 %185, i32* %112, align 1, !tbaa !1492
  %186 = load double, double* %114, align 1
  %187 = inttoptr i64 %108 to double*
  %188 = load double, double* %187
  %189 = fmul double %186, %188
  %190 = fsub double %182, %189
  %191 = inttoptr i64 %115 to double*
  store double %190, double* %191
  %192 = inttoptr i64 %85 to double*
  %193 = load double, double* %192
  %194 = inttoptr i64 %115 to double*
  %195 = load double, double* %194
  %196 = fmul double %193, %195
  %197 = inttoptr i64 %96 to double*
  %198 = load double, double* %197
  %199 = inttoptr i64 %108 to double*
  %200 = load double, double* %199
  %201 = fmul double %198, %200
  store double %201, double* %114, align 1, !tbaa !1244
  store i64 0, i64* %113, align 1, !tbaa !1244
  %202 = fadd double %196, %201
  %203 = inttoptr i64 %73 to double*
  store double %202, double* %203
  %204 = inttoptr i64 %73 to double*
  %205 = load double, double* %204
  %206 = fmul double %159, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #11
  %208 = tail call double @llvm.fabs.f64(double %207) #11
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = sitofp i32 %210 to double
  %212 = select i1 %209, double 0xC1E0000000000000, double %211
  %213 = inttoptr i64 %116 to double*
  store double %212, double* %213
  %214 = inttoptr i64 %73 to double*
  %215 = load double, double* %214
  store i32 %184, i32* %102, align 1, !tbaa !1492
  store i32 %185, i32* %104, align 1, !tbaa !1492
  store i32 0, i32* %105, align 1, !tbaa !1492
  store i32 0, i32* %107, align 1, !tbaa !1492
  %216 = load double, double* %44, align 1
  %217 = inttoptr i64 %116 to double*
  %218 = load double, double* %217
  %219 = fmul double %216, %218
  store double %219, double* %44, align 1, !tbaa !1244
  %220 = fsub double %215, %219
  %221 = inttoptr i64 %117 to double*
  store double %220, double* %221
  %222 = load double, double* %36, align 1
  %223 = inttoptr i64 %117 to double*
  %224 = load double, double* %223
  %225 = fmul double %222, %224
  %226 = inttoptr i64 %96 to double*
  %227 = load double, double* %226
  %228 = inttoptr i64 %115 to double*
  %229 = load double, double* %228
  %230 = fmul double %227, %229
  store double %230, double* %39, align 1, !tbaa !1244
  store i64 0, i64* %40, align 1, !tbaa !1244
  %231 = fadd double %230, %225
  %232 = inttoptr i64 %118 to double*
  store double %231, double* %232
  %233 = load <2 x i32>, <2 x i32>* %119, align 1
  %234 = load i64, i64* %89, align 1
  %235 = extractelement <2 x i32> %233, i32 0
  store i32 %235, i32* %120, align 1, !tbaa !1492
  %236 = extractelement <2 x i32> %233, i32 1
  store i32 %236, i32* %122, align 1, !tbaa !1492
  %237 = load double, double* %36, align 1
  %238 = inttoptr i64 %118 to double*
  %239 = load double, double* %238
  %240 = fmul double %237, %239
  %241 = tail call double @llvm.trunc.f64(double %240) #11
  %242 = tail call double @llvm.fabs.f64(double %241) #11
  %243 = fcmp ogt double %242, 0x41DFFFFFFFC00000
  %244 = fptosi double %241 to i32
  %245 = zext i32 %244 to i64
  %246 = select i1 %243, i64 2147483648, i64 %245
  store i64 %246, i64* %7, align 8, !tbaa !1240
  %247 = trunc i64 %246 to i32
  %248 = sitofp i32 %247 to double
  %249 = inttoptr i64 %123 to double*
  store double %248, double* %249
  %250 = inttoptr i64 %118 to double*
  %251 = load double, double* %250
  %252 = load double, double* %31, align 1
  %253 = inttoptr i64 %123 to double*
  %254 = load double, double* %253
  %255 = fmul double %252, %254
  store double %255, double* %31, align 1, !tbaa !1244
  %256 = fsub double %251, %255
  store double %256, double* %36, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %257 = inttoptr i64 %101 to i64*
  %258 = load i64, i64* %257
  %259 = inttoptr i64 %258 to double*
  store double %256, double* %259
  %260 = inttoptr i64 %101 to i64*
  %261 = load i64, i64* %260
  %262 = bitcast <2 x i32> %233 to double
  %263 = inttoptr i64 %261 to double*
  %264 = load double, double* %263
  %265 = fmul double %262, %264
  store double %265, double* %54, align 1, !tbaa !1244
  store i64 %234, i64* %89, align 1, !tbaa !1244
  %266 = inttoptr i64 %124 to i64*
  %267 = load i64, i64* %266
  %268 = inttoptr i64 %98 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  store i64 %270, i64* %8, align 8, !tbaa !1240
  %271 = shl nsw i64 %270, 3
  %272 = add i64 %271, %267
  %273 = inttoptr i64 %272 to double*
  store double %265, double* %273
  %274 = inttoptr i64 %98 to i32*
  %275 = load i32, i32* %274
  %276 = add i32 %275, 1
  %277 = inttoptr i64 %98 to i32*
  store i32 %276, i32* %277
  br label %block_407751

block_407751:                                     ; preds = %block_407760, %block_4076d0
  %278 = phi %struct.Memory* [ %2, %block_4076d0 ], [ %278, %block_407760 ]
  %279 = inttoptr i64 %98 to i32*
  %280 = load i32, i32* %279
  %281 = inttoptr i64 %100 to i32*
  %282 = load i32, i32* %281
  %283 = sub i32 %280, %282
  %284 = lshr i32 %283, 31
  %285 = lshr i32 %280, 31
  %286 = lshr i32 %282, 31
  %287 = xor i32 %286, %285
  %288 = xor i32 %284, %285
  %289 = add nuw nsw i32 %288, %287
  %290 = icmp eq i32 %289, 2
  %291 = icmp ne i32 %284, 0
  %292 = xor i1 %291, %290
  br i1 %292, label %block_407760, label %block_407871
}

; Function Attrs: noinline
define %struct.Memory* @sub_404c20_interp(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_404c20:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %15 = bitcast %union.anon* %14 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %17 = bitcast %union.anon* %16 to i32*
  %18 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %20 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %21 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %22 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %32 = load i64, i64* %25, align 8
  %33 = load i64, i64* %24, align 8, !tbaa !1240
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35
  store i64 %34, i64* %25, align 8, !tbaa !1240
  %36 = load i64, i64* %28, align 8
  %37 = add i64 %33, -16
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %27, align 8
  %40 = add i64 %33, -24
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = load i64, i64* %19, align 8
  %43 = add i64 %33, -32
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44
  %45 = add i64 %33, -6424
  store i64 %45, i64* %24, align 8, !tbaa !1240
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %52 = add i64 %33, 24
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53
  %55 = zext i32 %54 to i64
  store i64 %55, i64* %18, align 8, !tbaa !1240
  %56 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %57 = add i64 %33, 16
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58
  %60 = zext i32 %59 to i64
  store i64 %60, i64* %56, align 8, !tbaa !1240
  %61 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %62 = add i64 %33, 8
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %61, align 8, !tbaa !1240
  %66 = add i64 %33, -40
  %67 = load i64, i64* %23, align 8
  %68 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %68
  %69 = add i64 %33, -44
  %70 = load i32, i32* %11, align 4
  %71 = inttoptr i64 %69 to i32*
  store i32 %70, i32* %71
  %72 = add i64 %33, -48
  %73 = load i32, i32* %9, align 4
  %74 = inttoptr i64 %72 to i32*
  store i32 %73, i32* %74
  %75 = add i64 %33, -52
  %76 = load i32, i32* %7, align 4
  %77 = inttoptr i64 %75 to i32*
  store i32 %76, i32* %77
  %78 = add i64 %33, -64
  %79 = load i64, i64* %26, align 8
  %80 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %80
  %81 = add i64 %33, -68
  %82 = load i32, i32* %13, align 4
  %83 = inttoptr i64 %81 to i32*
  store i32 %82, i32* %83
  %84 = load i64, i64* %25, align 8
  %85 = add i64 %84, -40
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86
  %88 = zext i32 %87 to i64
  store i64 %88, i64* %23, align 8, !tbaa !1240
  %89 = add i64 %84, -36
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = zext i32 %91 to i64
  store i64 %92, i64* %26, align 8, !tbaa !1240
  %93 = add i64 %84, -32
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  %96 = add i64 %84, -72
  %97 = inttoptr i64 %96 to i64*
  store i64 %95, i64* %97
  %98 = add i64 %84, 16
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %19, align 8, !tbaa !1240
  %102 = add i64 %84, -60
  %103 = inttoptr i64 %102 to i32*
  %104 = load i32, i32* %103
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %27, align 8, !tbaa !1240
  %106 = add i64 %84, -56
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %28, align 8, !tbaa !1240
  %109 = add i64 %84, -80
  %110 = inttoptr i64 %109 to i64*
  store i64 %108, i64* %110
  %111 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %112 = icmp eq i32 %111, 0
  %113 = add i64 %84, -6356
  %114 = load i32, i32* %17, align 4
  %115 = inttoptr i64 %113 to i32*
  store i32 %114, i32* %115
  %116 = add i64 %84, -6360
  %117 = load i32, i32* %15, align 4
  %118 = inttoptr i64 %116 to i32*
  store i32 %117, i32* %118
  %119 = add i64 %84, -6364
  %120 = load i32, i32* %5, align 4
  %121 = inttoptr i64 %119 to i32*
  store i32 %120, i32* %121
  %122 = add i64 %84, -6376
  %123 = inttoptr i64 %122 to i64*
  store i64 %88, i64* %123
  %124 = add i64 %84, -6384
  %125 = inttoptr i64 %124 to i64*
  store i64 %92, i64* %125
  %126 = load i64, i64* %25, align 8
  %127 = add i64 %126, -6392
  %128 = inttoptr i64 %127 to i64*
  store i64 %101, i64* %128
  %129 = add i64 %126, -6400
  %130 = inttoptr i64 %129 to i64*
  store i64 %105, i64* %130
  %131 = select i1 %112, i64 158, i64 148
  %132 = add i64 %131, %1
  br i1 %112, label %block_404cbe, label %block_404cb4

block_4055ef:                                     ; preds = %block_4055d2
  %133 = inttoptr i64 %1928 to i32*
  store i32 1, i32* %133
  %134 = add i64 %1310, -108
  %135 = add i64 %1927, 14
  %136 = inttoptr i64 %134 to i32*
  store i32 0, i32* %136
  br label %block_4055fd

block_4055dc:                                     ; preds = %block_4055d2
  %137 = inttoptr i64 %1928 to i32*
  store i32 2, i32* %137
  %138 = add i64 %1310, -108
  %139 = inttoptr i64 %138 to i32*
  store i32 1, i32* %139
  %140 = add i64 %1927, 33
  br label %block_4055fd

block_4057ae:                                     ; preds = %block_4057bf, %block_4057a7
  %141 = phi i64 [ %261, %block_4057a7 ], [ %1902, %block_4057bf ]
  %142 = phi %struct.Memory* [ %1793, %block_4057a7 ], [ %142, %block_4057bf ]
  %143 = inttoptr i64 %2007 to i32*
  %144 = load i32, i32* %143
  %145 = inttoptr i64 %2008 to i32*
  %146 = load i32, i32* %145
  %147 = add i32 %146, -1
  %148 = sub i32 %144, %147
  %149 = lshr i32 %148, 31
  %150 = lshr i32 %144, 31
  %151 = lshr i32 %147, 31
  %152 = xor i32 %151, %150
  %153 = xor i32 %149, %150
  %154 = add nuw nsw i32 %153, %152
  %155 = icmp eq i32 %154, 2
  %156 = icmp ne i32 %148, 0
  %157 = icmp ne i32 %149, 0
  %158 = xor i1 %157, %155
  %159 = xor i1 %158, true
  %160 = and i1 %156, %159
  %161 = select i1 %160, i64 368, i64 17
  %162 = add i64 %141, %161
  br i1 %160, label %block_40591e, label %block_4057bf

block_4065ab:                                     ; preds = %block_4065a1, %block_406593
  %163 = phi i64 [ %191, %block_406593 ], [ %776, %block_4065a1 ]
  %164 = phi %struct.Memory* [ %185, %block_406593 ], [ %775, %block_4065a1 ]
  %165 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1200) to i32*)
  %166 = add i32 %165, -1
  %167 = lshr i32 %166, 31
  %168 = trunc i32 %167 to i8
  %169 = lshr i32 %165, 31
  %170 = xor i32 %167, %169
  %171 = add nuw nsw i32 %170, %169
  %172 = icmp eq i32 %171, 2
  %173 = icmp ne i8 %168, 0
  %174 = xor i1 %173, %172
  %175 = select i1 %174, i64 99, i64 14
  %176 = add i64 %163, %175
  br i1 %174, label %block_40660e, label %block_4065b9

block_4055a7:                                     ; preds = %block_405407
  %177 = inttoptr i64 %515 to i32*
  %178 = load i32, i32* %177
  %179 = add i32 %178, 1
  %180 = inttoptr i64 %515 to i32*
  store i32 %179, i32* %180
  %181 = add i64 %2316, -2220
  br label %block_404cfb

block_406593.loopexit:                            ; preds = %block_405cde
  br label %block_406593

block_406593.loopexit622:                         ; preds = %block_404ce3
  br label %block_406593

block_406593:                                     ; preds = %block_406593.loopexit622, %block_406593.loopexit
  %182 = phi i32 [ %496, %block_406593.loopexit ], [ %295, %block_406593.loopexit622 ]
  %183 = phi i64 [ %510, %block_406593.loopexit ], [ %307, %block_406593.loopexit622 ]
  %184 = phi i64 [ 13, %block_406593.loopexit ], [ 4046, %block_406593.loopexit622 ]
  %185 = phi %struct.Memory* [ %491, %block_406593.loopexit ], [ %290, %block_406593.loopexit622 ]
  %186 = zext i32 %182 to i64
  store i64 %186, i64* %20, align 8, !tbaa !1240
  %187 = add i64 %184, %183
  %188 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %189 = icmp eq i32 %188, 0
  %190 = select i1 %189, i64 16, i64 6
  %191 = add i64 %187, %190
  br i1 %189, label %block_4065ab, label %block_4065a1

block_405931:                                     ; preds = %block_405670
  %192 = add i64 %1924, 7
  %193 = inttoptr i64 %2005 to i32*
  store i32 1, i32* %193
  br label %block_405938

block_4055ba:                                     ; preds = %block_404cfb
  %194 = inttoptr i64 %511 to i32*
  %195 = load i32, i32* %194
  %196 = add i32 %195, 1
  %197 = inttoptr i64 %511 to i32*
  store i32 %196, i32* %197
  %198 = add i64 %260, -2263
  br label %block_404ce3

block_40591e:                                     ; preds = %block_4057ae
  %199 = inttoptr i64 %2005 to i32*
  %200 = load i32, i32* %199
  %201 = add i32 %200, 1
  %202 = inttoptr i64 %2005 to i32*
  store i32 %201, i32* %202
  %203 = add i64 %162, -686
  br label %block_405670

block_404d13:                                     ; preds = %block_404d0c, %block_404d1f
  %204 = phi i64 [ %2253, %block_404d0c ], [ %1308, %block_404d1f ]
  %205 = phi %struct.Memory* [ %243, %block_404d0c ], [ %205, %block_404d1f ]
  %206 = inttoptr i64 %517 to i32*
  %207 = load i32, i32* %206
  %208 = inttoptr i64 %518 to i32*
  %209 = load i32, i32* %208
  %210 = sub i32 %207, %209
  %211 = lshr i32 %210, 31
  %212 = lshr i32 %207, 31
  %213 = lshr i32 %209, 31
  %214 = xor i32 %213, %212
  %215 = xor i32 %211, %212
  %216 = add nuw nsw i32 %215, %214
  %217 = icmp eq i32 %216, 2
  %218 = icmp ne i32 %211, 0
  %219 = xor i1 %218, %217
  %220 = select i1 %219, i64 12, i64 434
  %221 = add i64 %204, %220
  br i1 %219, label %block_404d1f, label %block_404ec5

block_405cd7:                                     ; preds = %block_405659
  %222 = add i64 %1986, 7
  %223 = inttoptr i64 %2001 to i32*
  store i32 1, i32* %223
  %224 = load i64, i64* %25, align 8
  %225 = add i64 %224, -84
  %226 = add i64 %224, -44
  %227 = add i64 %224, -100
  %228 = add i64 %224, -88
  %229 = add i64 %224, -40
  %230 = add i64 %224, -96
  %231 = add i64 %224, -92
  %232 = add i64 %224, -36
  %233 = add i64 %224, -80
  %234 = add i64 %224, -116
  %235 = add i64 %224, -6392
  %236 = add i64 %224, -6400
  %237 = add i64 %224, -72
  %238 = add i64 %224, -6376
  %239 = add i64 %224, -6384
  %240 = add i64 %224, -108
  %241 = add i64 %224, -112
  br label %block_405cde

block_404cfb:                                     ; preds = %block_404cf4, %block_4055a7
  %242 = phi i64 [ %488, %block_404cf4 ], [ %181, %block_4055a7 ]
  %243 = phi %struct.Memory* [ %290, %block_404cf4 ], [ %2299, %block_4055a7 ]
  %244 = inttoptr i64 %515 to i32*
  %245 = load i32, i32* %244
  %246 = inttoptr i64 %516 to i32*
  %247 = load i32, i32* %246
  %248 = add i32 %247, -1
  %249 = sub i32 %245, %248
  %250 = lshr i32 %249, 31
  %251 = lshr i32 %245, 31
  %252 = lshr i32 %248, 31
  %253 = xor i32 %252, %251
  %254 = xor i32 %250, %251
  %255 = add nuw nsw i32 %254, %253
  %256 = icmp eq i32 %255, 2
  %257 = icmp ne i32 %250, 0
  %258 = xor i1 %257, %256
  %259 = select i1 %258, i64 17, i64 2239
  %260 = add i64 %242, %259
  br i1 %258, label %block_404d0c, label %block_4055ba

block_4057a7:                                     ; preds = %block_405687
  %261 = add i64 %1813, 7
  %262 = inttoptr i64 %2007 to i32*
  store i32 1, i32* %262
  br label %block_4057ae

block_405cf5:                                     ; preds = %block_40606e, %block_405cef
  %263 = phi i64 [ %287, %block_405cef ], [ %1935, %block_40606e ]
  %264 = phi %struct.Memory* [ %491, %block_405cef ], [ %1647, %block_40606e ]
  %265 = inttoptr i64 %228 to i32*
  %266 = load i32, i32* %265
  %267 = inttoptr i64 %229 to i32*
  %268 = load i32, i32* %267
  %269 = add i32 %268, -1
  %270 = sub i32 %266, %269
  %271 = lshr i32 %270, 31
  %272 = lshr i32 %266, 31
  %273 = lshr i32 %269, 31
  %274 = xor i32 %273, %272
  %275 = xor i32 %271, %272
  %276 = add nuw nsw i32 %275, %274
  %277 = icmp eq i32 %276, 2
  %278 = icmp ne i32 %270, 0
  %279 = icmp ne i32 %271, 0
  %280 = xor i1 %279, %277
  %281 = xor i1 %280, true
  %282 = and i1 %278, %281
  %283 = select i1 %282, i64 908, i64 17
  %284 = add i64 %263, %283
  br i1 %282, label %block_406081, label %block_405d06

block_405cef:                                     ; preds = %block_405cde
  %285 = inttoptr i64 %227 to i32*
  %286 = load i32, i32* %285
  %287 = add i64 %510, 6
  %288 = inttoptr i64 %228 to i32*
  store i32 %286, i32* %288
  br label %block_405cf5

block_404ce3:                                     ; preds = %block_404cdc, %block_4055ba
  %289 = phi i64 [ %512, %block_404cdc ], [ %198, %block_4055ba ]
  %290 = phi %struct.Memory* [ %1311, %block_404cdc ], [ %243, %block_4055ba ]
  %291 = inttoptr i64 %511 to i32*
  %292 = load i32, i32* %291
  %293 = inttoptr i64 %514 to i32*
  %294 = load i32, i32* %293
  %295 = add i32 %294, -1
  %296 = sub i32 %292, %295
  %297 = lshr i32 %296, 31
  %298 = lshr i32 %292, 31
  %299 = lshr i32 %295, 31
  %300 = xor i32 %299, %298
  %301 = xor i32 %297, %298
  %302 = add nuw nsw i32 %301, %300
  %303 = icmp eq i32 %302, 2
  %304 = icmp ne i32 %297, 0
  %305 = xor i1 %304, %303
  %306 = select i1 %305, i64 17, i64 2282
  %307 = add i64 %289, %306
  br i1 %305, label %block_404cf4, label %block_406593.loopexit622

block_4065b9:                                     ; preds = %block_4065ab
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2008), i64* %26, align 8, !tbaa !1240
  %308 = load i64, i64* %25, align 8
  %309 = add i64 %308, -72
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = add i64 %308, -36
  %313 = inttoptr i64 %312 to i32*
  %314 = load i32, i32* %313
  %315 = zext i32 %314 to i64
  store i64 %315, i64* %22, align 8, !tbaa !1240
  %316 = add i64 %308, -40
  %317 = inttoptr i64 %316 to i32*
  %318 = load i32, i32* %317
  %319 = zext i32 %318 to i64
  store i64 %319, i64* %21, align 8, !tbaa !1240
  %320 = add i64 %308, -44
  %321 = inttoptr i64 %320 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %20, align 8, !tbaa !1240
  %324 = add i64 %308, 32
  %325 = inttoptr i64 %324 to i32*
  %326 = load i32, i32* %325
  %327 = add i32 %326, -1
  %328 = add i64 %308, -6404
  %329 = inttoptr i64 %328 to i32*
  store i32 %327, i32* %329
  store i64 %311, i64* %23, align 8, !tbaa !1240
  %330 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %331 = inttoptr i64 %328 to i32*
  %332 = load i32, i32* %331
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %330, align 8, !tbaa !1240
  %334 = add i64 %176, 1127
  %335 = add i64 %176, 50
  %336 = load i64, i64* %24, align 8, !tbaa !1240
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338
  store i64 %337, i64* %24, align 8, !tbaa !1240
  %339 = tail call %struct.Memory* @sub_406a20_rep_nrm(%struct.State* nonnull %0, i64 %334, %struct.Memory* %164)
  %340 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2017), i64* %26, align 8, !tbaa !1240
  %341 = load i64, i64* %25, align 8
  %342 = add i64 %341, -80
  %343 = inttoptr i64 %342 to i64*
  %344 = load i64, i64* %343
  %345 = add i64 %341, -60
  %346 = inttoptr i64 %345 to i32*
  %347 = load i32, i32* %346
  %348 = zext i32 %347 to i64
  store i64 %348, i64* %22, align 8, !tbaa !1240
  %349 = add i64 %341, 16
  %350 = inttoptr i64 %349 to i32*
  %351 = load i32, i32* %350
  %352 = zext i32 %351 to i64
  store i64 %352, i64* %21, align 8, !tbaa !1240
  %353 = add i64 %341, 24
  %354 = inttoptr i64 %353 to i32*
  %355 = load i32, i32* %354
  %356 = zext i32 %355 to i64
  store i64 %356, i64* %20, align 8, !tbaa !1240
  %357 = add i64 %341, 32
  %358 = inttoptr i64 %357 to i32*
  %359 = load i32, i32* %358
  %360 = zext i32 %359 to i64
  store i64 %360, i64* %330, align 8, !tbaa !1240
  store i64 %344, i64* %23, align 8, !tbaa !1240
  %361 = add i64 %340, 1077
  %362 = add i64 %340, 35
  %363 = load i64, i64* %24, align 8, !tbaa !1240
  %364 = add i64 %363, -8
  %365 = inttoptr i64 %364 to i64*
  store i64 %362, i64* %365
  store i64 %364, i64* %24, align 8, !tbaa !1240
  %366 = tail call %struct.Memory* @sub_406a20_rep_nrm(%struct.State* nonnull %0, i64 %361, %struct.Memory* %339)
  %367 = load i64, i64* %3, align 8
  br label %block_40660e

block_405938:                                     ; preds = %block_405cb1, %block_405931
  %368 = phi i64 [ %192, %block_405931 ], [ %932, %block_405cb1 ]
  %369 = phi %struct.Memory* [ %1904, %block_405931 ], [ %902, %block_405cb1 ]
  %370 = inttoptr i64 %2005 to i32*
  %371 = load i32, i32* %370
  %372 = inttoptr i64 %2006 to i32*
  %373 = load i32, i32* %372
  %374 = add i32 %373, -1
  %375 = sub i32 %371, %374
  %376 = lshr i32 %375, 31
  %377 = lshr i32 %371, 31
  %378 = lshr i32 %374, 31
  %379 = xor i32 %378, %377
  %380 = xor i32 %376, %377
  %381 = add nuw nsw i32 %380, %379
  %382 = icmp eq i32 %381, 2
  %383 = icmp ne i32 %375, 0
  %384 = icmp ne i32 %376, 0
  %385 = xor i1 %384, %382
  %386 = xor i1 %385, true
  %387 = and i1 %383, %386
  %388 = select i1 %387, i64 908, i64 17
  %389 = add i64 %368, %388
  br i1 %387, label %block_405cc4, label %block_405949

block_4050e2:                                     ; preds = %block_4050d1
  %390 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1032) to double*)
  store double %390, double* %522, align 1, !tbaa !1244
  store double 0.000000e+00, double* %524, align 1, !tbaa !1244
  %391 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1040) to double*)
  %392 = inttoptr i64 %528 to i64*
  %393 = load i64, i64* %392
  %394 = inttoptr i64 %511 to i32*
  %395 = load i32, i32* %394
  %396 = shl i32 %395, 1
  %397 = sext i32 %396 to i64
  %398 = inttoptr i64 %529 to i64*
  %399 = load i64, i64* %398
  %400 = inttoptr i64 %530 to i64*
  %401 = load i64, i64* %400
  store i64 %401, i64* %23, align 8, !tbaa !1240
  %402 = mul i64 %401, %399
  %403 = mul i64 %402, %397
  %404 = shl i64 %403, 3
  %405 = add i64 %404, %393
  %406 = inttoptr i64 %515 to i32*
  %407 = load i32, i32* %406
  %408 = shl i32 %407, 1
  %409 = or i32 %408, 1
  %410 = sext i32 %409 to i64
  %411 = mul i64 %401, %410
  %412 = shl i64 %411, 3
  %413 = add i64 %412, %405
  %414 = shl i32 %735, 1
  %415 = sext i32 %414 to i64
  %416 = shl nsw i64 %415, 3
  %417 = add i64 %413, %416
  %418 = inttoptr i64 %417 to double*
  %419 = load double, double* %418
  %420 = sext i32 %735 to i64
  %421 = shl nsw i64 %420, 3
  %422 = add i64 %525, %421
  %423 = inttoptr i64 %422 to double*
  %424 = load double, double* %423
  %425 = fmul double %391, %424
  %426 = fadd double %419, %425
  %427 = inttoptr i64 %417 to double*
  store double %426, double* %427
  %428 = inttoptr i64 %528 to i64*
  %429 = load i64, i64* %428
  %430 = inttoptr i64 %511 to i32*
  %431 = load i32, i32* %430
  %432 = shl i32 %431, 1
  %433 = sext i32 %432 to i64
  %434 = inttoptr i64 %529 to i64*
  %435 = load i64, i64* %434
  %436 = mul i64 %401, %435
  %437 = mul i64 %436, %433
  %438 = shl i64 %437, 3
  %439 = add i64 %438, %429
  %440 = inttoptr i64 %515 to i32*
  %441 = load i32, i32* %440
  %442 = shl i32 %441, 1
  %443 = or i32 %442, 1
  %444 = sext i32 %443 to i64
  %445 = mul i64 %401, %444
  %446 = shl i64 %445, 3
  %447 = add i64 %446, %439
  %448 = inttoptr i64 %517 to i32*
  %449 = load i32, i32* %448
  %450 = shl i32 %449, 1
  %451 = or i32 %450, 1
  %452 = sext i32 %451 to i64
  %453 = shl nsw i64 %452, 3
  %454 = add i64 %447, %453
  %455 = inttoptr i64 %454 to double*
  %456 = load double, double* %455
  %457 = sext i32 %449 to i64
  %458 = shl nsw i64 %457, 3
  %459 = add i64 %525, %458
  %460 = inttoptr i64 %459 to double*
  %461 = load double, double* %460
  %462 = add i32 %449, 1
  %463 = sext i32 %462 to i64
  %464 = shl nsw i64 %463, 3
  %465 = add nsw i64 %464, -2192
  %466 = add i64 %465, %1310
  %467 = inttoptr i64 %466 to double*
  %468 = load double, double* %467
  %469 = fadd double %461, %468
  store double %469, double* %533, align 1, !tbaa !1244
  store i64 0, i64* %534, align 1, !tbaa !1244
  %470 = load double, double* %522, align 1
  %471 = fmul double %470, %469
  store double %471, double* %522, align 1, !tbaa !1244
  %472 = fadd double %456, %471
  store double %472, double* %531, align 1, !tbaa !1244
  store i64 0, i64* %532, align 1, !tbaa !1244
  %473 = load i64, i64* %23, align 8
  %474 = mul i64 %473, %435
  store i64 %474, i64* %22, align 8, !tbaa !1240
  %475 = mul i64 %474, %433
  %476 = shl i64 %475, 3
  %477 = add i64 %476, %429
  %478 = mul i64 %473, %444
  %479 = shl i64 %478, 3
  %480 = add i64 %479, %477
  store i64 %452, i64* %21, align 8, !tbaa !1240
  %481 = add i64 %480, %453
  %482 = inttoptr i64 %481 to double*
  store double %472, double* %482
  %483 = inttoptr i64 %517 to i32*
  %484 = load i32, i32* %483
  %485 = add i32 %484, 1
  %486 = inttoptr i64 %517 to i32*
  store i32 %485, i32* %486
  %487 = add i64 %750, -17
  br label %block_4050d1

block_404cf4:                                     ; preds = %block_404ce3
  %488 = add i64 %307, 7
  %489 = inttoptr i64 %515 to i32*
  store i32 0, i32* %489
  br label %block_404cfb

block_405cde:                                     ; preds = %block_40657b, %block_405cd7
  %490 = phi i64 [ %222, %block_405cd7 ], [ %1991, %block_40657b ]
  %491 = phi %struct.Memory* [ %1966, %block_405cd7 ], [ %2277, %block_40657b ]
  %492 = inttoptr i64 %225 to i32*
  %493 = load i32, i32* %492
  %494 = inttoptr i64 %226 to i32*
  %495 = load i32, i32* %494
  %496 = add i32 %495, -1
  %497 = sub i32 %493, %496
  %498 = icmp eq i32 %497, 0
  %499 = lshr i32 %497, 31
  %500 = lshr i32 %493, 31
  %501 = lshr i32 %496, 31
  %502 = xor i32 %501, %500
  %503 = xor i32 %499, %500
  %504 = add nuw nsw i32 %503, %502
  %505 = icmp eq i32 %504, 2
  %506 = icmp ne i32 %499, 0
  %507 = xor i1 %506, %505
  %508 = or i1 %498, %507
  %509 = select i1 %508, i64 17, i64 2224
  %510 = add i64 %490, %509
  br i1 %508, label %block_405cef, label %block_406593.loopexit

block_404cdc:                                     ; preds = %block_404cd2
  %511 = add i64 %1310, -84
  %512 = add i64 %731, 7
  %513 = inttoptr i64 %511 to i32*
  store i32 0, i32* %513
  %514 = add i64 %1310, -44
  %515 = add i64 %1310, -88
  %516 = add i64 %1310, -40
  %517 = add i64 %1310, -92
  %518 = add i64 %1310, -36
  %519 = add i64 %1310, -72
  %520 = add i64 %1310, -6376
  %521 = add i64 %1310, -6384
  %522 = bitcast [32 x %union.VectorReg]* %29 to double*
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %524 = bitcast i64* %523 to double*
  %525 = add i64 %1310, -2192
  %526 = add i64 %1310, -4272
  %527 = add i64 %1310, -6352
  %528 = add i64 %1310, -80
  %529 = add i64 %1310, -6392
  %530 = add i64 %1310, -6400
  %531 = bitcast %union.VectorReg* %30 to double*
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %533 = bitcast %union.VectorReg* %31 to double*
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  br label %block_404ce3

block_405d1d:                                     ; preds = %block_405d0c
  %535 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1040) to double*)
  store double %535, double* %2012, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2014, align 1, !tbaa !1244
  %536 = inttoptr i64 %233 to i64*
  %537 = load i64, i64* %536
  %538 = inttoptr i64 %225 to i32*
  %539 = load i32, i32* %538
  %540 = shl i32 %539, 1
  %541 = inttoptr i64 %234 to i32*
  %542 = load i32, i32* %541
  %543 = sub i32 %540, %542
  %544 = add i32 %543, -1
  %545 = sext i32 %544 to i64
  %546 = inttoptr i64 %235 to i64*
  %547 = load i64, i64* %546
  %548 = inttoptr i64 %236 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %23, align 8, !tbaa !1240
  %550 = mul i64 %549, %547
  %551 = mul i64 %550, %545
  %552 = shl i64 %551, 3
  %553 = add i64 %552, %537
  %554 = inttoptr i64 %228 to i32*
  %555 = load i32, i32* %554
  %556 = shl i32 %555, 1
  %557 = inttoptr i64 %227 to i32*
  %558 = load i32, i32* %557
  %559 = sub i32 %556, %558
  %560 = add i32 %559, -1
  %561 = sext i32 %560 to i64
  %562 = mul i64 %549, %561
  %563 = shl i64 %562, 3
  %564 = add i64 %563, %553
  %565 = shl i32 %882, 1
  %566 = inttoptr i64 %230 to i32*
  %567 = load i32, i32* %566
  %568 = sub i32 %565, %567
  %569 = add i32 %568, -1
  %570 = sext i32 %569 to i64
  %571 = shl nsw i64 %570, 3
  %572 = add i64 %564, %571
  %573 = inttoptr i64 %572 to double*
  %574 = load double, double* %573
  %575 = inttoptr i64 %237 to i64*
  %576 = load i64, i64* %575
  %577 = sext i32 %539 to i64
  %578 = inttoptr i64 %238 to i64*
  %579 = load i64, i64* %578
  %580 = inttoptr i64 %239 to i64*
  %581 = load i64, i64* %580
  store i64 %581, i64* %26, align 8, !tbaa !1240
  %582 = mul i64 %581, %579
  %583 = mul i64 %582, %577
  %584 = shl i64 %583, 3
  %585 = add i64 %584, %576
  %586 = add i32 %555, -1
  %587 = sext i32 %586 to i64
  %588 = mul i64 %581, %587
  %589 = shl i64 %588, 3
  %590 = add i64 %589, %585
  %591 = add i32 %882, -1
  %592 = sext i32 %591 to i64
  %593 = shl nsw i64 %592, 3
  %594 = add i64 %590, %593
  %595 = inttoptr i64 %594 to double*
  %596 = load double, double* %595
  %597 = add i32 %539, -1
  %598 = sext i32 %597 to i64
  %599 = mul i64 %582, %598
  %600 = shl i64 %599, 3
  %601 = add i64 %600, %576
  %602 = add i64 %589, %601
  %603 = add i64 %602, %593
  %604 = inttoptr i64 %603 to double*
  %605 = load double, double* %604
  %606 = fadd double %596, %605
  store double %606, double* %2022, align 1, !tbaa !1244
  store i64 0, i64* %2023, align 1, !tbaa !1244
  %607 = load double, double* %2012, align 1
  %608 = fmul double %607, %606
  store double %608, double* %2012, align 1, !tbaa !1244
  %609 = fadd double %574, %608
  store double %609, double* %2019, align 1, !tbaa !1244
  store i64 0, i64* %2020, align 1, !tbaa !1244
  %610 = load i64, i64* %23, align 8
  %611 = mul i64 %610, %547
  store i64 %611, i64* %22, align 8, !tbaa !1240
  %612 = mul i64 %611, %545
  %613 = shl i64 %612, 3
  %614 = add i64 %613, %537
  %615 = mul i64 %610, %561
  %616 = shl i64 %615, 3
  %617 = add i64 %616, %614
  store i64 %570, i64* %21, align 8, !tbaa !1240
  %618 = add i64 %617, %571
  %619 = inttoptr i64 %618 to double*
  store double %609, double* %619
  %620 = inttoptr i64 %231 to i32*
  %621 = load i32, i32* %620
  %622 = add i32 %621, 1
  %623 = inttoptr i64 %231 to i32*
  store i32 %622, i32* %623
  %624 = add i64 %900, -17
  br label %block_405d0c

block_405ad7:                                     ; preds = %block_405ac6
  %625 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1032) to double*)
  store double %625, double* %2012, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2014, align 1, !tbaa !1244
  %626 = inttoptr i64 %2009 to i64*
  %627 = load i64, i64* %626
  %628 = inttoptr i64 %2001 to i32*
  %629 = load i32, i32* %628
  %630 = shl i32 %629, 1
  %631 = inttoptr i64 %2046 to i32*
  %632 = load i32, i32* %631
  %633 = sub i32 %630, %632
  %634 = add i32 %633, -1
  %635 = sext i32 %634 to i64
  %636 = inttoptr i64 %2010 to i64*
  %637 = load i64, i64* %636
  %638 = inttoptr i64 %2011 to i64*
  %639 = load i64, i64* %638
  store i64 %639, i64* %23, align 8, !tbaa !1240
  %640 = mul i64 %639, %637
  %641 = mul i64 %640, %635
  %642 = shl i64 %641, 3
  %643 = add i64 %642, %627
  %644 = inttoptr i64 %2005 to i32*
  %645 = load i32, i32* %644
  %646 = shl i32 %645, 1
  %647 = inttoptr i64 %2024 to i32*
  %648 = load i32, i32* %647
  %649 = sub i32 %646, %648
  %650 = add i32 %649, -1
  %651 = sext i32 %650 to i64
  %652 = mul i64 %639, %651
  %653 = shl i64 %652, 3
  %654 = add i64 %653, %643
  %655 = shl i32 %904, 1
  %656 = inttoptr i64 %2018 to i32*
  %657 = load i32, i32* %656
  %658 = sub i32 %655, %657
  %659 = add i32 %658, -1
  %660 = sext i32 %659 to i64
  %661 = shl nsw i64 %660, 3
  %662 = add i64 %654, %661
  %663 = inttoptr i64 %662 to double*
  %664 = load double, double* %663
  store double %664, double* %2019, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2021, align 1, !tbaa !1244
  %665 = inttoptr i64 %2015 to i64*
  %666 = load i64, i64* %665
  %667 = add i32 %629, -1
  %668 = sext i32 %667 to i64
  %669 = inttoptr i64 %2016 to i64*
  %670 = load i64, i64* %669
  %671 = inttoptr i64 %2017 to i64*
  %672 = load i64, i64* %671
  store i64 %672, i64* %26, align 8, !tbaa !1240
  %673 = mul i64 %672, %670
  %674 = mul i64 %673, %668
  %675 = shl i64 %674, 3
  %676 = add i64 %675, %666
  %677 = sext i32 %645 to i64
  %678 = mul i64 %672, %677
  %679 = shl i64 %678, 3
  %680 = add i64 %679, %676
  %681 = sext i32 %904 to i64
  %682 = shl nsw i64 %681, 3
  %683 = add i64 %682, %680
  %684 = inttoptr i64 %683 to double*
  %685 = load double, double* %684
  %686 = add i32 %645, -1
  %687 = sext i32 %686 to i64
  %688 = mul i64 %672, %687
  %689 = shl i64 %688, 3
  %690 = add i64 %689, %676
  %691 = add i64 %682, %690
  %692 = inttoptr i64 %691 to double*
  %693 = load double, double* %692
  %694 = fadd double %685, %693
  %695 = add i32 %904, -1
  %696 = sext i32 %695 to i64
  %697 = shl nsw i64 %696, 3
  %698 = add i64 %680, %697
  %699 = inttoptr i64 %698 to double*
  %700 = load double, double* %699
  %701 = fadd double %694, %700
  %702 = add i64 %690, %697
  %703 = inttoptr i64 %702 to double*
  %704 = load double, double* %703
  %705 = fadd double %701, %704
  store double %705, double* %2022, align 1, !tbaa !1244
  store i64 0, i64* %2023, align 1, !tbaa !1244
  %706 = load double, double* %2012, align 1
  %707 = fmul double %706, %705
  store double %707, double* %2012, align 1, !tbaa !1244
  %708 = load double, double* %2019, align 1
  %709 = fadd double %708, %707
  store double %709, double* %2019, align 1, !tbaa !1244
  %710 = load i64, i64* %23, align 8
  %711 = mul i64 %710, %637
  store i64 %711, i64* %22, align 8, !tbaa !1240
  %712 = mul i64 %711, %635
  %713 = shl i64 %712, 3
  %714 = add i64 %713, %627
  %715 = mul i64 %710, %651
  %716 = shl i64 %715, 3
  %717 = add i64 %716, %714
  store i64 %660, i64* %21, align 8, !tbaa !1240
  %718 = add i64 %717, %661
  %719 = inttoptr i64 %718 to double*
  store double %709, double* %719
  %720 = inttoptr i64 %2007 to i32*
  %721 = load i32, i32* %720
  %722 = add i32 %721, 1
  %723 = inttoptr i64 %2007 to i32*
  store i32 %722, i32* %723
  %724 = add i64 %922, -17
  br label %block_405ac6

block_404cd2:                                     ; preds = %block_404cc8
  %725 = add i64 %1310, 24
  %726 = inttoptr i64 %725 to i32*
  %727 = load i32, i32* %726
  %728 = add i32 %727, -3
  %729 = icmp eq i32 %728, 0
  %730 = select i1 %729, i64 2304, i64 10
  %731 = add i64 %878, %730
  br i1 %729, label %block_4055d2, label %block_404cdc

block_4050d1:                                     ; preds = %block_4050ca, %block_4050e2
  %732 = phi i64 [ %777, %block_4050ca ], [ %487, %block_4050e2 ]
  %733 = phi %struct.Memory* [ %752, %block_4050ca ], [ %733, %block_4050e2 ]
  %734 = inttoptr i64 %517 to i32*
  %735 = load i32, i32* %734
  %736 = inttoptr i64 %518 to i32*
  %737 = load i32, i32* %736
  %738 = add i32 %737, -1
  %739 = sub i32 %735, %738
  %740 = lshr i32 %739, 31
  %741 = lshr i32 %735, 31
  %742 = lshr i32 %738, 31
  %743 = xor i32 %742, %741
  %744 = xor i32 %740, %741
  %745 = add nuw nsw i32 %744, %743
  %746 = icmp eq i32 %745, 2
  %747 = icmp ne i32 %740, 0
  %748 = xor i1 %747, %746
  %749 = select i1 %748, i64 17, i64 404
  %750 = add i64 %732, %749
  br i1 %748, label %block_4050e2, label %block_405265

block_404ecc:                                     ; preds = %block_404ec5, %block_404edd
  %751 = phi i64 [ %1963, %block_404ec5 ], [ %1615, %block_404edd ]
  %752 = phi %struct.Memory* [ %205, %block_404ec5 ], [ %752, %block_404edd ]
  %753 = inttoptr i64 %517 to i32*
  %754 = load i32, i32* %753
  %755 = inttoptr i64 %518 to i32*
  %756 = load i32, i32* %755
  %757 = add i32 %756, -1
  %758 = sub i32 %754, %757
  %759 = lshr i32 %758, 31
  %760 = lshr i32 %754, 31
  %761 = lshr i32 %757, 31
  %762 = xor i32 %761, %760
  %763 = xor i32 %759, %760
  %764 = add nuw nsw i32 %763, %762
  %765 = icmp eq i32 %764, 2
  %766 = icmp ne i32 %759, 0
  %767 = xor i1 %766, %765
  %768 = select i1 %767, i64 17, i64 510
  %769 = add i64 %751, %768
  br i1 %767, label %block_404edd, label %block_4050ca

block_4065a1:                                     ; preds = %block_406593
  store i64 7, i64* %23, align 8, !tbaa !1240
  %770 = add i64 %191, -22785
  %771 = add i64 %191, 10
  %772 = load i64, i64* %24, align 8, !tbaa !1240
  %773 = add i64 %772, -8
  %774 = inttoptr i64 %773 to i64*
  store i64 %771, i64* %774
  store i64 %773, i64* %24, align 8, !tbaa !1240
  %775 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %770, %struct.Memory* %185)
  %776 = load i64, i64* %3, align 8
  br label %block_4065ab

block_4050ca:                                     ; preds = %block_404ecc
  %777 = add i64 %769, 7
  %778 = inttoptr i64 %517 to i32*
  store i32 0, i32* %778
  br label %block_4050d1

block_405960:                                     ; preds = %block_40594f
  %779 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1040) to double*)
  store double %779, double* %2012, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2014, align 1, !tbaa !1244
  %780 = inttoptr i64 %2009 to i64*
  %781 = load i64, i64* %780
  %782 = inttoptr i64 %2001 to i32*
  %783 = load i32, i32* %782
  %784 = shl i32 %783, 1
  %785 = inttoptr i64 %2046 to i32*
  %786 = load i32, i32* %785
  %787 = sub i32 %784, %786
  %788 = add i32 %787, -1
  %789 = sext i32 %788 to i64
  %790 = inttoptr i64 %2010 to i64*
  %791 = load i64, i64* %790
  %792 = inttoptr i64 %2011 to i64*
  %793 = load i64, i64* %792
  store i64 %793, i64* %23, align 8, !tbaa !1240
  %794 = mul i64 %793, %791
  %795 = mul i64 %794, %789
  %796 = shl i64 %795, 3
  %797 = add i64 %796, %781
  %798 = inttoptr i64 %2005 to i32*
  %799 = load i32, i32* %798
  %800 = shl i32 %799, 1
  %801 = inttoptr i64 %2024 to i32*
  %802 = load i32, i32* %801
  %803 = sub i32 %800, %802
  %804 = add i32 %803, -1
  %805 = sext i32 %804 to i64
  %806 = mul i64 %793, %805
  %807 = shl i64 %806, 3
  %808 = add i64 %807, %797
  %809 = shl i32 %1675, 1
  %810 = inttoptr i64 %1928 to i32*
  %811 = load i32, i32* %810
  %812 = sub i32 %809, %811
  %813 = add i32 %812, -1
  %814 = sext i32 %813 to i64
  %815 = shl nsw i64 %814, 3
  %816 = add i64 %808, %815
  %817 = inttoptr i64 %816 to double*
  %818 = load double, double* %817
  %819 = inttoptr i64 %2015 to i64*
  %820 = load i64, i64* %819
  %821 = add i32 %783, -1
  %822 = sext i32 %821 to i64
  %823 = inttoptr i64 %2016 to i64*
  %824 = load i64, i64* %823
  %825 = inttoptr i64 %2017 to i64*
  %826 = load i64, i64* %825
  store i64 %826, i64* %26, align 8, !tbaa !1240
  %827 = mul i64 %826, %824
  %828 = mul i64 %827, %822
  %829 = shl i64 %828, 3
  %830 = add i64 %829, %820
  %831 = sext i32 %799 to i64
  %832 = mul i64 %826, %831
  %833 = shl i64 %832, 3
  %834 = add i64 %833, %830
  %835 = add i32 %1675, -1
  %836 = sext i32 %835 to i64
  %837 = shl nsw i64 %836, 3
  %838 = add i64 %834, %837
  %839 = inttoptr i64 %838 to double*
  %840 = load double, double* %839
  %841 = add i32 %799, -1
  %842 = sext i32 %841 to i64
  %843 = mul i64 %826, %842
  %844 = shl i64 %843, 3
  %845 = add i64 %844, %830
  %846 = add i64 %845, %837
  %847 = inttoptr i64 %846 to double*
  %848 = load double, double* %847
  %849 = fadd double %840, %848
  store double %849, double* %2022, align 1, !tbaa !1244
  store i64 0, i64* %2023, align 1, !tbaa !1244
  %850 = load double, double* %2012, align 1
  %851 = fmul double %850, %849
  store double %851, double* %2012, align 1, !tbaa !1244
  %852 = fadd double %818, %851
  store double %852, double* %2019, align 1, !tbaa !1244
  store i64 0, i64* %2020, align 1, !tbaa !1244
  %853 = load i64, i64* %23, align 8
  %854 = mul i64 %853, %791
  store i64 %854, i64* %22, align 8, !tbaa !1240
  %855 = mul i64 %854, %789
  %856 = shl i64 %855, 3
  %857 = add i64 %856, %781
  %858 = mul i64 %853, %805
  %859 = shl i64 %858, 3
  %860 = add i64 %859, %857
  store i64 %814, i64* %21, align 8, !tbaa !1240
  %861 = add i64 %860, %815
  %862 = inttoptr i64 %861 to double*
  store double %852, double* %862
  %863 = inttoptr i64 %2007 to i32*
  %864 = load i32, i32* %863
  %865 = add i32 %864, 1
  %866 = inttoptr i64 %2007 to i32*
  store i32 %865, i32* %866
  %867 = add i64 %1693, -17
  br label %block_40594f

block_405949:                                     ; preds = %block_405938
  %868 = inttoptr i64 %1928 to i32*
  %869 = load i32, i32* %868
  %870 = add i64 %389, 6
  %871 = inttoptr i64 %2007 to i32*
  store i32 %869, i32* %871
  br label %block_40594f

block_404cc8:                                     ; preds = %block_404cbe
  %872 = add i64 %1310, 16
  %873 = inttoptr i64 %872 to i32*
  %874 = load i32, i32* %873
  %875 = add i32 %874, -3
  %876 = icmp eq i32 %875, 0
  %877 = select i1 %876, i64 2314, i64 10
  %878 = add i64 %1318, %877
  br i1 %876, label %block_4055d2, label %block_404cd2

block_405d0c:                                     ; preds = %block_405d06, %block_405d1d
  %879 = phi i64 [ %2049, %block_405d06 ], [ %624, %block_405d1d ]
  %880 = phi %struct.Memory* [ %264, %block_405d06 ], [ %880, %block_405d1d ]
  %881 = inttoptr i64 %231 to i32*
  %882 = load i32, i32* %881
  %883 = inttoptr i64 %232 to i32*
  %884 = load i32, i32* %883
  %885 = add i32 %884, -1
  %886 = sub i32 %882, %885
  %887 = lshr i32 %886, 31
  %888 = lshr i32 %882, 31
  %889 = lshr i32 %885, 31
  %890 = xor i32 %889, %888
  %891 = xor i32 %887, %888
  %892 = add nuw nsw i32 %891, %890
  %893 = icmp eq i32 %892, 2
  %894 = icmp ne i32 %886, 0
  %895 = icmp ne i32 %887, 0
  %896 = xor i1 %895, %893
  %897 = xor i1 %896, true
  %898 = and i1 %894, %897
  %899 = select i1 %898, i64 368, i64 17
  %900 = add i64 %879, %899
  br i1 %898, label %block_405e7c, label %block_405d1d

block_405ac6:                                     ; preds = %block_405abf, %block_405ad7
  %901 = phi i64 [ %1929, %block_405abf ], [ %724, %block_405ad7 ]
  %902 = phi %struct.Memory* [ %1673, %block_405abf ], [ %902, %block_405ad7 ]
  %903 = inttoptr i64 %2007 to i32*
  %904 = load i32, i32* %903
  %905 = inttoptr i64 %2008 to i32*
  %906 = load i32, i32* %905
  %907 = add i32 %906, -1
  %908 = sub i32 %904, %907
  %909 = lshr i32 %908, 31
  %910 = lshr i32 %904, 31
  %911 = lshr i32 %907, 31
  %912 = xor i32 %911, %910
  %913 = xor i32 %909, %910
  %914 = add nuw nsw i32 %913, %912
  %915 = icmp eq i32 %914, 2
  %916 = icmp ne i32 %908, 0
  %917 = icmp ne i32 %909, 0
  %918 = xor i1 %917, %915
  %919 = xor i1 %918, true
  %920 = and i1 %916, %919
  %921 = select i1 %920, i64 491, i64 17
  %922 = add i64 %901, %921
  br i1 %920, label %block_405cb1, label %block_405ad7

block_406568:                                     ; preds = %block_406291
  %923 = inttoptr i64 %228 to i32*
  %924 = load i32, i32* %923
  %925 = add i32 %924, 1
  %926 = inttoptr i64 %228 to i32*
  store i32 %925, i32* %926
  %927 = add i64 %1637, -1248
  br label %block_406088

block_405cb1:                                     ; preds = %block_405ac6
  %928 = inttoptr i64 %2005 to i32*
  %929 = load i32, i32* %928
  %930 = add i32 %929, 1
  %931 = inttoptr i64 %2005 to i32*
  store i32 %930, i32* %931
  %932 = add i64 %922, -889
  br label %block_405938

block_4060b0:                                     ; preds = %block_40609f
  %933 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1032) to double*)
  store double %933, double* %2012, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2014, align 1, !tbaa !1244
  %934 = inttoptr i64 %233 to i64*
  %935 = load i64, i64* %934
  %936 = inttoptr i64 %225 to i32*
  %937 = load i32, i32* %936
  %938 = shl i32 %937, 1
  %939 = inttoptr i64 %234 to i32*
  %940 = load i32, i32* %939
  %941 = sub i32 %938, %940
  %942 = add i32 %941, -1
  %943 = sext i32 %942 to i64
  %944 = inttoptr i64 %235 to i64*
  %945 = load i64, i64* %944
  %946 = inttoptr i64 %236 to i64*
  %947 = load i64, i64* %946
  store i64 %947, i64* %23, align 8, !tbaa !1240
  %948 = mul i64 %947, %945
  %949 = mul i64 %948, %943
  %950 = shl i64 %949, 3
  %951 = add i64 %950, %935
  %952 = inttoptr i64 %228 to i32*
  %953 = load i32, i32* %952
  %954 = shl i32 %953, 1
  %955 = inttoptr i64 %241 to i32*
  %956 = load i32, i32* %955
  %957 = sub i32 %954, %956
  %958 = add i32 %957, -1
  %959 = sext i32 %958 to i64
  %960 = mul i64 %947, %959
  %961 = shl i64 %960, 3
  %962 = add i64 %961, %951
  %963 = shl i32 %1172, 1
  %964 = inttoptr i64 %230 to i32*
  %965 = load i32, i32* %964
  %966 = sub i32 %963, %965
  %967 = add i32 %966, -1
  %968 = sext i32 %967 to i64
  %969 = shl nsw i64 %968, 3
  %970 = add i64 %962, %969
  %971 = inttoptr i64 %970 to double*
  %972 = load double, double* %971
  store double %972, double* %2019, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2021, align 1, !tbaa !1244
  %973 = inttoptr i64 %237 to i64*
  %974 = load i64, i64* %973
  %975 = sext i32 %937 to i64
  %976 = inttoptr i64 %238 to i64*
  %977 = load i64, i64* %976
  %978 = inttoptr i64 %239 to i64*
  %979 = load i64, i64* %978
  store i64 %979, i64* %26, align 8, !tbaa !1240
  %980 = mul i64 %979, %977
  %981 = mul i64 %980, %975
  %982 = shl i64 %981, 3
  %983 = add i64 %982, %974
  %984 = sext i32 %953 to i64
  %985 = mul i64 %979, %984
  %986 = shl i64 %985, 3
  %987 = add i64 %986, %983
  %988 = add i32 %1172, -1
  %989 = sext i32 %988 to i64
  %990 = shl nsw i64 %989, 3
  %991 = add i64 %987, %990
  %992 = inttoptr i64 %991 to double*
  %993 = load double, double* %992
  %994 = add i32 %953, -1
  %995 = sext i32 %994 to i64
  %996 = mul i64 %979, %995
  %997 = shl i64 %996, 3
  %998 = add i64 %997, %983
  %999 = add i64 %998, %990
  %1000 = inttoptr i64 %999 to double*
  %1001 = load double, double* %1000
  %1002 = fadd double %993, %1001
  %1003 = add i32 %937, -1
  %1004 = sext i32 %1003 to i64
  %1005 = mul i64 %980, %1004
  %1006 = shl i64 %1005, 3
  %1007 = add i64 %1006, %974
  %1008 = add i64 %986, %1007
  %1009 = add i64 %1008, %990
  %1010 = inttoptr i64 %1009 to double*
  %1011 = load double, double* %1010
  %1012 = fadd double %1002, %1011
  %1013 = add i64 %997, %1007
  %1014 = add i64 %1013, %990
  %1015 = inttoptr i64 %1014 to double*
  %1016 = load double, double* %1015
  %1017 = fadd double %1012, %1016
  store double %1017, double* %2022, align 1, !tbaa !1244
  store i64 0, i64* %2023, align 1, !tbaa !1244
  %1018 = load double, double* %2012, align 1
  %1019 = fmul double %1018, %1017
  store double %1019, double* %2012, align 1, !tbaa !1244
  %1020 = load double, double* %2019, align 1
  %1021 = fadd double %1020, %1019
  store double %1021, double* %2019, align 1, !tbaa !1244
  %1022 = load i64, i64* %23, align 8
  %1023 = mul i64 %1022, %945
  store i64 %1023, i64* %22, align 8, !tbaa !1240
  %1024 = mul i64 %1023, %943
  %1025 = shl i64 %1024, 3
  %1026 = add i64 %1025, %935
  %1027 = mul i64 %1022, %959
  %1028 = shl i64 %1027, 3
  %1029 = add i64 %1028, %1026
  store i64 %968, i64* %21, align 8, !tbaa !1240
  %1030 = add i64 %1029, %969
  %1031 = inttoptr i64 %1030 to double*
  store double %1021, double* %1031
  %1032 = inttoptr i64 %231 to i32*
  %1033 = load i32, i32* %1032
  %1034 = add i32 %1033, 1
  %1035 = inttoptr i64 %231 to i32*
  store i32 %1034, i32* %1035
  %1036 = add i64 %1190, -17
  br label %block_40609f

block_4062a2:                                     ; preds = %block_406291
  %1037 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1024) to double*)
  store double %1037, double* %2012, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2014, align 1, !tbaa !1244
  %1038 = inttoptr i64 %233 to i64*
  %1039 = load i64, i64* %1038
  %1040 = inttoptr i64 %225 to i32*
  %1041 = load i32, i32* %1040
  %1042 = shl i32 %1041, 1
  %1043 = inttoptr i64 %234 to i32*
  %1044 = load i32, i32* %1043
  %1045 = sub i32 %1042, %1044
  %1046 = add i32 %1045, -1
  %1047 = sext i32 %1046 to i64
  %1048 = inttoptr i64 %235 to i64*
  %1049 = load i64, i64* %1048
  %1050 = inttoptr i64 %236 to i64*
  %1051 = load i64, i64* %1050
  store i64 %1051, i64* %23, align 8, !tbaa !1240
  %1052 = mul i64 %1051, %1049
  %1053 = mul i64 %1052, %1047
  %1054 = shl i64 %1053, 3
  %1055 = add i64 %1054, %1039
  %1056 = inttoptr i64 %228 to i32*
  %1057 = load i32, i32* %1056
  %1058 = shl i32 %1057, 1
  %1059 = inttoptr i64 %241 to i32*
  %1060 = load i32, i32* %1059
  %1061 = sub i32 %1058, %1060
  %1062 = add i32 %1061, -1
  %1063 = sext i32 %1062 to i64
  %1064 = mul i64 %1051, %1063
  %1065 = shl i64 %1064, 3
  %1066 = add i64 %1065, %1055
  %1067 = shl i32 %1619, 1
  %1068 = inttoptr i64 %240 to i32*
  %1069 = load i32, i32* %1068
  %1070 = sub i32 %1067, %1069
  %1071 = add i32 %1070, -1
  %1072 = sext i32 %1071 to i64
  %1073 = shl nsw i64 %1072, 3
  %1074 = add i64 %1066, %1073
  %1075 = inttoptr i64 %1074 to double*
  %1076 = load double, double* %1075
  store double %1076, double* %2019, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2021, align 1, !tbaa !1244
  %1077 = inttoptr i64 %237 to i64*
  %1078 = load i64, i64* %1077
  %1079 = sext i32 %1041 to i64
  %1080 = inttoptr i64 %238 to i64*
  %1081 = load i64, i64* %1080
  %1082 = inttoptr i64 %239 to i64*
  %1083 = load i64, i64* %1082
  store i64 %1083, i64* %26, align 8, !tbaa !1240
  %1084 = mul i64 %1083, %1081
  %1085 = mul i64 %1084, %1079
  %1086 = shl i64 %1085, 3
  %1087 = add i64 %1086, %1078
  %1088 = sext i32 %1057 to i64
  %1089 = mul i64 %1083, %1088
  %1090 = shl i64 %1089, 3
  %1091 = add i64 %1090, %1087
  %1092 = sext i32 %1619 to i64
  %1093 = shl nsw i64 %1092, 3
  %1094 = add i64 %1093, %1091
  %1095 = inttoptr i64 %1094 to double*
  %1096 = load double, double* %1095
  %1097 = add i32 %1057, -1
  %1098 = sext i32 %1097 to i64
  %1099 = mul i64 %1083, %1098
  %1100 = shl i64 %1099, 3
  %1101 = add i64 %1100, %1087
  %1102 = add i64 %1093, %1101
  %1103 = inttoptr i64 %1102 to double*
  %1104 = load double, double* %1103
  %1105 = fadd double %1096, %1104
  %1106 = add i32 %1619, -1
  %1107 = sext i32 %1106 to i64
  %1108 = shl nsw i64 %1107, 3
  %1109 = add i64 %1091, %1108
  %1110 = inttoptr i64 %1109 to double*
  %1111 = load double, double* %1110
  %1112 = fadd double %1105, %1111
  %1113 = add i64 %1101, %1108
  %1114 = inttoptr i64 %1113 to double*
  %1115 = load double, double* %1114
  %1116 = fadd double %1112, %1115
  %1117 = add i32 %1041, -1
  %1118 = sext i32 %1117 to i64
  %1119 = mul i64 %1084, %1118
  %1120 = shl i64 %1119, 3
  %1121 = add i64 %1120, %1078
  %1122 = load i64, i64* %26, align 8
  %1123 = mul i64 %1122, %1088
  %1124 = shl i64 %1123, 3
  %1125 = add i64 %1124, %1121
  %1126 = add i64 %1093, %1125
  %1127 = inttoptr i64 %1126 to double*
  %1128 = load double, double* %1127
  %1129 = fadd double %1116, %1128
  %1130 = mul i64 %1122, %1081
  %1131 = mul i64 %1130, %1118
  %1132 = shl i64 %1131, 3
  %1133 = add i64 %1132, %1078
  %1134 = mul i64 %1122, %1098
  %1135 = shl i64 %1134, 3
  %1136 = add i64 %1135, %1133
  %1137 = add i64 %1093, %1136
  %1138 = inttoptr i64 %1137 to double*
  %1139 = load double, double* %1138
  %1140 = fadd double %1129, %1139
  %1141 = add i64 %1124, %1133
  %1142 = add i64 %1141, %1108
  %1143 = inttoptr i64 %1142 to double*
  %1144 = load double, double* %1143
  %1145 = fadd double %1140, %1144
  %1146 = add i64 %1136, %1108
  %1147 = inttoptr i64 %1146 to double*
  %1148 = load double, double* %1147
  %1149 = fadd double %1145, %1148
  store double %1149, double* %2022, align 1, !tbaa !1244
  store i64 0, i64* %2023, align 1, !tbaa !1244
  %1150 = load double, double* %2012, align 1
  %1151 = fmul double %1150, %1149
  store double %1151, double* %2012, align 1, !tbaa !1244
  %1152 = load double, double* %2019, align 1
  %1153 = fadd double %1152, %1151
  store double %1153, double* %2019, align 1, !tbaa !1244
  %1154 = load i64, i64* %23, align 8
  %1155 = mul i64 %1154, %1049
  store i64 %1155, i64* %22, align 8, !tbaa !1240
  %1156 = mul i64 %1155, %1047
  %1157 = shl i64 %1156, 3
  %1158 = add i64 %1157, %1039
  %1159 = mul i64 %1154, %1063
  %1160 = shl i64 %1159, 3
  %1161 = add i64 %1160, %1158
  store i64 %1072, i64* %21, align 8, !tbaa !1240
  %1162 = add i64 %1161, %1073
  %1163 = inttoptr i64 %1162 to double*
  store double %1153, double* %1163
  %1164 = inttoptr i64 %231 to i32*
  %1165 = load i32, i32* %1164
  %1166 = add i32 %1165, 1
  %1167 = inttoptr i64 %231 to i32*
  store i32 %1166, i32* %1167
  %1168 = add i64 %1637, -17
  br label %block_406291

block_40609f:                                     ; preds = %block_406099, %block_4060b0
  %1169 = phi i64 [ %2111, %block_406099 ], [ %1036, %block_4060b0 ]
  %1170 = phi %struct.Memory* [ %2277, %block_406099 ], [ %1170, %block_4060b0 ]
  %1171 = inttoptr i64 %231 to i32*
  %1172 = load i32, i32* %1171
  %1173 = inttoptr i64 %232 to i32*
  %1174 = load i32, i32* %1173
  %1175 = add i32 %1174, -1
  %1176 = sub i32 %1172, %1175
  %1177 = lshr i32 %1176, 31
  %1178 = lshr i32 %1172, 31
  %1179 = lshr i32 %1175, 31
  %1180 = xor i32 %1179, %1178
  %1181 = xor i32 %1177, %1178
  %1182 = add nuw nsw i32 %1181, %1180
  %1183 = icmp eq i32 %1182, 2
  %1184 = icmp ne i32 %1176, 0
  %1185 = icmp ne i32 %1177, 0
  %1186 = xor i1 %1185, %1183
  %1187 = xor i1 %1186, true
  %1188 = and i1 %1184, %1187
  %1189 = select i1 %1188, i64 491, i64 17
  %1190 = add i64 %1169, %1189
  br i1 %1188, label %block_40628a, label %block_4060b0

block_404d1f:                                     ; preds = %block_404d13
  %1191 = inttoptr i64 %519 to i64*
  %1192 = load i64, i64* %1191
  %1193 = inttoptr i64 %511 to i32*
  %1194 = load i32, i32* %1193
  %1195 = sext i32 %1194 to i64
  %1196 = inttoptr i64 %520 to i64*
  %1197 = load i64, i64* %1196
  %1198 = inttoptr i64 %521 to i64*
  %1199 = load i64, i64* %1198
  store i64 %1199, i64* %22, align 8, !tbaa !1240
  %1200 = mul i64 %1199, %1197
  %1201 = mul i64 %1200, %1195
  %1202 = shl i64 %1201, 3
  %1203 = add i64 %1202, %1192
  %1204 = inttoptr i64 %515 to i32*
  %1205 = load i32, i32* %1204
  %1206 = add i32 %1205, 1
  %1207 = sext i32 %1206 to i64
  %1208 = mul i64 %1199, %1207
  %1209 = shl i64 %1208, 3
  %1210 = add i64 %1209, %1203
  %1211 = sext i32 %207 to i64
  %1212 = shl nsw i64 %1211, 3
  %1213 = add i64 %1212, %1210
  %1214 = inttoptr i64 %1213 to double*
  %1215 = load double, double* %1214
  %1216 = sext i32 %1205 to i64
  %1217 = mul i64 %1199, %1216
  %1218 = shl i64 %1217, 3
  %1219 = add i64 %1218, %1203
  %1220 = add i64 %1212, %1219
  %1221 = inttoptr i64 %1220 to double*
  %1222 = load double, double* %1221
  %1223 = fadd double %1215, %1222
  %1224 = add i64 %525, %1212
  %1225 = inttoptr i64 %1224 to double*
  store double %1223, double* %1225
  %1226 = inttoptr i64 %519 to i64*
  %1227 = load i64, i64* %1226
  %1228 = inttoptr i64 %511 to i32*
  %1229 = load i32, i32* %1228
  %1230 = add i32 %1229, 1
  %1231 = sext i32 %1230 to i64
  %1232 = inttoptr i64 %520 to i64*
  %1233 = load i64, i64* %1232
  %1234 = mul i64 %1199, %1233
  %1235 = mul i64 %1234, %1231
  %1236 = shl i64 %1235, 3
  %1237 = add i64 %1236, %1227
  %1238 = inttoptr i64 %515 to i32*
  %1239 = load i32, i32* %1238
  %1240 = sext i32 %1239 to i64
  %1241 = mul i64 %1199, %1240
  %1242 = shl i64 %1241, 3
  %1243 = add i64 %1242, %1237
  %1244 = inttoptr i64 %517 to i32*
  %1245 = load i32, i32* %1244
  %1246 = sext i32 %1245 to i64
  %1247 = shl nsw i64 %1246, 3
  %1248 = add i64 %1247, %1243
  %1249 = inttoptr i64 %1248 to double*
  %1250 = load double, double* %1249
  %1251 = sext i32 %1229 to i64
  %1252 = mul i64 %1234, %1251
  %1253 = shl i64 %1252, 3
  %1254 = add i64 %1253, %1227
  %1255 = add i64 %1242, %1254
  %1256 = add i64 %1247, %1255
  %1257 = inttoptr i64 %1256 to double*
  %1258 = load double, double* %1257
  %1259 = fadd double %1250, %1258
  %1260 = add i64 %526, %1247
  %1261 = inttoptr i64 %1260 to double*
  store double %1259, double* %1261
  %1262 = inttoptr i64 %519 to i64*
  %1263 = load i64, i64* %1262
  %1264 = inttoptr i64 %511 to i32*
  %1265 = load i32, i32* %1264
  %1266 = add i32 %1265, 1
  %1267 = zext i32 %1266 to i64
  %1268 = sext i32 %1266 to i64
  %1269 = inttoptr i64 %520 to i64*
  %1270 = load i64, i64* %1269
  %1271 = load i64, i64* %22, align 8
  %1272 = mul i64 %1271, %1270
  %1273 = mul i64 %1272, %1268
  %1274 = shl i64 %1273, 3
  %1275 = add i64 %1274, %1263
  %1276 = inttoptr i64 %515 to i32*
  %1277 = load i32, i32* %1276
  %1278 = add i32 %1277, 1
  %1279 = sext i32 %1278 to i64
  %1280 = mul i64 %1271, %1279
  %1281 = shl i64 %1280, 3
  %1282 = add i64 %1281, %1275
  %1283 = inttoptr i64 %517 to i32*
  %1284 = load i32, i32* %1283
  %1285 = sext i32 %1284 to i64
  %1286 = shl nsw i64 %1285, 3
  %1287 = add i64 %1286, %1282
  %1288 = inttoptr i64 %1287 to double*
  %1289 = load double, double* %1288
  store i64 %1267, i64* %23, align 8, !tbaa !1240
  store i64 %1272, i64* %21, align 8, !tbaa !1240
  %1290 = sext i32 %1277 to i64
  %1291 = mul i64 %1271, %1290
  %1292 = shl i64 %1291, 3
  %1293 = add i64 %1292, %1275
  %1294 = add i64 %1286, %1293
  %1295 = inttoptr i64 %1294 to double*
  %1296 = load double, double* %1295
  %1297 = fadd double %1289, %1296
  %1298 = add i64 %525, %1286
  %1299 = inttoptr i64 %1298 to double*
  %1300 = load double, double* %1299
  %1301 = fadd double %1297, %1300
  store double %1301, double* %522, align 1, !tbaa !1244
  store i64 0, i64* %523, align 1, !tbaa !1244
  %1302 = add i64 %527, %1286
  %1303 = inttoptr i64 %1302 to double*
  store double %1301, double* %1303
  %1304 = inttoptr i64 %517 to i32*
  %1305 = load i32, i32* %1304
  %1306 = add i32 %1305, 1
  %1307 = inttoptr i64 %517 to i32*
  store i32 %1306, i32* %1307
  %1308 = add i64 %221, -12
  br label %block_404d13

block_404cbe:                                     ; preds = %block_404cb4, %block_404c20
  %1309 = phi i64 [ %132, %block_404c20 ], [ %1645, %block_404cb4 ]
  %1310 = phi i64 [ %126, %block_404c20 ], [ %1644, %block_404cb4 ]
  %1311 = phi %struct.Memory* [ %2, %block_404c20 ], [ %1643, %block_404cb4 ]
  %1312 = add i64 %1310, -60
  %1313 = inttoptr i64 %1312 to i32*
  %1314 = load i32, i32* %1313
  %1315 = add i32 %1314, -3
  %1316 = icmp eq i32 %1315, 0
  %1317 = select i1 %1316, i64 2324, i64 10
  %1318 = add i64 %1309, %1317
  br i1 %1316, label %block_4055d2, label %block_404cc8

block_405698:                                     ; preds = %block_405687
  %1319 = inttoptr i64 %2009 to i64*
  %1320 = load i64, i64* %1319
  %1321 = inttoptr i64 %2001 to i32*
  %1322 = load i32, i32* %1321
  %1323 = shl i32 %1322, 1
  %1324 = inttoptr i64 %2046 to i32*
  %1325 = load i32, i32* %1324
  %1326 = sub i32 %1323, %1325
  %1327 = add i32 %1326, -1
  %1328 = sext i32 %1327 to i64
  %1329 = inttoptr i64 %2010 to i64*
  %1330 = load i64, i64* %1329
  %1331 = inttoptr i64 %2011 to i64*
  %1332 = load i64, i64* %1331
  store i64 %1332, i64* %23, align 8, !tbaa !1240
  %1333 = mul i64 %1332, %1330
  %1334 = mul i64 %1333, %1328
  %1335 = shl i64 %1334, 3
  %1336 = add i64 %1335, %1320
  %1337 = inttoptr i64 %2005 to i32*
  %1338 = load i32, i32* %1337
  %1339 = shl i32 %1338, 1
  %1340 = inttoptr i64 %2108 to i32*
  %1341 = load i32, i32* %1340
  %1342 = sub i32 %1339, %1341
  %1343 = add i32 %1342, -1
  %1344 = sext i32 %1343 to i64
  %1345 = mul i64 %1332, %1344
  %1346 = shl i64 %1345, 3
  %1347 = add i64 %1346, %1336
  %1348 = shl i32 %1795, 1
  %1349 = inttoptr i64 %1928 to i32*
  %1350 = load i32, i32* %1349
  %1351 = sub i32 %1348, %1350
  %1352 = add i32 %1351, -1
  %1353 = sext i32 %1352 to i64
  %1354 = shl nsw i64 %1353, 3
  %1355 = add i64 %1347, %1354
  %1356 = inttoptr i64 %1355 to double*
  %1357 = load double, double* %1356
  %1358 = inttoptr i64 %2015 to i64*
  %1359 = load i64, i64* %1358
  %1360 = add i32 %1322, -1
  %1361 = sext i32 %1360 to i64
  %1362 = inttoptr i64 %2016 to i64*
  %1363 = load i64, i64* %1362
  %1364 = inttoptr i64 %2017 to i64*
  %1365 = load i64, i64* %1364
  store i64 %1365, i64* %26, align 8, !tbaa !1240
  %1366 = mul i64 %1365, %1363
  %1367 = mul i64 %1366, %1361
  %1368 = shl i64 %1367, 3
  %1369 = add i64 %1368, %1359
  %1370 = add i32 %1338, -1
  %1371 = sext i32 %1370 to i64
  %1372 = mul i64 %1365, %1371
  %1373 = shl i64 %1372, 3
  %1374 = add i64 %1373, %1369
  %1375 = add i32 %1795, -1
  %1376 = sext i32 %1375 to i64
  %1377 = shl nsw i64 %1376, 3
  %1378 = add i64 %1374, %1377
  %1379 = inttoptr i64 %1378 to double*
  %1380 = load double, double* %1379
  %1381 = fadd double %1357, %1380
  store double %1381, double* %2012, align 1, !tbaa !1244
  store i64 0, i64* %2013, align 1, !tbaa !1244
  store i64 %1333, i64* %22, align 8, !tbaa !1240
  store i64 %1353, i64* %21, align 8, !tbaa !1240
  %1382 = inttoptr i64 %1355 to double*
  store double %1381, double* %1382
  %1383 = inttoptr i64 %2007 to i32*
  %1384 = load i32, i32* %1383
  %1385 = add i32 %1384, 1
  %1386 = inttoptr i64 %2007 to i32*
  store i32 %1385, i32* %1386
  %1387 = add i64 %1813, -17
  br label %block_405687

block_405e94:                                     ; preds = %block_405e83
  %1388 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1032) to double*)
  store double %1388, double* %2012, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2014, align 1, !tbaa !1244
  %1389 = inttoptr i64 %233 to i64*
  %1390 = load i64, i64* %1389
  %1391 = inttoptr i64 %225 to i32*
  %1392 = load i32, i32* %1391
  %1393 = shl i32 %1392, 1
  %1394 = inttoptr i64 %234 to i32*
  %1395 = load i32, i32* %1394
  %1396 = sub i32 %1393, %1395
  %1397 = add i32 %1396, -1
  %1398 = sext i32 %1397 to i64
  %1399 = inttoptr i64 %235 to i64*
  %1400 = load i64, i64* %1399
  %1401 = inttoptr i64 %236 to i64*
  %1402 = load i64, i64* %1401
  store i64 %1402, i64* %23, align 8, !tbaa !1240
  %1403 = mul i64 %1402, %1400
  %1404 = mul i64 %1403, %1398
  %1405 = shl i64 %1404, 3
  %1406 = add i64 %1405, %1390
  %1407 = inttoptr i64 %228 to i32*
  %1408 = load i32, i32* %1407
  %1409 = shl i32 %1408, 1
  %1410 = inttoptr i64 %227 to i32*
  %1411 = load i32, i32* %1410
  %1412 = sub i32 %1409, %1411
  %1413 = add i32 %1412, -1
  %1414 = sext i32 %1413 to i64
  %1415 = mul i64 %1402, %1414
  %1416 = shl i64 %1415, 3
  %1417 = add i64 %1416, %1406
  %1418 = shl i32 %1649, 1
  %1419 = inttoptr i64 %240 to i32*
  %1420 = load i32, i32* %1419
  %1421 = sub i32 %1418, %1420
  %1422 = add i32 %1421, -1
  %1423 = sext i32 %1422 to i64
  %1424 = shl nsw i64 %1423, 3
  %1425 = add i64 %1417, %1424
  %1426 = inttoptr i64 %1425 to double*
  %1427 = load double, double* %1426
  store double %1427, double* %2019, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2021, align 1, !tbaa !1244
  %1428 = inttoptr i64 %237 to i64*
  %1429 = load i64, i64* %1428
  %1430 = sext i32 %1392 to i64
  %1431 = inttoptr i64 %238 to i64*
  %1432 = load i64, i64* %1431
  %1433 = inttoptr i64 %239 to i64*
  %1434 = load i64, i64* %1433
  store i64 %1434, i64* %26, align 8, !tbaa !1240
  %1435 = mul i64 %1434, %1432
  %1436 = mul i64 %1435, %1430
  %1437 = shl i64 %1436, 3
  %1438 = add i64 %1437, %1429
  %1439 = add i32 %1408, -1
  %1440 = sext i32 %1439 to i64
  %1441 = mul i64 %1434, %1440
  %1442 = shl i64 %1441, 3
  %1443 = add i64 %1442, %1438
  %1444 = sext i32 %1649 to i64
  %1445 = shl nsw i64 %1444, 3
  %1446 = add i64 %1445, %1443
  %1447 = inttoptr i64 %1446 to double*
  %1448 = load double, double* %1447
  %1449 = add i32 %1649, -1
  %1450 = sext i32 %1449 to i64
  %1451 = shl nsw i64 %1450, 3
  %1452 = add i64 %1443, %1451
  %1453 = inttoptr i64 %1452 to double*
  %1454 = load double, double* %1453
  %1455 = fadd double %1448, %1454
  %1456 = add i32 %1392, -1
  %1457 = sext i32 %1456 to i64
  %1458 = mul i64 %1435, %1457
  %1459 = shl i64 %1458, 3
  %1460 = add i64 %1459, %1429
  %1461 = add i64 %1442, %1460
  %1462 = add i64 %1445, %1461
  %1463 = inttoptr i64 %1462 to double*
  %1464 = load double, double* %1463
  %1465 = fadd double %1455, %1464
  %1466 = add i64 %1461, %1451
  %1467 = inttoptr i64 %1466 to double*
  %1468 = load double, double* %1467
  %1469 = fadd double %1465, %1468
  store double %1469, double* %2022, align 1, !tbaa !1244
  store i64 0, i64* %2023, align 1, !tbaa !1244
  %1470 = load double, double* %2012, align 1
  %1471 = fmul double %1470, %1469
  store double %1471, double* %2012, align 1, !tbaa !1244
  %1472 = load double, double* %2019, align 1
  %1473 = fadd double %1472, %1471
  store double %1473, double* %2019, align 1, !tbaa !1244
  %1474 = load i64, i64* %23, align 8
  %1475 = mul i64 %1474, %1400
  store i64 %1475, i64* %22, align 8, !tbaa !1240
  %1476 = mul i64 %1475, %1398
  %1477 = shl i64 %1476, 3
  %1478 = add i64 %1477, %1390
  %1479 = mul i64 %1474, %1414
  %1480 = shl i64 %1479, 3
  %1481 = add i64 %1480, %1478
  store i64 %1423, i64* %21, align 8, !tbaa !1240
  %1482 = add i64 %1481, %1424
  %1483 = inttoptr i64 %1482 to double*
  store double %1473, double* %1483
  %1484 = inttoptr i64 %231 to i32*
  %1485 = load i32, i32* %1484
  %1486 = add i32 %1485, 1
  %1487 = inttoptr i64 %231 to i32*
  store i32 %1486, i32* %1487
  %1488 = add i64 %1667, -17
  br label %block_405e83

block_404edd:                                     ; preds = %block_404ecc
  %1489 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1040) to double*)
  store double %1489, double* %522, align 1, !tbaa !1244
  store double 0.000000e+00, double* %524, align 1, !tbaa !1244
  %1490 = inttoptr i64 %528 to i64*
  %1491 = load i64, i64* %1490
  %1492 = inttoptr i64 %511 to i32*
  %1493 = load i32, i32* %1492
  %1494 = shl i32 %1493, 1
  %1495 = sext i32 %1494 to i64
  %1496 = inttoptr i64 %529 to i64*
  %1497 = load i64, i64* %1496
  %1498 = inttoptr i64 %530 to i64*
  %1499 = load i64, i64* %1498
  store i64 %1499, i64* %23, align 8, !tbaa !1240
  %1500 = mul i64 %1499, %1497
  %1501 = mul i64 %1500, %1495
  %1502 = shl i64 %1501, 3
  %1503 = add i64 %1502, %1491
  %1504 = inttoptr i64 %515 to i32*
  %1505 = load i32, i32* %1504
  %1506 = shl i32 %1505, 1
  %1507 = sext i32 %1506 to i64
  %1508 = mul i64 %1499, %1507
  %1509 = shl i64 %1508, 3
  %1510 = add i64 %1509, %1503
  %1511 = shl i32 %754, 1
  %1512 = sext i32 %1511 to i64
  %1513 = shl nsw i64 %1512, 3
  %1514 = add i64 %1510, %1513
  %1515 = inttoptr i64 %1514 to double*
  %1516 = load double, double* %1515
  %1517 = inttoptr i64 %519 to i64*
  %1518 = load i64, i64* %1517
  %1519 = sext i32 %1493 to i64
  %1520 = inttoptr i64 %520 to i64*
  %1521 = load i64, i64* %1520
  %1522 = inttoptr i64 %521 to i64*
  %1523 = load i64, i64* %1522
  store i64 %1523, i64* %26, align 8, !tbaa !1240
  %1524 = mul i64 %1523, %1521
  %1525 = mul i64 %1524, %1519
  %1526 = shl i64 %1525, 3
  %1527 = add i64 %1526, %1518
  %1528 = sext i32 %1505 to i64
  %1529 = mul i64 %1523, %1528
  %1530 = shl i64 %1529, 3
  %1531 = add i64 %1530, %1527
  %1532 = sext i32 %754 to i64
  %1533 = shl nsw i64 %1532, 3
  %1534 = add i64 %1533, %1531
  %1535 = inttoptr i64 %1534 to double*
  %1536 = load double, double* %1535
  %1537 = fadd double %1516, %1536
  %1538 = inttoptr i64 %1514 to double*
  store double %1537, double* %1538
  %1539 = inttoptr i64 %528 to i64*
  %1540 = load i64, i64* %1539
  %1541 = inttoptr i64 %511 to i32*
  %1542 = load i32, i32* %1541
  %1543 = shl i32 %1542, 1
  %1544 = sext i32 %1543 to i64
  %1545 = inttoptr i64 %529 to i64*
  %1546 = load i64, i64* %1545
  %1547 = mul i64 %1499, %1546
  %1548 = mul i64 %1547, %1544
  %1549 = shl i64 %1548, 3
  %1550 = add i64 %1549, %1540
  %1551 = inttoptr i64 %515 to i32*
  %1552 = load i32, i32* %1551
  %1553 = shl i32 %1552, 1
  %1554 = sext i32 %1553 to i64
  %1555 = load i64, i64* %23, align 8
  %1556 = mul i64 %1555, %1554
  %1557 = shl i64 %1556, 3
  %1558 = add i64 %1557, %1550
  %1559 = inttoptr i64 %517 to i32*
  %1560 = load i32, i32* %1559
  %1561 = shl i32 %1560, 1
  %1562 = or i32 %1561, 1
  %1563 = sext i32 %1562 to i64
  %1564 = shl nsw i64 %1563, 3
  %1565 = add i64 %1558, %1564
  %1566 = inttoptr i64 %1565 to double*
  %1567 = load double, double* %1566
  %1568 = inttoptr i64 %519 to i64*
  %1569 = load i64, i64* %1568
  %1570 = sext i32 %1542 to i64
  %1571 = inttoptr i64 %520 to i64*
  %1572 = load i64, i64* %1571
  %1573 = mul i64 %1523, %1572
  %1574 = mul i64 %1573, %1570
  %1575 = shl i64 %1574, 3
  %1576 = add i64 %1575, %1569
  %1577 = sext i32 %1552 to i64
  %1578 = mul i64 %1523, %1577
  %1579 = shl i64 %1578, 3
  %1580 = add i64 %1579, %1576
  %1581 = add i32 %1560, 1
  %1582 = sext i32 %1581 to i64
  %1583 = shl nsw i64 %1582, 3
  %1584 = add i64 %1580, %1583
  %1585 = inttoptr i64 %1584 to double*
  %1586 = load double, double* %1585
  %1587 = load i64, i64* %26, align 8
  %1588 = mul i64 %1587, %1572
  %1589 = mul i64 %1588, %1570
  %1590 = shl i64 %1589, 3
  %1591 = add i64 %1590, %1569
  %1592 = mul i64 %1587, %1577
  %1593 = shl i64 %1592, 3
  %1594 = add i64 %1593, %1591
  %1595 = sext i32 %1560 to i64
  %1596 = shl nsw i64 %1595, 3
  %1597 = add i64 %1596, %1594
  %1598 = inttoptr i64 %1597 to double*
  %1599 = load double, double* %1598
  %1600 = fadd double %1586, %1599
  store double %1600, double* %533, align 1, !tbaa !1244
  store i64 0, i64* %534, align 1, !tbaa !1244
  %1601 = load double, double* %522, align 1
  %1602 = fmul double %1601, %1600
  store double %1602, double* %522, align 1, !tbaa !1244
  %1603 = fadd double %1567, %1602
  store double %1603, double* %531, align 1, !tbaa !1244
  store i64 0, i64* %532, align 1, !tbaa !1244
  %1604 = mul i64 %1555, %1546
  store i64 %1604, i64* %22, align 8, !tbaa !1240
  %1605 = mul i64 %1604, %1544
  %1606 = shl i64 %1605, 3
  %1607 = add i64 %1606, %1540
  %1608 = add i64 %1557, %1607
  store i64 %1563, i64* %21, align 8, !tbaa !1240
  %1609 = add i64 %1608, %1564
  %1610 = inttoptr i64 %1609 to double*
  store double %1603, double* %1610
  %1611 = inttoptr i64 %517 to i32*
  %1612 = load i32, i32* %1611
  %1613 = add i32 %1612, 1
  %1614 = inttoptr i64 %517 to i32*
  store i32 %1613, i32* %1614
  %1615 = add i64 %769, -17
  br label %block_404ecc

block_406291:                                     ; preds = %block_40628a, %block_4062a2
  %1616 = phi i64 [ %1955, %block_40628a ], [ %1168, %block_4062a2 ]
  %1617 = phi %struct.Memory* [ %1170, %block_40628a ], [ %1617, %block_4062a2 ]
  %1618 = inttoptr i64 %231 to i32*
  %1619 = load i32, i32* %1618
  %1620 = inttoptr i64 %232 to i32*
  %1621 = load i32, i32* %1620
  %1622 = add i32 %1621, -1
  %1623 = sub i32 %1619, %1622
  %1624 = lshr i32 %1623, 31
  %1625 = lshr i32 %1619, 31
  %1626 = lshr i32 %1622, 31
  %1627 = xor i32 %1626, %1625
  %1628 = xor i32 %1624, %1625
  %1629 = add nuw nsw i32 %1628, %1627
  %1630 = icmp eq i32 %1629, 2
  %1631 = icmp ne i32 %1623, 0
  %1632 = icmp ne i32 %1624, 0
  %1633 = xor i1 %1632, %1630
  %1634 = xor i1 %1633, true
  %1635 = and i1 %1631, %1634
  %1636 = select i1 %1635, i64 727, i64 17
  %1637 = add i64 %1616, %1636
  br i1 %1635, label %block_406568, label %block_4062a2

block_404cb4:                                     ; preds = %block_404c20
  store i64 7, i64* %23, align 8, !tbaa !1240
  %1638 = add i64 %132, -16484
  %1639 = add i64 %132, 10
  %1640 = load i64, i64* %24, align 8, !tbaa !1240
  %1641 = add i64 %1640, -8
  %1642 = inttoptr i64 %1641 to i64*
  store i64 %1639, i64* %1642
  store i64 %1641, i64* %24, align 8, !tbaa !1240
  %1643 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %1638, %struct.Memory* %2)
  %1644 = load i64, i64* %25, align 8
  %1645 = load i64, i64* %3, align 8
  br label %block_404cbe

block_405e83:                                     ; preds = %block_405e7c, %block_405e94
  %1646 = phi i64 [ %1814, %block_405e7c ], [ %1488, %block_405e94 ]
  %1647 = phi %struct.Memory* [ %880, %block_405e7c ], [ %1647, %block_405e94 ]
  %1648 = inttoptr i64 %231 to i32*
  %1649 = load i32, i32* %1648
  %1650 = inttoptr i64 %232 to i32*
  %1651 = load i32, i32* %1650
  %1652 = add i32 %1651, -1
  %1653 = sub i32 %1649, %1652
  %1654 = lshr i32 %1653, 31
  %1655 = lshr i32 %1649, 31
  %1656 = lshr i32 %1652, 31
  %1657 = xor i32 %1656, %1655
  %1658 = xor i32 %1654, %1655
  %1659 = add nuw nsw i32 %1658, %1657
  %1660 = icmp eq i32 %1659, 2
  %1661 = icmp ne i32 %1653, 0
  %1662 = icmp ne i32 %1654, 0
  %1663 = xor i1 %1662, %1660
  %1664 = xor i1 %1663, true
  %1665 = and i1 %1661, %1664
  %1666 = select i1 %1665, i64 491, i64 17
  %1667 = add i64 %1646, %1666
  br i1 %1665, label %block_40606e, label %block_405e94

block_405681:                                     ; preds = %block_405670
  %1668 = inttoptr i64 %1928 to i32*
  %1669 = load i32, i32* %1668
  %1670 = add i64 %1924, 6
  %1671 = inttoptr i64 %2007 to i32*
  store i32 %1669, i32* %1671
  br label %block_405687

block_40594f:                                     ; preds = %block_405949, %block_405960
  %1672 = phi i64 [ %870, %block_405949 ], [ %867, %block_405960 ]
  %1673 = phi %struct.Memory* [ %369, %block_405949 ], [ %1673, %block_405960 ]
  %1674 = inttoptr i64 %2007 to i32*
  %1675 = load i32, i32* %1674
  %1676 = inttoptr i64 %2008 to i32*
  %1677 = load i32, i32* %1676
  %1678 = add i32 %1677, -1
  %1679 = sub i32 %1675, %1678
  %1680 = lshr i32 %1679, 31
  %1681 = lshr i32 %1675, 31
  %1682 = lshr i32 %1678, 31
  %1683 = xor i32 %1682, %1681
  %1684 = xor i32 %1680, %1681
  %1685 = add nuw nsw i32 %1684, %1683
  %1686 = icmp eq i32 %1685, 2
  %1687 = icmp ne i32 %1679, 0
  %1688 = icmp ne i32 %1680, 0
  %1689 = xor i1 %1688, %1686
  %1690 = xor i1 %1689, true
  %1691 = and i1 %1687, %1690
  %1692 = select i1 %1691, i64 368, i64 17
  %1693 = add i64 %1672, %1692
  br i1 %1691, label %block_405abf, label %block_405960

block_40527d:                                     ; preds = %block_40526c
  %1694 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1032) to double*)
  store double %1694, double* %522, align 1, !tbaa !1244
  store double 0.000000e+00, double* %524, align 1, !tbaa !1244
  %1695 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1040) to double*)
  %1696 = inttoptr i64 %528 to i64*
  %1697 = load i64, i64* %1696
  %1698 = inttoptr i64 %511 to i32*
  %1699 = load i32, i32* %1698
  %1700 = shl i32 %1699, 1
  %1701 = or i32 %1700, 1
  %1702 = sext i32 %1701 to i64
  %1703 = inttoptr i64 %529 to i64*
  %1704 = load i64, i64* %1703
  %1705 = inttoptr i64 %530 to i64*
  %1706 = load i64, i64* %1705
  store i64 %1706, i64* %23, align 8, !tbaa !1240
  %1707 = mul i64 %1706, %1704
  %1708 = mul i64 %1707, %1702
  %1709 = shl i64 %1708, 3
  %1710 = add i64 %1709, %1697
  %1711 = inttoptr i64 %515 to i32*
  %1712 = load i32, i32* %1711
  %1713 = shl i32 %1712, 1
  %1714 = sext i32 %1713 to i64
  %1715 = mul i64 %1706, %1714
  %1716 = shl i64 %1715, 3
  %1717 = add i64 %1716, %1710
  %1718 = shl i32 %1939, 1
  %1719 = sext i32 %1718 to i64
  %1720 = shl nsw i64 %1719, 3
  %1721 = add i64 %1717, %1720
  %1722 = inttoptr i64 %1721 to double*
  %1723 = load double, double* %1722
  %1724 = sext i32 %1939 to i64
  %1725 = shl nsw i64 %1724, 3
  %1726 = add i64 %526, %1725
  %1727 = inttoptr i64 %1726 to double*
  %1728 = load double, double* %1727
  %1729 = fmul double %1695, %1728
  %1730 = fadd double %1723, %1729
  %1731 = inttoptr i64 %1721 to double*
  store double %1730, double* %1731
  %1732 = inttoptr i64 %528 to i64*
  %1733 = load i64, i64* %1732
  %1734 = inttoptr i64 %511 to i32*
  %1735 = load i32, i32* %1734
  %1736 = shl i32 %1735, 1
  %1737 = or i32 %1736, 1
  %1738 = sext i32 %1737 to i64
  %1739 = inttoptr i64 %529 to i64*
  %1740 = load i64, i64* %1739
  %1741 = mul i64 %1706, %1740
  %1742 = mul i64 %1741, %1738
  %1743 = shl i64 %1742, 3
  %1744 = add i64 %1743, %1733
  %1745 = inttoptr i64 %515 to i32*
  %1746 = load i32, i32* %1745
  %1747 = shl i32 %1746, 1
  %1748 = sext i32 %1747 to i64
  %1749 = mul i64 %1706, %1748
  %1750 = shl i64 %1749, 3
  %1751 = add i64 %1750, %1744
  %1752 = inttoptr i64 %517 to i32*
  %1753 = load i32, i32* %1752
  %1754 = shl i32 %1753, 1
  %1755 = or i32 %1754, 1
  %1756 = sext i32 %1755 to i64
  %1757 = shl nsw i64 %1756, 3
  %1758 = add i64 %1751, %1757
  %1759 = inttoptr i64 %1758 to double*
  %1760 = load double, double* %1759
  %1761 = sext i32 %1753 to i64
  %1762 = shl nsw i64 %1761, 3
  %1763 = add i64 %526, %1762
  %1764 = inttoptr i64 %1763 to double*
  %1765 = load double, double* %1764
  %1766 = add i32 %1753, 1
  %1767 = sext i32 %1766 to i64
  %1768 = shl nsw i64 %1767, 3
  %1769 = add nsw i64 %1768, -4272
  %1770 = add i64 %1769, %1310
  %1771 = inttoptr i64 %1770 to double*
  %1772 = load double, double* %1771
  %1773 = fadd double %1765, %1772
  store double %1773, double* %533, align 1, !tbaa !1244
  store i64 0, i64* %534, align 1, !tbaa !1244
  %1774 = load double, double* %522, align 1
  %1775 = fmul double %1774, %1773
  store double %1775, double* %522, align 1, !tbaa !1244
  %1776 = fadd double %1760, %1775
  store double %1776, double* %531, align 1, !tbaa !1244
  store i64 0, i64* %532, align 1, !tbaa !1244
  %1777 = load i64, i64* %23, align 8
  %1778 = mul i64 %1777, %1740
  store i64 %1778, i64* %22, align 8, !tbaa !1240
  %1779 = mul i64 %1778, %1738
  %1780 = shl i64 %1779, 3
  %1781 = add i64 %1780, %1733
  %1782 = mul i64 %1777, %1748
  %1783 = shl i64 %1782, 3
  %1784 = add i64 %1783, %1781
  store i64 %1756, i64* %21, align 8, !tbaa !1240
  %1785 = add i64 %1784, %1757
  %1786 = inttoptr i64 %1785 to double*
  store double %1776, double* %1786
  %1787 = inttoptr i64 %517 to i32*
  %1788 = load i32, i32* %1787
  %1789 = add i32 %1788, 1
  %1790 = inttoptr i64 %517 to i32*
  store i32 %1789, i32* %1790
  %1791 = add i64 %1954, -17
  br label %block_40526c

block_405687:                                     ; preds = %block_405681, %block_405698
  %1792 = phi i64 [ %1670, %block_405681 ], [ %1387, %block_405698 ]
  %1793 = phi %struct.Memory* [ %1904, %block_405681 ], [ %1793, %block_405698 ]
  %1794 = inttoptr i64 %2007 to i32*
  %1795 = load i32, i32* %1794
  %1796 = inttoptr i64 %2008 to i32*
  %1797 = load i32, i32* %1796
  %1798 = add i32 %1797, -1
  %1799 = sub i32 %1795, %1798
  %1800 = lshr i32 %1799, 31
  %1801 = lshr i32 %1795, 31
  %1802 = lshr i32 %1798, 31
  %1803 = xor i32 %1802, %1801
  %1804 = xor i32 %1800, %1801
  %1805 = add nuw nsw i32 %1804, %1803
  %1806 = icmp eq i32 %1805, 2
  %1807 = icmp ne i32 %1799, 0
  %1808 = icmp ne i32 %1800, 0
  %1809 = xor i1 %1808, %1806
  %1810 = xor i1 %1809, true
  %1811 = and i1 %1807, %1810
  %1812 = select i1 %1811, i64 288, i64 17
  %1813 = add i64 %1792, %1812
  br i1 %1811, label %block_4057a7, label %block_405698

block_405e7c:                                     ; preds = %block_405d0c
  %1814 = add i64 %900, 7
  %1815 = inttoptr i64 %231 to i32*
  store i32 1, i32* %1815
  br label %block_405e83

block_4057bf:                                     ; preds = %block_4057ae
  %1816 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1040) to double*)
  store double %1816, double* %2012, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2014, align 1, !tbaa !1244
  %1817 = inttoptr i64 %2009 to i64*
  %1818 = load i64, i64* %1817
  %1819 = inttoptr i64 %2001 to i32*
  %1820 = load i32, i32* %1819
  %1821 = shl i32 %1820, 1
  %1822 = inttoptr i64 %2046 to i32*
  %1823 = load i32, i32* %1822
  %1824 = sub i32 %1821, %1823
  %1825 = add i32 %1824, -1
  %1826 = sext i32 %1825 to i64
  %1827 = inttoptr i64 %2010 to i64*
  %1828 = load i64, i64* %1827
  %1829 = inttoptr i64 %2011 to i64*
  %1830 = load i64, i64* %1829
  store i64 %1830, i64* %23, align 8, !tbaa !1240
  %1831 = mul i64 %1830, %1828
  %1832 = mul i64 %1831, %1826
  %1833 = shl i64 %1832, 3
  %1834 = add i64 %1833, %1818
  %1835 = inttoptr i64 %2005 to i32*
  %1836 = load i32, i32* %1835
  %1837 = shl i32 %1836, 1
  %1838 = inttoptr i64 %2108 to i32*
  %1839 = load i32, i32* %1838
  %1840 = sub i32 %1837, %1839
  %1841 = add i32 %1840, -1
  %1842 = sext i32 %1841 to i64
  %1843 = mul i64 %1830, %1842
  %1844 = shl i64 %1843, 3
  %1845 = add i64 %1844, %1834
  %1846 = shl i32 %144, 1
  %1847 = inttoptr i64 %2018 to i32*
  %1848 = load i32, i32* %1847
  %1849 = sub i32 %1846, %1848
  %1850 = add i32 %1849, -1
  %1851 = sext i32 %1850 to i64
  %1852 = shl nsw i64 %1851, 3
  %1853 = add i64 %1845, %1852
  %1854 = inttoptr i64 %1853 to double*
  %1855 = load double, double* %1854
  %1856 = inttoptr i64 %2015 to i64*
  %1857 = load i64, i64* %1856
  %1858 = add i32 %1820, -1
  %1859 = sext i32 %1858 to i64
  %1860 = inttoptr i64 %2016 to i64*
  %1861 = load i64, i64* %1860
  %1862 = inttoptr i64 %2017 to i64*
  %1863 = load i64, i64* %1862
  store i64 %1863, i64* %26, align 8, !tbaa !1240
  %1864 = mul i64 %1863, %1861
  %1865 = mul i64 %1864, %1859
  %1866 = shl i64 %1865, 3
  %1867 = add i64 %1866, %1857
  %1868 = add i32 %1836, -1
  %1869 = sext i32 %1868 to i64
  %1870 = mul i64 %1863, %1869
  %1871 = shl i64 %1870, 3
  %1872 = add i64 %1871, %1867
  %1873 = sext i32 %144 to i64
  %1874 = shl nsw i64 %1873, 3
  %1875 = add i64 %1874, %1872
  %1876 = inttoptr i64 %1875 to double*
  %1877 = load double, double* %1876
  %1878 = add i32 %144, -1
  %1879 = sext i32 %1878 to i64
  %1880 = shl nsw i64 %1879, 3
  %1881 = add i64 %1872, %1880
  %1882 = inttoptr i64 %1881 to double*
  %1883 = load double, double* %1882
  %1884 = fadd double %1877, %1883
  store double %1884, double* %2022, align 1, !tbaa !1244
  store i64 0, i64* %2023, align 1, !tbaa !1244
  %1885 = load double, double* %2012, align 1
  %1886 = fmul double %1885, %1884
  store double %1886, double* %2012, align 1, !tbaa !1244
  %1887 = fadd double %1855, %1886
  store double %1887, double* %2019, align 1, !tbaa !1244
  store i64 0, i64* %2020, align 1, !tbaa !1244
  %1888 = load i64, i64* %23, align 8
  %1889 = mul i64 %1888, %1828
  store i64 %1889, i64* %22, align 8, !tbaa !1240
  %1890 = mul i64 %1889, %1826
  %1891 = shl i64 %1890, 3
  %1892 = add i64 %1891, %1818
  %1893 = mul i64 %1888, %1842
  %1894 = shl i64 %1893, 3
  %1895 = add i64 %1894, %1892
  store i64 %1851, i64* %21, align 8, !tbaa !1240
  %1896 = add i64 %1895, %1852
  %1897 = inttoptr i64 %1896 to double*
  store double %1887, double* %1897
  %1898 = inttoptr i64 %2007 to i32*
  %1899 = load i32, i32* %1898
  %1900 = add i32 %1899, 1
  %1901 = inttoptr i64 %2007 to i32*
  store i32 %1900, i32* %1901
  %1902 = add i64 %162, -17
  br label %block_4057ae

block_405670:                                     ; preds = %block_40566a, %block_40591e
  %1903 = phi i64 [ %1959, %block_40566a ], [ %203, %block_40591e ]
  %1904 = phi %struct.Memory* [ %1966, %block_40566a ], [ %142, %block_40591e ]
  %1905 = inttoptr i64 %2005 to i32*
  %1906 = load i32, i32* %1905
  %1907 = inttoptr i64 %2006 to i32*
  %1908 = load i32, i32* %1907
  %1909 = add i32 %1908, -1
  %1910 = sub i32 %1906, %1909
  %1911 = lshr i32 %1910, 31
  %1912 = lshr i32 %1906, 31
  %1913 = lshr i32 %1909, 31
  %1914 = xor i32 %1913, %1912
  %1915 = xor i32 %1911, %1912
  %1916 = add nuw nsw i32 %1915, %1914
  %1917 = icmp eq i32 %1916, 2
  %1918 = icmp ne i32 %1910, 0
  %1919 = icmp ne i32 %1911, 0
  %1920 = xor i1 %1919, %1917
  %1921 = xor i1 %1920, true
  %1922 = and i1 %1918, %1921
  %1923 = select i1 %1922, i64 705, i64 17
  %1924 = add i64 %1903, %1923
  br i1 %1922, label %block_405931, label %block_405681

block_4055d2:                                     ; preds = %block_404cbe, %block_404cc8, %block_404cd2
  %1925 = phi i64 [ %1318, %block_404cbe ], [ %878, %block_404cc8 ], [ %731, %block_404cd2 ]
  %1926 = select i1 %1316, i64 10, i64 29
  %1927 = add i64 %1925, %1926
  %1928 = add i64 %1310, -96
  br i1 %1316, label %block_4055dc, label %block_4055ef

block_405abf:                                     ; preds = %block_40594f
  %1929 = add i64 %1693, 7
  %1930 = inttoptr i64 %2007 to i32*
  store i32 1, i32* %1930
  br label %block_405ac6

block_40606e:                                     ; preds = %block_405e83
  %1931 = inttoptr i64 %228 to i32*
  %1932 = load i32, i32* %1931
  %1933 = add i32 %1932, 1
  %1934 = inttoptr i64 %228 to i32*
  store i32 %1933, i32* %1934
  %1935 = add i64 %1667, -889
  br label %block_405cf5

block_40526c:                                     ; preds = %block_405265, %block_40527d
  %1936 = phi i64 [ %1961, %block_405265 ], [ %1791, %block_40527d ]
  %1937 = phi %struct.Memory* [ %733, %block_405265 ], [ %1937, %block_40527d ]
  %1938 = inttoptr i64 %517 to i32*
  %1939 = load i32, i32* %1938
  %1940 = inttoptr i64 %518 to i32*
  %1941 = load i32, i32* %1940
  %1942 = add i32 %1941, -1
  %1943 = sub i32 %1939, %1942
  %1944 = lshr i32 %1943, 31
  %1945 = lshr i32 %1939, 31
  %1946 = lshr i32 %1942, 31
  %1947 = xor i32 %1946, %1945
  %1948 = xor i32 %1944, %1945
  %1949 = add nuw nsw i32 %1948, %1947
  %1950 = icmp eq i32 %1949, 2
  %1951 = icmp ne i32 %1944, 0
  %1952 = xor i1 %1951, %1950
  %1953 = select i1 %1952, i64 17, i64 404
  %1954 = add i64 %1936, %1953
  br i1 %1952, label %block_40527d, label %block_405400

block_40628a:                                     ; preds = %block_40609f
  %1955 = add i64 %1190, 7
  %1956 = inttoptr i64 %231 to i32*
  store i32 1, i32* %1956
  br label %block_406291

block_40566a:                                     ; preds = %block_405659
  %1957 = inttoptr i64 %2108 to i32*
  %1958 = load i32, i32* %1957
  %1959 = add i64 %1986, 6
  %1960 = inttoptr i64 %2005 to i32*
  store i32 %1958, i32* %1960
  br label %block_405670

block_405265:                                     ; preds = %block_4050d1
  %1961 = add i64 %750, 7
  %1962 = inttoptr i64 %517 to i32*
  store i32 0, i32* %1962
  br label %block_40526c

block_404ec5:                                     ; preds = %block_404d13
  %1963 = add i64 %221, 7
  %1964 = inttoptr i64 %517 to i32*
  store i32 0, i32* %1964
  br label %block_404ecc

block_405659:                                     ; preds = %block_405653, %block_405cc4
  %1965 = phi i64 [ %2002, %block_405653 ], [ %1996, %block_405cc4 ]
  %1966 = phi %struct.Memory* [ %1998, %block_405653 ], [ %369, %block_405cc4 ]
  %1967 = inttoptr i64 %2001 to i32*
  %1968 = load i32, i32* %1967
  %1969 = inttoptr i64 %2004 to i32*
  %1970 = load i32, i32* %1969
  %1971 = add i32 %1970, -1
  %1972 = sub i32 %1968, %1971
  %1973 = icmp eq i32 %1972, 0
  %1974 = lshr i32 %1972, 31
  %1975 = trunc i32 %1974 to i8
  %1976 = lshr i32 %1968, 31
  %1977 = lshr i32 %1971, 31
  %1978 = xor i32 %1977, %1976
  %1979 = xor i32 %1974, %1976
  %1980 = add nuw nsw i32 %1979, %1978
  %1981 = icmp eq i32 %1980, 2
  %1982 = icmp ne i8 %1975, 0
  %1983 = xor i1 %1982, %1981
  %1984 = or i1 %1973, %1983
  %1985 = select i1 %1984, i64 17, i64 1662
  %1986 = add i64 %1965, %1985
  br i1 %1984, label %block_40566a, label %block_405cd7

block_40657b:                                     ; preds = %block_406088
  %1987 = inttoptr i64 %225 to i32*
  %1988 = load i32, i32* %1987
  %1989 = add i32 %1988, 1
  %1990 = inttoptr i64 %225 to i32*
  store i32 %1989, i32* %1990
  %1991 = add i64 %2297, -2205
  br label %block_405cde

block_405cc4:                                     ; preds = %block_405938
  %1992 = inttoptr i64 %2001 to i32*
  %1993 = load i32, i32* %1992
  %1994 = add i32 %1993, 1
  %1995 = inttoptr i64 %2001 to i32*
  store i32 %1994, i32* %1995
  %1996 = add i64 %389, -1643
  br label %block_405659

block_405653:                                     ; preds = %block_405632, %block_405645
  %1997 = phi i64 [ %2027, %block_405645 ], [ %2032, %block_405632 ]
  %1998 = phi %struct.Memory* [ %2038, %block_405645 ], [ %2038, %block_405632 ]
  %1999 = inttoptr i64 %2046 to i32*
  %2000 = load i32, i32* %1999
  %2001 = add i64 %1310, -84
  %2002 = add i64 %1997, 6
  %2003 = inttoptr i64 %2001 to i32*
  store i32 %2000, i32* %2003
  %2004 = add i64 %1310, -44
  %2005 = add i64 %1310, -88
  %2006 = add i64 %1310, -40
  %2007 = add i64 %1310, -92
  %2008 = add i64 %1310, -36
  %2009 = add i64 %1310, -80
  %2010 = add i64 %1310, -6392
  %2011 = add i64 %1310, -6400
  %2012 = bitcast [32 x %union.VectorReg]* %29 to double*
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %2014 = bitcast i64* %2013 to double*
  %2015 = add i64 %1310, -72
  %2016 = add i64 %1310, -6376
  %2017 = add i64 %1310, -6384
  %2018 = add i64 %1310, -108
  %2019 = bitcast %union.VectorReg* %30 to double*
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %2021 = bitcast i64* %2020 to double*
  %2022 = bitcast %union.VectorReg* %31 to double*
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %2024 = add i64 %1310, -112
  br label %block_405659

block_405645:                                     ; preds = %block_405628
  %2025 = inttoptr i64 %2046 to i32*
  store i32 1, i32* %2025
  %2026 = add i64 %1310, -116
  %2027 = add i64 %2045, 14
  %2028 = inttoptr i64 %2026 to i32*
  store i32 0, i32* %2028
  br label %block_405653

block_405632:                                     ; preds = %block_405628
  %2029 = inttoptr i64 %2046 to i32*
  store i32 2, i32* %2029
  %2030 = add i64 %1310, -116
  %2031 = inttoptr i64 %2030 to i32*
  store i32 1, i32* %2031
  %2032 = add i64 %2045, 33
  br label %block_405653

block_405607:                                     ; preds = %block_4055fd
  %2033 = inttoptr i64 %2108 to i32*
  store i32 2, i32* %2033
  %2034 = add i64 %1310, -112
  %2035 = inttoptr i64 %2034 to i32*
  store i32 1, i32* %2035
  %2036 = add i64 %2107, 33
  br label %block_405628

block_405628:                                     ; preds = %block_40561a, %block_405607
  %2037 = phi i64 [ %2097, %block_40561a ], [ %2036, %block_405607 ]
  %2038 = phi %struct.Memory* [ %2100, %block_40561a ], [ %2100, %block_405607 ]
  %2039 = add i64 %1310, 24
  %2040 = inttoptr i64 %2039 to i32*
  %2041 = load i32, i32* %2040
  %2042 = add i32 %2041, -3
  %2043 = icmp eq i32 %2042, 0
  %2044 = select i1 %2043, i64 10, i64 29
  %2045 = add i64 %2037, %2044
  %2046 = add i64 %1310, -104
  br i1 %2043, label %block_405632, label %block_405645

block_405d06:                                     ; preds = %block_405cf5
  %2047 = inttoptr i64 %230 to i32*
  %2048 = load i32, i32* %2047
  %2049 = add i64 %284, 6
  %2050 = inttoptr i64 %231 to i32*
  store i32 %2048, i32* %2050
  br label %block_405d0c

block_40661e:                                     ; preds = %block_40660e
  %2051 = add i64 %2259, -72
  %2052 = inttoptr i64 %2051 to i64*
  %2053 = load i64, i64* %2052
  %2054 = add i64 %2259, -36
  %2055 = inttoptr i64 %2054 to i32*
  %2056 = load i32, i32* %2055
  %2057 = zext i32 %2056 to i64
  store i64 %2057, i64* %22, align 8, !tbaa !1240
  %2058 = add i64 %2259, -40
  %2059 = inttoptr i64 %2058 to i32*
  %2060 = load i32, i32* %2059
  %2061 = zext i32 %2060 to i64
  store i64 %2061, i64* %21, align 8, !tbaa !1240
  %2062 = add i64 %2259, -44
  %2063 = inttoptr i64 %2062 to i32*
  %2064 = load i32, i32* %2063
  %2065 = zext i32 %2064 to i64
  store i64 %2065, i64* %20, align 8, !tbaa !1240
  store i64 %2053, i64* %23, align 8, !tbaa !1240
  %2066 = add i64 %2275, 1202
  %2067 = add i64 %2275, 21
  %2068 = load i64, i64* %24, align 8, !tbaa !1240
  %2069 = add i64 %2068, -8
  %2070 = inttoptr i64 %2069 to i64*
  store i64 %2067, i64* %2070
  store i64 %2069, i64* %24, align 8, !tbaa !1240
  %2071 = tail call %struct.Memory* @sub_406ad0_showall(%struct.State* nonnull %0, i64 %2066, %struct.Memory* %2256)
  %2072 = load i64, i64* %25, align 8
  %2073 = add i64 %2072, -80
  %2074 = load i64, i64* %3, align 8
  %2075 = inttoptr i64 %2073 to i64*
  %2076 = load i64, i64* %2075
  %2077 = add i64 %2072, -60
  %2078 = inttoptr i64 %2077 to i32*
  %2079 = load i32, i32* %2078
  %2080 = zext i32 %2079 to i64
  store i64 %2080, i64* %22, align 8, !tbaa !1240
  %2081 = add i64 %2072, 16
  %2082 = inttoptr i64 %2081 to i32*
  %2083 = load i32, i32* %2082
  %2084 = zext i32 %2083 to i64
  store i64 %2084, i64* %21, align 8, !tbaa !1240
  %2085 = add i64 %2072, 24
  %2086 = inttoptr i64 %2085 to i32*
  %2087 = load i32, i32* %2086
  %2088 = zext i32 %2087 to i64
  store i64 %2088, i64* %20, align 8, !tbaa !1240
  store i64 %2076, i64* %23, align 8, !tbaa !1240
  %2089 = add i64 %2074, 1181
  %2090 = add i64 %2074, 21
  %2091 = load i64, i64* %24, align 8, !tbaa !1240
  %2092 = add i64 %2091, -8
  %2093 = inttoptr i64 %2092 to i64*
  store i64 %2090, i64* %2093
  store i64 %2092, i64* %24, align 8, !tbaa !1240
  %2094 = tail call %struct.Memory* @sub_406ad0_showall(%struct.State* nonnull %0, i64 %2089, %struct.Memory* %2071)
  br label %block_406648

block_40561a:                                     ; preds = %block_4055fd
  %2095 = inttoptr i64 %2108 to i32*
  store i32 1, i32* %2095
  %2096 = add i64 %1310, -112
  %2097 = add i64 %2107, 14
  %2098 = inttoptr i64 %2096 to i32*
  store i32 0, i32* %2098
  br label %block_405628

block_4055fd:                                     ; preds = %block_4055dc, %block_4055ef
  %2099 = phi i64 [ %135, %block_4055ef ], [ %140, %block_4055dc ]
  %2100 = phi %struct.Memory* [ %1311, %block_4055ef ], [ %1311, %block_4055dc ]
  %2101 = add i64 %1310, 16
  %2102 = inttoptr i64 %2101 to i32*
  %2103 = load i32, i32* %2102
  %2104 = add i32 %2103, -3
  %2105 = icmp eq i32 %2104, 0
  %2106 = select i1 %2105, i64 10, i64 29
  %2107 = add i64 %2099, %2106
  %2108 = add i64 %1310, -100
  br i1 %2105, label %block_405607, label %block_40561a

block_406099:                                     ; preds = %block_406088
  %2109 = inttoptr i64 %230 to i32*
  %2110 = load i32, i32* %2109
  %2111 = add i64 %2297, 6
  %2112 = inttoptr i64 %231 to i32*
  store i32 %2110, i32* %2112
  br label %block_40609f

block_406648:                                     ; preds = %block_40660e, %block_40661e
  %2113 = phi %struct.Memory* [ %2256, %block_40660e ], [ %2094, %block_40661e ]
  %2114 = load i64, i64* %24, align 8
  %2115 = add i64 %2114, 6392
  %2116 = icmp ugt i64 %2114, -6393
  %2117 = zext i1 %2116 to i8
  store i8 %2117, i8* %46, align 1, !tbaa !1246
  %2118 = trunc i64 %2115 to i32
  %2119 = and i32 %2118, 255
  %2120 = tail call i32 @llvm.ctpop.i32(i32 %2119) #11
  %2121 = trunc i32 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = xor i8 %2122, 1
  store i8 %2123, i8* %47, align 1, !tbaa !1260
  %2124 = xor i64 %2114, 16
  %2125 = xor i64 %2124, %2115
  %2126 = lshr i64 %2125, 4
  %2127 = trunc i64 %2126 to i8
  %2128 = and i8 %2127, 1
  store i8 %2128, i8* %48, align 1, !tbaa !1261
  %2129 = icmp eq i64 %2115, 0
  %2130 = zext i1 %2129 to i8
  store i8 %2130, i8* %49, align 1, !tbaa !1262
  %2131 = lshr i64 %2115, 63
  %2132 = trunc i64 %2131 to i8
  store i8 %2132, i8* %50, align 1, !tbaa !1263
  %2133 = lshr i64 %2114, 63
  %2134 = xor i64 %2131, %2133
  %2135 = add nuw nsw i64 %2134, %2131
  %2136 = icmp eq i64 %2135, 2
  %2137 = zext i1 %2136 to i8
  store i8 %2137, i8* %51, align 1, !tbaa !1264
  %2138 = add i64 %2114, 6400
  %2139 = inttoptr i64 %2115 to i64*
  %2140 = load i64, i64* %2139
  store i64 %2140, i64* %19, align 8, !tbaa !1240
  %2141 = add i64 %2114, 6408
  %2142 = inttoptr i64 %2138 to i64*
  %2143 = load i64, i64* %2142
  store i64 %2143, i64* %27, align 8, !tbaa !1240
  %2144 = add i64 %2114, 6416
  %2145 = inttoptr i64 %2141 to i64*
  %2146 = load i64, i64* %2145
  store i64 %2146, i64* %28, align 8, !tbaa !1240
  %2147 = add i64 %2114, 6424
  %2148 = inttoptr i64 %2144 to i64*
  %2149 = load i64, i64* %2148
  store i64 %2149, i64* %25, align 8, !tbaa !1240
  %2150 = inttoptr i64 %2147 to i64*
  %2151 = load i64, i64* %2150
  store i64 %2151, i64* %3, align 8, !tbaa !1240
  %2152 = add i64 %2114, 6432
  store i64 %2152, i64* %24, align 8, !tbaa !1240
  ret %struct.Memory* %2113

block_405418:                                     ; preds = %block_405407
  %2153 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1024) to double*)
  store double %2153, double* %522, align 1, !tbaa !1244
  store double 0.000000e+00, double* %524, align 1, !tbaa !1244
  %2154 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1032) to double*)
  %2155 = inttoptr i64 %528 to i64*
  %2156 = load i64, i64* %2155
  %2157 = inttoptr i64 %511 to i32*
  %2158 = load i32, i32* %2157
  %2159 = shl i32 %2158, 1
  %2160 = or i32 %2159, 1
  %2161 = sext i32 %2160 to i64
  %2162 = inttoptr i64 %529 to i64*
  %2163 = load i64, i64* %2162
  %2164 = inttoptr i64 %530 to i64*
  %2165 = load i64, i64* %2164
  store i64 %2165, i64* %23, align 8, !tbaa !1240
  %2166 = mul i64 %2165, %2163
  %2167 = mul i64 %2166, %2161
  %2168 = shl i64 %2167, 3
  %2169 = add i64 %2168, %2156
  %2170 = inttoptr i64 %515 to i32*
  %2171 = load i32, i32* %2170
  %2172 = shl i32 %2171, 1
  %2173 = or i32 %2172, 1
  %2174 = sext i32 %2173 to i64
  %2175 = mul i64 %2165, %2174
  %2176 = shl i64 %2175, 3
  %2177 = add i64 %2176, %2169
  %2178 = shl i32 %2301, 1
  %2179 = sext i32 %2178 to i64
  %2180 = shl nsw i64 %2179, 3
  %2181 = add i64 %2177, %2180
  %2182 = inttoptr i64 %2181 to double*
  %2183 = load double, double* %2182
  %2184 = sext i32 %2301 to i64
  %2185 = shl nsw i64 %2184, 3
  %2186 = add i64 %527, %2185
  %2187 = inttoptr i64 %2186 to double*
  %2188 = load double, double* %2187
  %2189 = fmul double %2154, %2188
  %2190 = fadd double %2183, %2189
  %2191 = inttoptr i64 %2181 to double*
  store double %2190, double* %2191
  %2192 = inttoptr i64 %528 to i64*
  %2193 = load i64, i64* %2192
  %2194 = inttoptr i64 %511 to i32*
  %2195 = load i32, i32* %2194
  %2196 = shl i32 %2195, 1
  %2197 = or i32 %2196, 1
  %2198 = sext i32 %2197 to i64
  %2199 = inttoptr i64 %529 to i64*
  %2200 = load i64, i64* %2199
  %2201 = mul i64 %2165, %2200
  %2202 = mul i64 %2201, %2198
  %2203 = shl i64 %2202, 3
  %2204 = add i64 %2203, %2193
  %2205 = inttoptr i64 %515 to i32*
  %2206 = load i32, i32* %2205
  %2207 = shl i32 %2206, 1
  %2208 = or i32 %2207, 1
  %2209 = sext i32 %2208 to i64
  %2210 = mul i64 %2165, %2209
  %2211 = shl i64 %2210, 3
  %2212 = add i64 %2211, %2204
  %2213 = inttoptr i64 %517 to i32*
  %2214 = load i32, i32* %2213
  %2215 = shl i32 %2214, 1
  %2216 = or i32 %2215, 1
  %2217 = sext i32 %2216 to i64
  %2218 = shl nsw i64 %2217, 3
  %2219 = add i64 %2212, %2218
  %2220 = inttoptr i64 %2219 to double*
  %2221 = load double, double* %2220
  %2222 = sext i32 %2214 to i64
  %2223 = shl nsw i64 %2222, 3
  %2224 = add i64 %527, %2223
  %2225 = inttoptr i64 %2224 to double*
  %2226 = load double, double* %2225
  %2227 = add i32 %2214, 1
  %2228 = sext i32 %2227 to i64
  %2229 = shl nsw i64 %2228, 3
  %2230 = add nsw i64 %2229, -6352
  %2231 = add i64 %2230, %1310
  %2232 = inttoptr i64 %2231 to double*
  %2233 = load double, double* %2232
  %2234 = fadd double %2226, %2233
  store double %2234, double* %533, align 1, !tbaa !1244
  store i64 0, i64* %534, align 1, !tbaa !1244
  %2235 = load double, double* %522, align 1
  %2236 = fmul double %2235, %2234
  store double %2236, double* %522, align 1, !tbaa !1244
  %2237 = fadd double %2221, %2236
  store double %2237, double* %531, align 1, !tbaa !1244
  store i64 0, i64* %532, align 1, !tbaa !1244
  %2238 = load i64, i64* %23, align 8
  %2239 = mul i64 %2238, %2200
  store i64 %2239, i64* %22, align 8, !tbaa !1240
  %2240 = mul i64 %2239, %2198
  %2241 = shl i64 %2240, 3
  %2242 = add i64 %2241, %2193
  %2243 = mul i64 %2238, %2209
  %2244 = shl i64 %2243, 3
  %2245 = add i64 %2244, %2242
  store i64 %2217, i64* %21, align 8, !tbaa !1240
  %2246 = add i64 %2245, %2218
  %2247 = inttoptr i64 %2246 to double*
  store double %2237, double* %2247
  %2248 = inttoptr i64 %517 to i32*
  %2249 = load i32, i32* %2248
  %2250 = add i32 %2249, 1
  %2251 = inttoptr i64 %517 to i32*
  store i32 %2250, i32* %2251
  %2252 = add i64 %2316, -17
  br label %block_405407

block_404d0c:                                     ; preds = %block_404cfb
  %2253 = add i64 %260, 7
  %2254 = inttoptr i64 %517 to i32*
  store i32 0, i32* %2254
  br label %block_404d13

block_40660e:                                     ; preds = %block_4065b9, %block_4065ab
  %2255 = phi i64 [ %176, %block_4065ab ], [ %367, %block_4065b9 ]
  %2256 = phi %struct.Memory* [ %164, %block_4065ab ], [ %366, %block_4065b9 ]
  %2257 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1220) to i32*)
  %2258 = zext i32 %2257 to i64
  store i64 %2258, i64* %18, align 8, !tbaa !1240
  %2259 = load i64, i64* %25, align 8
  %2260 = add i64 %2259, 32
  %2261 = inttoptr i64 %2260 to i32*
  %2262 = load i32, i32* %2261
  %2263 = sub i32 %2257, %2262
  %2264 = lshr i32 %2263, 31
  %2265 = trunc i32 %2264 to i8
  %2266 = lshr i32 %2257, 31
  %2267 = lshr i32 %2262, 31
  %2268 = xor i32 %2267, %2266
  %2269 = xor i32 %2264, %2266
  %2270 = add nuw nsw i32 %2269, %2268
  %2271 = icmp eq i32 %2270, 2
  %2272 = icmp ne i8 %2265, 0
  %2273 = xor i1 %2272, %2271
  %2274 = select i1 %2273, i64 58, i64 16
  %2275 = add i64 %2255, %2274
  br i1 %2273, label %block_406648, label %block_40661e

block_406088:                                     ; preds = %block_406081, %block_406568
  %2276 = phi i64 [ %2317, %block_406081 ], [ %927, %block_406568 ]
  %2277 = phi %struct.Memory* [ %264, %block_406081 ], [ %1617, %block_406568 ]
  %2278 = inttoptr i64 %228 to i32*
  %2279 = load i32, i32* %2278
  %2280 = inttoptr i64 %229 to i32*
  %2281 = load i32, i32* %2280
  %2282 = add i32 %2281, -1
  %2283 = sub i32 %2279, %2282
  %2284 = lshr i32 %2283, 31
  %2285 = lshr i32 %2279, 31
  %2286 = lshr i32 %2282, 31
  %2287 = xor i32 %2286, %2285
  %2288 = xor i32 %2284, %2285
  %2289 = add nuw nsw i32 %2288, %2287
  %2290 = icmp eq i32 %2289, 2
  %2291 = icmp ne i32 %2283, 0
  %2292 = icmp ne i32 %2284, 0
  %2293 = xor i1 %2292, %2290
  %2294 = xor i1 %2293, true
  %2295 = and i1 %2291, %2294
  %2296 = select i1 %2295, i64 1267, i64 17
  %2297 = add i64 %2276, %2296
  br i1 %2295, label %block_40657b, label %block_406099

block_405407:                                     ; preds = %block_405400, %block_405418
  %2298 = phi i64 [ %2319, %block_405400 ], [ %2252, %block_405418 ]
  %2299 = phi %struct.Memory* [ %1937, %block_405400 ], [ %2299, %block_405418 ]
  %2300 = inttoptr i64 %517 to i32*
  %2301 = load i32, i32* %2300
  %2302 = inttoptr i64 %518 to i32*
  %2303 = load i32, i32* %2302
  %2304 = add i32 %2303, -1
  %2305 = sub i32 %2301, %2304
  %2306 = lshr i32 %2305, 31
  %2307 = lshr i32 %2301, 31
  %2308 = lshr i32 %2304, 31
  %2309 = xor i32 %2308, %2307
  %2310 = xor i32 %2306, %2307
  %2311 = add nuw nsw i32 %2310, %2309
  %2312 = icmp eq i32 %2311, 2
  %2313 = icmp ne i32 %2306, 0
  %2314 = xor i1 %2313, %2312
  %2315 = select i1 %2314, i64 17, i64 416
  %2316 = add i64 %2298, %2315
  br i1 %2314, label %block_405418, label %block_4055a7

block_406081:                                     ; preds = %block_405cf5
  %2317 = add i64 %284, 7
  %2318 = inttoptr i64 %228 to i32*
  store i32 1, i32* %2318
  br label %block_406088

block_405400:                                     ; preds = %block_40526c
  %2319 = add i64 %1954, 7
  %2320 = inttoptr i64 %517 to i32*
  store i32 0, i32* %2320
  br label %block_405407
}

; Function Attrs: noinline
define %struct.Memory* @sub_400c80_elapsed_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400c80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %5, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  store i64 %10, i64* %6, align 8, !tbaa !1240
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %9, -16
  store i64 %18, i64* %4, align 8, !tbaa !1240
  %19 = add i64 %1, 27648
  %20 = add i64 %1, 17
  %21 = add i64 %9, -32
  %22 = inttoptr i64 %21 to i64*
  store i64 %20, i64* %22
  store i64 %21, i64* %5, align 8, !tbaa !1240
  %23 = tail call %struct.Memory* @sub_407880_wtime_(%struct.State* nonnull %0, i64 %19, %struct.Memory* %2)
  %24 = load i64, i64* %6, align 8
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to double*
  %27 = load double, double* %26
  %28 = bitcast %union.VectorReg* %7 to double*
  store double %27, double* %28, align 1, !tbaa !1244
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to double*
  store double 0.000000e+00, double* %30, align 1, !tbaa !1244
  %31 = load i64, i64* %5, align 8
  %32 = add i64 %31, 16
  %33 = icmp ugt i64 %31, -17
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %12, align 1, !tbaa !1246
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #11
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %13, align 1, !tbaa !1260
  %41 = xor i64 %31, 16
  %42 = xor i64 %41, %32
  %43 = lshr i64 %42, 4
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  store i8 %45, i8* %14, align 1, !tbaa !1261
  %46 = icmp eq i64 %32, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %15, align 1, !tbaa !1262
  %48 = lshr i64 %32, 63
  %49 = trunc i64 %48 to i8
  store i8 %49, i8* %16, align 1, !tbaa !1263
  %50 = lshr i64 %31, 63
  %51 = xor i64 %48, %50
  %52 = add nuw nsw i64 %51, %48
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1264
  %55 = add i64 %31, 24
  %56 = inttoptr i64 %32 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %6, align 8, !tbaa !1240
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %3, align 8, !tbaa !1240
  %60 = add i64 %31, 32
  store i64 %60, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %23
}

; Function Attrs: noinline
define %struct.Memory* @sub_403230_norm2u3(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403230:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %24 = load i64, i64* %18, align 8
  %25 = load i64, i64* %17, align 8, !tbaa !1240
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27
  store i64 %26, i64* %18, align 8, !tbaa !1240
  %28 = add i64 %25, -136
  store i64 %28, i64* %17, align 8, !tbaa !1240
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %35 = add i64 %25, 24
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36
  %38 = zext i32 %37 to i64
  store i64 %38, i64* %12, align 8, !tbaa !1240
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %40 = add i64 %25, 16
  %41 = inttoptr i64 %40 to i32*
  %42 = load i32, i32* %41
  %43 = zext i32 %42 to i64
  store i64 %43, i64* %39, align 8, !tbaa !1240
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %45 = add i64 %25, 8
  %46 = inttoptr i64 %45 to i32*
  %47 = load i32, i32* %46
  %48 = zext i32 %47 to i64
  store i64 %48, i64* %44, align 8, !tbaa !1240
  %49 = add i64 %25, -16
  %50 = load i64, i64* %16, align 8
  %51 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %51
  %52 = add i64 %25, -20
  %53 = load i32, i32* %11, align 4
  %54 = inttoptr i64 %52 to i32*
  store i32 %53, i32* %54
  %55 = add i64 %25, -24
  %56 = load i32, i32* %9, align 4
  %57 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %57
  %58 = add i64 %25, -28
  %59 = load i32, i32* %7, align 4
  %60 = inttoptr i64 %58 to i32*
  store i32 %59, i32* %60
  %61 = add i64 %25, -40
  %62 = load i64, i64* %19, align 8
  %63 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %63
  %64 = add i64 %25, -48
  %65 = load i64, i64* %20, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %66
  %67 = inttoptr i64 %55 to i32*
  %68 = load i32, i32* %67
  %69 = zext i32 %68 to i64
  store i64 %69, i64* %16, align 8, !tbaa !1240
  %70 = inttoptr i64 %52 to i32*
  %71 = load i32, i32* %70
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %19, align 8, !tbaa !1240
  %73 = load i64, i64* %18, align 8
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75
  store i64 %76, i64* %20, align 8, !tbaa !1240
  %77 = add i64 %73, -48
  %78 = inttoptr i64 %77 to i64*
  store i64 %76, i64* %78
  %79 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %80 = icmp eq i32 %79, 0
  %81 = add i64 %73, -92
  %82 = inttoptr i64 %81 to i32*
  store i32 %47, i32* %82
  %83 = add i64 %73, -96
  %84 = inttoptr i64 %83 to i32*
  store i32 %42, i32* %84
  %85 = add i64 %73, -100
  %86 = load i32, i32* %5, align 4
  %87 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %87
  %88 = add i64 %73, -112
  %89 = inttoptr i64 %88 to i64*
  store i64 %69, i64* %89
  %90 = add i64 %73, -120
  %91 = inttoptr i64 %90 to i64*
  store i64 %72, i64* %91
  %92 = select i1 %80, i64 105, i64 95
  %93 = add i64 %92, %1
  br i1 %80, label %block_403299, label %block_40328f

block_40331f:                                     ; preds = %block_40330e
  %94 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1008) to double*)
  store double %94, double* %388, align 1, !tbaa !1244
  store double 0.000000e+00, double* %390, align 1, !tbaa !1244
  %95 = add i64 %498, -56
  %96 = inttoptr i64 %95 to double*
  %97 = load double, double* %96
  store double %97, double* %410, align 1, !tbaa !1244
  store double 0.000000e+00, double* %420, align 1, !tbaa !1244
  %98 = add i64 %498, -48
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %12, align 8, !tbaa !1240
  %101 = add i64 %498, -68
  %102 = inttoptr i64 %101 to i32*
  %103 = load i32, i32* %102
  %104 = sext i32 %103 to i64
  %105 = add i64 %498, -112
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  %108 = add i64 %498, -120
  %109 = inttoptr i64 %108 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %15, align 8, !tbaa !1240
  %111 = sext i64 %107 to i128
  %112 = and i128 %111, -18446744073709551616
  %113 = sext i64 %110 to i128
  %114 = and i128 %113, -18446744073709551616
  %115 = zext i64 %107 to i128
  %116 = or i128 %112, %115
  %117 = zext i64 %110 to i128
  %118 = or i128 %114, %117
  %119 = mul nsw i128 %118, %116
  %120 = trunc i128 %119 to i64
  %121 = sext i64 %120 to i128
  %122 = sext i32 %103 to i128
  %123 = and i128 %122, -18446744073709551616
  %124 = and i128 %121, -18446744073709551616
  %125 = zext i64 %104 to i128
  %126 = or i128 %123, %125
  %127 = and i128 %119, 18446744073709551615
  %128 = or i128 %124, %127
  %129 = mul nsw i128 %128, %126
  %130 = trunc i128 %129 to i64
  %131 = shl i64 %130, 3
  %132 = load i64, i64* %12, align 8
  %133 = add i64 %131, %132
  %134 = load i64, i64* %18, align 8
  %135 = add i64 %134, -72
  %136 = inttoptr i64 %135 to i32*
  %137 = load i32, i32* %136
  %138 = sext i32 %137 to i64
  %139 = load i64, i64* %15, align 8
  %140 = mul i64 %139, %138
  %141 = shl i64 %140, 3
  %142 = add i64 %141, %133
  %143 = add i64 %134, -76
  %144 = inttoptr i64 %143 to i32*
  %145 = load i32, i32* %144
  %146 = sext i32 %145 to i64
  %147 = shl nsw i64 %146, 3
  %148 = add i64 %147, %142
  %149 = inttoptr i64 %148 to double*
  %150 = load double, double* %149
  store double %150, double* %395, align 1, !tbaa !1244
  store double 0.000000e+00, double* %422, align 1, !tbaa !1244
  %151 = load i64, i64* %18, align 8
  %152 = add i64 %151, -128
  %153 = load double, double* %410, align 1
  %154 = inttoptr i64 %152 to double*
  store double %153, double* %154
  %155 = bitcast double %150 to <2 x i32>
  %156 = extractelement <2 x i32> %155, i32 0
  store i32 %156, i32* %380, align 1, !tbaa !1492
  %157 = extractelement <2 x i32> %155, i32 1
  store i32 %157, i32* %382, align 1, !tbaa !1492
  store i32 0, i32* %383, align 1, !tbaa !1492
  store i32 0, i32* %385, align 1, !tbaa !1492
  %158 = add i64 %519, 81
  %159 = load i64, i64* %17, align 8, !tbaa !1240
  %160 = add i64 %159, -8
  %161 = inttoptr i64 %160 to i64*
  store i64 %158, i64* %161
  %162 = load i64, i64* %16, align 8, !alias.scope !1730, !noalias !1733
  %163 = load i64, i64* %423, align 8, !alias.scope !1730, !noalias !1733
  %164 = inttoptr i64 %160 to i64*
  %165 = load i64, i64* %164
  store i64 %165, i64* %3, align 8, !alias.scope !1730, !noalias !1733
  store i64 %159, i64* %17, align 8, !alias.scope !1730, !noalias !1733
  %166 = tail call i64 @pow(i64 %162, i64 %163), !noalias !1730
  %167 = load i64, i64* %18, align 8
  %168 = add i64 %167, -128
  %169 = load i64, i64* %3, align 8
  %170 = inttoptr i64 %168 to double*
  %171 = load double, double* %170
  %172 = load double, double* %410, align 1
  %173 = fadd double %171, %172
  store double %173, double* %388, align 1, !tbaa !1244
  store i64 0, i64* %389, align 1, !tbaa !1244
  %174 = add i64 %167, -56
  %175 = inttoptr i64 %174 to double*
  store double %173, double* %175
  %176 = add i64 %167, -48
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %12, align 8, !tbaa !1240
  %179 = add i64 %167, -68
  %180 = inttoptr i64 %179 to i32*
  %181 = load i32, i32* %180
  %182 = sext i32 %181 to i64
  %183 = add i64 %167, -112
  %184 = inttoptr i64 %183 to i64*
  %185 = load i64, i64* %184
  %186 = add i64 %167, -120
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187
  store i64 %188, i64* %15, align 8, !tbaa !1240
  %189 = sext i64 %185 to i128
  %190 = and i128 %189, -18446744073709551616
  %191 = sext i64 %188 to i128
  %192 = and i128 %191, -18446744073709551616
  %193 = zext i64 %185 to i128
  %194 = or i128 %190, %193
  %195 = zext i64 %188 to i128
  %196 = or i128 %192, %195
  %197 = mul nsw i128 %196, %194
  %198 = trunc i128 %197 to i64
  store i64 %198, i64* %14, align 8, !tbaa !1240
  %199 = sext i64 %198 to i128
  %200 = sext i32 %181 to i128
  %201 = and i128 %200, -18446744073709551616
  %202 = and i128 %199, -18446744073709551616
  %203 = zext i64 %182 to i128
  %204 = or i128 %201, %203
  %205 = and i128 %197, 18446744073709551615
  %206 = or i128 %202, %205
  %207 = mul nsw i128 %206, %204
  %208 = trunc i128 %207 to i64
  %209 = shl i64 %208, 3
  %210 = load i64, i64* %12, align 8
  %211 = add i64 %209, %210
  %212 = lshr i64 %211, 63
  %213 = load i64, i64* %18, align 8
  %214 = add i64 %213, -72
  %215 = inttoptr i64 %214 to i32*
  %216 = load i32, i32* %215
  %217 = sext i32 %216 to i64
  %218 = load i64, i64* %15, align 8
  %219 = mul i64 %218, %217
  %220 = shl i64 %219, 3
  %221 = add i64 %220, %211
  %222 = icmp ult i64 %221, %211
  %223 = icmp ult i64 %221, %220
  %224 = or i1 %222, %223
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %29, align 1, !tbaa !1246
  %226 = trunc i64 %221 to i32
  %227 = and i32 %226, 255
  %228 = tail call i32 @llvm.ctpop.i32(i32 %227) #11
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  store i8 %231, i8* %30, align 1, !tbaa !1260
  %232 = xor i64 %220, %211
  %233 = xor i64 %232, %221
  %234 = lshr i64 %233, 4
  %235 = trunc i64 %234 to i8
  %236 = and i8 %235, 1
  store i8 %236, i8* %31, align 1, !tbaa !1261
  %237 = icmp eq i64 %221, 0
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %32, align 1, !tbaa !1262
  %239 = lshr i64 %221, 63
  %240 = trunc i64 %239 to i8
  store i8 %240, i8* %33, align 1, !tbaa !1263
  %241 = lshr i64 %219, 60
  %242 = and i64 %241, 1
  %243 = xor i64 %239, %212
  %244 = xor i64 %239, %242
  %245 = add nuw nsw i64 %243, %244
  %246 = icmp eq i64 %245, 2
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %34, align 1, !tbaa !1264
  %248 = add i64 %213, -76
  %249 = inttoptr i64 %248 to i32*
  %250 = load i32, i32* %249
  %251 = sext i32 %250 to i64
  store i64 %251, i64* %13, align 8, !tbaa !1240
  %252 = shl nsw i64 %251, 3
  %253 = add i64 %252, %221
  %254 = inttoptr i64 %253 to double*
  %255 = load double, double* %254
  %256 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1056) to float*)
  %257 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1060) to float*)
  %258 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1064) to float*)
  %259 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1068) to float*)
  store float %256, float* %424, align 1, !tbaa !1492
  store float %257, float* %426, align 1, !tbaa !1492
  store float %258, float* %427, align 1, !tbaa !1492
  store float %259, float* %429, align 1, !tbaa !1492
  %260 = bitcast double %255 to i64
  %261 = load i64, i64* %430, align 1
  %262 = and i64 %261, %260
  %263 = trunc i64 %262 to i32
  %264 = lshr i64 %262, 32
  %265 = trunc i64 %264 to i32
  store i32 %263, i32* %380, align 1, !tbaa !1481
  store i32 %265, i32* %382, align 1, !tbaa !1481
  %266 = load i64, i64* %18, align 8
  %267 = add i64 %266, -64
  %268 = load double, double* %410, align 1
  %269 = inttoptr i64 %267 to double*
  store double %268, double* %269
  %270 = inttoptr i64 %267 to double*
  %271 = load double, double* %270
  store double %271, double* %410, align 1, !tbaa !1244
  store double 0.000000e+00, double* %420, align 1, !tbaa !1244
  %272 = add i64 %266, -40
  %273 = inttoptr i64 %272 to i64*
  %274 = load i64, i64* %273
  store i64 %274, i64* %12, align 8, !tbaa !1240
  %275 = add i64 %169, 98
  store i64 %275, i64* %3, align 8
  %276 = inttoptr i64 %274 to double*
  %277 = load double, double* %276
  %278 = fcmp uno double %271, %277
  br i1 %278, label %279, label %292

; <label>:279:                                    ; preds = %block_40331f
  %280 = fadd double %271, %277
  %281 = bitcast double %280 to i64
  %282 = and i64 %281, 9221120237041090560
  %283 = icmp eq i64 %282, 9218868437227405312
  %284 = and i64 %281, 2251799813685247
  %285 = icmp ne i64 %284, 0
  %286 = and i1 %283, %285
  br i1 %286, label %287, label %298

; <label>:287:                                    ; preds = %279
  %288 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %275, %struct.Memory* %499) #14
  %289 = load i64, i64* %3, align 8
  %290 = load i8, i8* %29, align 1, !tbaa !1246
  %291 = load i8, i8* %32, align 1, !tbaa !1262
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:292:                                    ; preds = %block_40331f
  %293 = fcmp ogt double %271, %277
  br i1 %293, label %298, label %294

; <label>:294:                                    ; preds = %292
  %295 = fcmp olt double %271, %277
  br i1 %295, label %298, label %296

; <label>:296:                                    ; preds = %294
  %297 = fcmp oeq double %271, %277
  br i1 %297, label %298, label %301

; <label>:298:                                    ; preds = %296, %294, %292, %279
  %299 = phi i8 [ 0, %292 ], [ 0, %294 ], [ 1, %296 ], [ 1, %279 ]
  %300 = phi i8 [ 0, %292 ], [ 1, %294 ], [ 0, %296 ], [ 1, %279 ]
  br label %301

; <label>:301:                                    ; preds = %298, %296
  %302 = phi i8 [ %299, %298 ], [ %238, %296 ]
  %303 = phi i8 [ %300, %298 ], [ %225, %296 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %301, %287
  %304 = phi i8 [ %291, %287 ], [ %302, %301 ]
  %305 = phi i8 [ %290, %287 ], [ %303, %301 ]
  %306 = phi i64 [ %289, %287 ], [ %275, %301 ]
  %307 = phi %struct.Memory* [ %288, %287 ], [ %499, %301 ]
  %308 = or i8 %304, %305
  %309 = icmp ne i8 %308, 0
  %310 = select i1 %309, i64 19, i64 6
  %311 = add i64 %306, %310
  %312 = load i64, i64* %18, align 8
  br i1 %309, label %block_4033e5, label %block_4033d8

block_40341e:                                     ; preds = %block_4032de
  %313 = add i64 %433, -56
  %314 = inttoptr i64 %313 to double*
  %315 = load double, double* %314
  %316 = add i64 %433, -88
  %317 = inttoptr i64 %316 to double*
  %318 = load double, double* %317
  %319 = fdiv double %315, %318
  %320 = add i64 %455, 15
  %321 = load i64, i64* %17, align 8, !tbaa !1240
  %322 = add i64 %321, -8
  %323 = inttoptr i64 %322 to i64*
  store i64 %320, i64* %323
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %325 = bitcast %union.VectorReg* %324 to double*
  %326 = inttoptr i64 %322 to i64*
  %327 = load i64, i64* %326
  %328 = tail call double @sqrt(double %319) #11
  %329 = bitcast %union.VectorReg* %324 to i128*
  store i128 0, i128* %329, align 8, !alias.scope !1735, !noalias !1738
  store double %328, double* %325, align 8, !alias.scope !1735, !noalias !1738
  %330 = add i64 %433, -32
  %331 = inttoptr i64 %330 to i64*
  %332 = load i64, i64* %331
  store i64 %332, i64* %12, align 8, !tbaa !1240
  %333 = inttoptr i64 %332 to double*
  store double %328, double* %333
  %334 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %335 = icmp eq i32 %334, 0
  %336 = select i1 %335, i64 32, i64 22
  %337 = add i64 %327, %336
  br i1 %335, label %block_40344d, label %block_403443

block_40328f:                                     ; preds = %block_403230
  store i64 8, i64* %16, align 8, !tbaa !1240
  %338 = add i64 %93, -9791
  %339 = add i64 %93, 10
  %340 = load i64, i64* %17, align 8, !tbaa !1240
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i64*
  store i64 %339, i64* %342
  store i64 %341, i64* %17, align 8, !tbaa !1240
  %343 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %338, %struct.Memory* %2)
  %344 = load i64, i64* %3, align 8
  %345 = load i64, i64* %18, align 8
  br label %block_403299

block_4033f8:                                     ; preds = %block_40330e
  %346 = add i64 %498, -72
  %347 = inttoptr i64 %346 to i32*
  %348 = load i32, i32* %347
  %349 = add i32 %348, 1
  %350 = inttoptr i64 %346 to i32*
  store i32 %349, i32* %350
  %351 = add i64 %519, -258
  br label %block_4032f6

block_4032f6:                                     ; preds = %block_4032ef, %block_4033f8
  %352 = phi i64 [ %465, %block_4032ef ], [ %351, %block_4033f8 ]
  %353 = phi i64 [ %433, %block_4032ef ], [ %498, %block_4033f8 ]
  %354 = phi %struct.Memory* [ %434, %block_4032ef ], [ %499, %block_4033f8 ]
  %355 = add i64 %353, -72
  %356 = inttoptr i64 %355 to i32*
  %357 = load i32, i32* %356
  %358 = add i64 %353, -16
  %359 = inttoptr i64 %358 to i32*
  %360 = load i32, i32* %359
  %361 = add i32 %360, -1
  %362 = lshr i32 %361, 31
  %363 = sub i32 %357, %361
  %364 = lshr i32 %363, 31
  %365 = trunc i32 %364 to i8
  %366 = lshr i32 %357, 31
  %367 = xor i32 %362, %366
  %368 = xor i32 %364, %366
  %369 = add nuw nsw i32 %368, %367
  %370 = icmp eq i32 %369, 2
  %371 = icmp ne i8 %365, 0
  %372 = xor i1 %371, %370
  %373 = select i1 %372, i64 17, i64 277
  %374 = add i64 %352, %373
  br i1 %372, label %block_403307, label %block_40340b

block_403299:                                     ; preds = %block_40328f, %block_403230
  %375 = phi i64 [ %73, %block_403230 ], [ %345, %block_40328f ]
  %376 = phi i64 [ %93, %block_403230 ], [ %344, %block_40328f ]
  %377 = phi %struct.Memory* [ %2, %block_403230 ], [ %343, %block_40328f ]
  %378 = bitcast [32 x %union.VectorReg]* %21 to i8*
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %380 = bitcast [32 x %union.VectorReg]* %21 to i32*
  store i32 0, i32* %380, align 1, !tbaa !1481
  %381 = getelementptr inbounds i8, i8* %378, i64 4
  %382 = bitcast i8* %381 to i32*
  store i32 0, i32* %382, align 1, !tbaa !1481
  %383 = bitcast i64* %379 to i32*
  store i32 0, i32* %383, align 1, !tbaa !1481
  %384 = getelementptr inbounds i8, i8* %378, i64 12
  %385 = bitcast i8* %384 to i32*
  store i32 0, i32* %385, align 1, !tbaa !1481
  %386 = bitcast %union.VectorReg* %22 to i8*
  %387 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 944) to double*)
  %388 = bitcast %union.VectorReg* %22 to double*
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %390 = bitcast i64* %389 to double*
  %391 = add i64 %375, 16
  %392 = inttoptr i64 %391 to i32*
  %393 = load i32, i32* %392
  %394 = sitofp i32 %393 to double
  %395 = bitcast %union.VectorReg* %23 to double*
  %396 = fmul double %394, %387
  %397 = add i64 %375, 24
  %398 = inttoptr i64 %397 to i32*
  %399 = load i32, i32* %398
  %400 = sitofp i32 %399 to double
  %401 = fmul double %400, %396
  %402 = add i64 %375, 32
  %403 = inttoptr i64 %402 to i32*
  %404 = load i32, i32* %403
  %405 = sitofp i32 %404 to double
  store double %405, double* %395, align 1, !tbaa !1244
  %406 = fmul double %405, %401
  store double %406, double* %388, align 1, !tbaa !1244
  store i64 0, i64* %389, align 1, !tbaa !1244
  %407 = add i64 %375, -88
  %408 = inttoptr i64 %407 to double*
  store double %406, double* %408
  %409 = add i64 %375, -56
  %410 = bitcast [32 x %union.VectorReg]* %21 to double*
  %411 = load double, double* %410, align 1
  %412 = inttoptr i64 %409 to double*
  store double %411, double* %412
  %413 = add i64 %375, -40
  %414 = inttoptr i64 %413 to i64*
  %415 = load i64, i64* %414
  %416 = inttoptr i64 %415 to double*
  store double %411, double* %416
  %417 = add i64 %375, -68
  %418 = add i64 %376, 69
  %419 = inttoptr i64 %417 to i32*
  store i32 1, i32* %419
  %420 = bitcast i64* %379 to double*
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %422 = bitcast i64* %421 to double*
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %424 = bitcast %union.VectorReg* %22 to float*
  %425 = getelementptr inbounds i8, i8* %386, i64 4
  %426 = bitcast i8* %425 to float*
  %427 = bitcast i64* %389 to float*
  %428 = getelementptr inbounds i8, i8* %386, i64 12
  %429 = bitcast i8* %428 to float*
  %430 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %22, i64 0, i32 0, i32 0, i32 0, i64 0
  %431 = load i64, i64* %18, align 8
  br label %block_4032de

block_4032de:                                     ; preds = %block_40340b, %block_403299
  %432 = phi i64 [ %418, %block_403299 ], [ %525, %block_40340b ]
  %433 = phi i64 [ %431, %block_403299 ], [ %353, %block_40340b ]
  %434 = phi %struct.Memory* [ %377, %block_403299 ], [ %354, %block_40340b ]
  %435 = add i64 %433, -68
  %436 = inttoptr i64 %435 to i32*
  %437 = load i32, i32* %436
  %438 = add i64 %433, -20
  %439 = inttoptr i64 %438 to i32*
  %440 = load i32, i32* %439
  %441 = add i32 %440, -1
  %442 = zext i32 %441 to i64
  store i64 %442, i64* %13, align 8, !tbaa !1240
  %443 = lshr i32 %441, 31
  %444 = sub i32 %437, %441
  %445 = lshr i32 %444, 31
  %446 = trunc i32 %445 to i8
  %447 = lshr i32 %437, 31
  %448 = xor i32 %443, %447
  %449 = xor i32 %445, %447
  %450 = add nuw nsw i32 %449, %448
  %451 = icmp eq i32 %450, 2
  %452 = icmp ne i8 %446, 0
  %453 = xor i1 %452, %451
  %454 = select i1 %453, i64 17, i64 320
  %455 = add i64 %432, %454
  br i1 %453, label %block_4032ef, label %block_40341e

block_4033d8:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %456 = add i64 %312, -64
  %457 = inttoptr i64 %456 to double*
  %458 = load double, double* %457
  store double %458, double* %410, align 1, !tbaa !1244
  store double 0.000000e+00, double* %420, align 1, !tbaa !1244
  %459 = add i64 %312, -40
  %460 = inttoptr i64 %459 to i64*
  %461 = load i64, i64* %460
  %462 = add i64 %311, 13
  %463 = inttoptr i64 %461 to double*
  store double %458, double* %463
  br label %block_4033e5

block_4032ef:                                     ; preds = %block_4032de
  %464 = add i64 %433, -72
  %465 = add i64 %455, 7
  %466 = inttoptr i64 %464 to i32*
  store i32 1, i32* %466
  br label %block_4032f6

block_40344d:                                     ; preds = %block_403443, %block_40341e
  %467 = phi i64 [ %321, %block_40341e ], [ %533, %block_403443 ]
  %468 = phi %struct.Memory* [ %434, %block_40341e ], [ %532, %block_403443 ]
  %469 = add i64 %467, 128
  %470 = icmp ugt i64 %467, -129
  %471 = zext i1 %470 to i8
  store i8 %471, i8* %29, align 1, !tbaa !1246
  %472 = trunc i64 %469 to i32
  %473 = and i32 %472, 255
  %474 = tail call i32 @llvm.ctpop.i32(i32 %473) #11
  %475 = trunc i32 %474 to i8
  %476 = and i8 %475, 1
  %477 = xor i8 %476, 1
  store i8 %477, i8* %30, align 1, !tbaa !1260
  %478 = xor i64 %469, %467
  %479 = lshr i64 %478, 4
  %480 = trunc i64 %479 to i8
  %481 = and i8 %480, 1
  store i8 %481, i8* %31, align 1, !tbaa !1261
  %482 = icmp eq i64 %469, 0
  %483 = zext i1 %482 to i8
  store i8 %483, i8* %32, align 1, !tbaa !1262
  %484 = lshr i64 %469, 63
  %485 = trunc i64 %484 to i8
  store i8 %485, i8* %33, align 1, !tbaa !1263
  %486 = lshr i64 %467, 63
  %487 = xor i64 %484, %486
  %488 = add nuw nsw i64 %487, %484
  %489 = icmp eq i64 %488, 2
  %490 = zext i1 %489 to i8
  store i8 %490, i8* %34, align 1, !tbaa !1264
  %491 = add i64 %467, 136
  %492 = inttoptr i64 %469 to i64*
  %493 = load i64, i64* %492
  store i64 %493, i64* %18, align 8, !tbaa !1240
  %494 = inttoptr i64 %491 to i64*
  %495 = load i64, i64* %494
  store i64 %495, i64* %3, align 8, !tbaa !1240
  %496 = add i64 %467, 144
  store i64 %496, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %468

block_40330e:                                     ; preds = %block_4033e5, %block_403307
  %497 = phi i64 [ %527, %block_403307 ], [ %541, %block_4033e5 ]
  %498 = phi i64 [ %353, %block_403307 ], [ %312, %block_4033e5 ]
  %499 = phi %struct.Memory* [ %354, %block_403307 ], [ %535, %block_4033e5 ]
  %500 = add i64 %498, -76
  %501 = inttoptr i64 %500 to i32*
  %502 = load i32, i32* %501
  %503 = add i64 %498, -12
  %504 = inttoptr i64 %503 to i32*
  %505 = load i32, i32* %504
  %506 = add i32 %505, -1
  %507 = lshr i32 %506, 31
  %508 = sub i32 %502, %506
  %509 = lshr i32 %508, 31
  %510 = trunc i32 %509 to i8
  %511 = lshr i32 %502, 31
  %512 = xor i32 %507, %511
  %513 = xor i32 %509, %511
  %514 = add nuw nsw i32 %513, %512
  %515 = icmp eq i32 %514, 2
  %516 = icmp ne i8 %510, 0
  %517 = xor i1 %516, %515
  %518 = select i1 %517, i64 17, i64 234
  %519 = add i64 %497, %518
  br i1 %517, label %block_40331f, label %block_4033f8

block_40340b:                                     ; preds = %block_4032f6
  %520 = add i64 %353, -68
  %521 = inttoptr i64 %520 to i32*
  %522 = load i32, i32* %521
  %523 = add i32 %522, 1
  %524 = inttoptr i64 %520 to i32*
  store i32 %523, i32* %524
  %525 = add i64 %374, -301
  br label %block_4032de

block_403307:                                     ; preds = %block_4032f6
  %526 = add i64 %353, -76
  %527 = add i64 %374, 7
  %528 = inttoptr i64 %526 to i32*
  store i32 1, i32* %528
  br label %block_40330e

block_403443:                                     ; preds = %block_40341e
  store i64 8, i64* %16, align 8, !tbaa !1240
  %529 = add i64 %337, -10147
  %530 = add i64 %337, 10
  %531 = inttoptr i64 %322 to i64*
  store i64 %530, i64* %531
  store i64 %322, i64* %17, align 8, !tbaa !1240
  %532 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %529, %struct.Memory* %434)
  %533 = load i64, i64* %17, align 8
  br label %block_40344d

block_4033e5:                                     ; preds = %block_4033d8, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %534 = phi i64 [ %462, %block_4033d8 ], [ %311, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit ]
  %535 = phi %struct.Memory* [ %307, %block_4033d8 ], [ %307, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit ]
  %536 = add i64 %312, -76
  %537 = inttoptr i64 %536 to i32*
  %538 = load i32, i32* %537
  %539 = add i32 %538, 1
  %540 = inttoptr i64 %536 to i32*
  store i32 %539, i32* %540
  %541 = add i64 %534, -215
  br label %block_40330e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4046c0_psinv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4046c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %26 = load i64, i64* %18, align 8
  %27 = load i64, i64* %17, align 8, !tbaa !1240
  %28 = add i64 %27, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29
  store i64 %28, i64* %18, align 8, !tbaa !1240
  %30 = add i64 %27, -4280
  store i64 %30, i64* %17, align 8, !tbaa !1240
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %37 = add i64 %27, 8
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %12, align 8, !tbaa !1240
  %41 = add i64 %27, -16
  %42 = load i64, i64* %16, align 8
  %43 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %43
  %44 = add i64 %27, -24
  %45 = load i64, i64* %15, align 8
  %46 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %46
  %47 = add i64 %27, -28
  %48 = load i32, i32* %9, align 4
  %49 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %49
  %50 = add i64 %27, -32
  %51 = load i32, i32* %7, align 4
  %52 = inttoptr i64 %50 to i32*
  store i32 %51, i32* %52
  %53 = add i64 %27, -36
  %54 = load i32, i32* %11, align 4
  %55 = inttoptr i64 %53 to i32*
  store i32 %54, i32* %55
  %56 = add i64 %27, -48
  %57 = load i64, i64* %20, align 8
  %58 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %58
  %59 = inttoptr i64 %50 to i32*
  %60 = load i32, i32* %59
  %61 = zext i32 %60 to i64
  %62 = inttoptr i64 %47 to i32*
  %63 = load i32, i32* %62
  %64 = zext i32 %63 to i64
  %65 = inttoptr i64 %41 to i64*
  %66 = load i64, i64* %65
  %67 = add i64 %27, -56
  %68 = inttoptr i64 %67 to i64*
  store i64 %66, i64* %68
  %69 = load i64, i64* %18, align 8
  %70 = add i64 %69, -24
  %71 = inttoptr i64 %70 to i32*
  %72 = load i32, i32* %71
  %73 = zext i32 %72 to i64
  store i64 %73, i64* %20, align 8, !tbaa !1240
  %74 = add i64 %69, -20
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75
  %77 = zext i32 %76 to i64
  store i64 %77, i64* %21, align 8, !tbaa !1240
  %78 = add i64 %69, -16
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %22, align 8, !tbaa !1240
  %81 = add i64 %69, -56
  %82 = inttoptr i64 %81 to i64*
  store i64 %80, i64* %82
  %83 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %84 = icmp eq i32 %83, 0
  %85 = add i64 %69, -4228
  %86 = load i32, i32* %5, align 4
  %87 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %87
  %88 = add i64 %69, -4240
  %89 = inttoptr i64 %88 to i64*
  store i64 %61, i64* %89
  %90 = add i64 %69, -4248
  %91 = inttoptr i64 %90 to i64*
  store i64 %64, i64* %91
  %92 = add i64 %69, -4256
  %93 = inttoptr i64 %92 to i64*
  store i64 %73, i64* %93
  %94 = add i64 %69, -4264
  %95 = inttoptr i64 %94 to i64*
  store i64 %77, i64* %95
  %96 = select i1 %84, i64 132, i64 122
  %97 = add i64 %96, %1
  br i1 %84, label %block_404744, label %block_40473a

block_404bfa:                                     ; preds = %block_404bea
  %98 = add i64 %123, -56
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = add i64 %123, -20
  %102 = inttoptr i64 %101 to i32*
  %103 = load i32, i32* %102
  %104 = zext i32 %103 to i64
  store i64 %104, i64* %15, align 8, !tbaa !1240
  %105 = add i64 %123, -24
  %106 = inttoptr i64 %105 to i32*
  %107 = load i32, i32* %106
  %108 = zext i32 %107 to i64
  store i64 %108, i64* %14, align 8, !tbaa !1240
  %109 = add i64 %123, -28
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110
  %112 = zext i32 %111 to i64
  store i64 %112, i64* %13, align 8, !tbaa !1240
  store i64 %100, i64* %16, align 8, !tbaa !1240
  %113 = add i64 %139, 7894
  %114 = add i64 %139, 21
  %115 = load i64, i64* %17, align 8, !tbaa !1240
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %114, i64* %117
  store i64 %116, i64* %17, align 8, !tbaa !1240
  %118 = tail call %struct.Memory* @sub_406ad0_showall(%struct.State* nonnull %0, i64 %113, %struct.Memory* %120)
  br label %block_404c0f

block_404bea:                                     ; preds = %block_404ba0, %block_404bc7
  %119 = phi i64 [ %405, %block_404ba0 ], [ %211, %block_404bc7 ]
  %120 = phi %struct.Memory* [ %392, %block_404ba0 ], [ %210, %block_404bc7 ]
  %121 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1212) to i32*)
  %122 = zext i32 %121 to i64
  store i64 %122, i64* %12, align 8, !tbaa !1240
  %123 = load i64, i64* %18, align 8
  %124 = add i64 %123, 16
  %125 = inttoptr i64 %124 to i32*
  %126 = load i32, i32* %125
  %127 = sub i32 %121, %126
  %128 = lshr i32 %127, 31
  %129 = trunc i32 %128 to i8
  %130 = lshr i32 %121, 31
  %131 = lshr i32 %126, 31
  %132 = xor i32 %131, %130
  %133 = xor i32 %128, %130
  %134 = add nuw nsw i32 %133, %132
  %135 = icmp eq i32 %134, 2
  %136 = icmp ne i8 %129, 0
  %137 = xor i1 %136, %135
  %138 = select i1 %137, i64 37, i64 16
  %139 = add i64 %119, %138
  br i1 %137, label %block_404c0f, label %block_404bfa

block_404763:                                     ; preds = %block_40475c, %block_404b62
  %140 = phi i64 [ %183, %block_40475c ], [ %163, %block_404b62 ]
  %141 = phi %struct.Memory* [ %165, %block_40475c ], [ %407, %block_404b62 ]
  %142 = inttoptr i64 %224 to i32*
  %143 = load i32, i32* %142
  %144 = inttoptr i64 %225 to i32*
  %145 = load i32, i32* %144
  %146 = add i32 %145, -1
  %147 = sub i32 %143, %146
  %148 = lshr i32 %147, 31
  %149 = lshr i32 %143, 31
  %150 = lshr i32 %146, 31
  %151 = xor i32 %150, %149
  %152 = xor i32 %148, %149
  %153 = add nuw nsw i32 %152, %151
  %154 = icmp eq i32 %153, 2
  %155 = icmp ne i32 %148, 0
  %156 = xor i1 %155, %154
  %157 = select i1 %156, i64 17, i64 1042
  %158 = add i64 %140, %157
  br i1 %156, label %block_404774, label %block_404b75

block_404b62:                                     ; preds = %block_4049a9
  %159 = inttoptr i64 %224 to i32*
  %160 = load i32, i32* %159
  %161 = add i32 %160, 1
  %162 = inttoptr i64 %224 to i32*
  store i32 %161, i32* %162
  %163 = add i64 %424, -1023
  br label %block_404763

block_40474b:                                     ; preds = %block_404744, %block_404b75
  %164 = phi i64 [ %221, %block_404744 ], [ %216, %block_404b75 ]
  %165 = phi %struct.Memory* [ %219, %block_404744 ], [ %141, %block_404b75 ]
  %166 = inttoptr i64 %220 to i32*
  %167 = load i32, i32* %166
  %168 = inttoptr i64 %223 to i32*
  %169 = load i32, i32* %168
  %170 = add i32 %169, -1
  %171 = sub i32 %167, %170
  %172 = lshr i32 %171, 31
  %173 = lshr i32 %167, 31
  %174 = lshr i32 %170, 31
  %175 = xor i32 %174, %173
  %176 = xor i32 %172, %173
  %177 = add nuw nsw i32 %176, %175
  %178 = icmp eq i32 %177, 2
  %179 = icmp ne i32 %172, 0
  %180 = xor i1 %179, %178
  %181 = select i1 %180, i64 17, i64 1085
  %182 = add i64 %164, %181
  br i1 %180, label %block_40475c, label %block_404b88

block_40475c:                                     ; preds = %block_40474b
  %183 = add i64 %182, 7
  %184 = inttoptr i64 %224 to i32*
  store i32 1, i32* %184
  br label %block_404763

block_404bc7:                                     ; preds = %block_404ba0
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1999), i64* %19, align 8, !tbaa !1240
  %185 = load i64, i64* %18, align 8
  %186 = add i64 %185, -56
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187
  %189 = add i64 %185, -20
  %190 = inttoptr i64 %189 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %15, align 8, !tbaa !1240
  %193 = add i64 %185, -24
  %194 = inttoptr i64 %193 to i32*
  %195 = load i32, i32* %194
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %14, align 8, !tbaa !1240
  %197 = add i64 %185, -28
  %198 = inttoptr i64 %197 to i32*
  %199 = load i32, i32* %198
  %200 = zext i32 %199 to i64
  store i64 %200, i64* %13, align 8, !tbaa !1240
  %201 = add i64 %185, 16
  %202 = inttoptr i64 %201 to i32*
  %203 = load i32, i32* %202
  %204 = zext i32 %203 to i64
  store i64 %204, i64* %20, align 8, !tbaa !1240
  store i64 %188, i64* %16, align 8, !tbaa !1240
  %205 = add i64 %405, 7769
  %206 = add i64 %405, 35
  %207 = load i64, i64* %17, align 8, !tbaa !1240
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %206, i64* %209
  store i64 %208, i64* %17, align 8, !tbaa !1240
  %210 = tail call %struct.Memory* @sub_406a20_rep_nrm(%struct.State* nonnull %0, i64 %205, %struct.Memory* %392)
  %211 = load i64, i64* %3, align 8
  br label %block_404bea

block_404b75:                                     ; preds = %block_404763
  %212 = inttoptr i64 %220 to i32*
  %213 = load i32, i32* %212
  %214 = add i32 %213, 1
  %215 = inttoptr i64 %220 to i32*
  store i32 %214, i32* %215
  %216 = add i64 %158, -1066
  br label %block_40474b

block_404744:                                     ; preds = %block_40473a, %block_4046c0
  %217 = phi i64 [ %97, %block_4046c0 ], [ %441, %block_40473a ]
  %218 = phi i64 [ %69, %block_4046c0 ], [ %440, %block_40473a ]
  %219 = phi %struct.Memory* [ %2, %block_4046c0 ], [ %439, %block_40473a ]
  %220 = add i64 %218, -60
  %221 = add i64 %217, 7
  %222 = inttoptr i64 %220 to i32*
  store i32 1, i32* %222
  %223 = add i64 %218, -28
  %224 = add i64 %218, -64
  %225 = add i64 %218, -24
  %226 = add i64 %218, -68
  %227 = add i64 %218, -20
  %228 = add i64 %218, -48
  %229 = add i64 %218, -4240
  %230 = add i64 %218, -4248
  %231 = bitcast [32 x %union.VectorReg]* %23 to double*
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %233 = add i64 %218, -2144
  %234 = add i64 %218, -4224
  %235 = add i64 %218, -56
  %236 = add i64 %218, -4256
  %237 = add i64 %218, -4264
  %238 = add i64 %218, -40
  %239 = bitcast %union.VectorReg* %24 to double*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %241 = bitcast %union.VectorReg* %25 to double*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  br label %block_40474b

block_4049ba:                                     ; preds = %block_4049a9
  %243 = inttoptr i64 %235 to i64*
  %244 = load i64, i64* %243
  %245 = inttoptr i64 %220 to i32*
  %246 = load i32, i32* %245
  %247 = sext i32 %246 to i64
  %248 = inttoptr i64 %236 to i64*
  %249 = load i64, i64* %248
  %250 = inttoptr i64 %237 to i64*
  %251 = load i64, i64* %250
  store i64 %251, i64* %15, align 8, !tbaa !1240
  %252 = mul i64 %251, %249
  %253 = mul i64 %252, %247
  %254 = shl i64 %253, 3
  %255 = add i64 %254, %244
  %256 = inttoptr i64 %224 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = mul i64 %251, %258
  %260 = shl i64 %259, 3
  %261 = add i64 %260, %255
  %262 = sext i32 %409 to i64
  %263 = shl nsw i64 %262, 3
  %264 = add i64 %263, %261
  %265 = inttoptr i64 %264 to double*
  %266 = load double, double* %265
  %267 = inttoptr i64 %238 to i64*
  %268 = load i64, i64* %267
  %269 = inttoptr i64 %268 to double*
  %270 = load double, double* %269
  %271 = inttoptr i64 %228 to i64*
  %272 = load i64, i64* %271
  %273 = inttoptr i64 %229 to i64*
  %274 = load i64, i64* %273
  %275 = inttoptr i64 %230 to i64*
  %276 = load i64, i64* %275
  %277 = mul i64 %276, %274
  %278 = mul i64 %277, %247
  %279 = shl i64 %278, 3
  %280 = add i64 %279, %272
  %281 = mul i64 %276, %258
  %282 = shl i64 %281, 3
  %283 = add i64 %282, %280
  %284 = add i64 %263, %283
  %285 = inttoptr i64 %284 to double*
  %286 = load double, double* %285
  %287 = fmul double %270, %286
  %288 = fadd double %266, %287
  %289 = add i64 %268, 8
  %290 = inttoptr i64 %289 to double*
  %291 = load double, double* %290
  %292 = add i32 %409, -1
  %293 = sext i32 %292 to i64
  %294 = shl nsw i64 %293, 3
  %295 = add i64 %283, %294
  %296 = inttoptr i64 %295 to double*
  %297 = load double, double* %296
  %298 = add i32 %409, 1
  %299 = zext i32 %298 to i64
  %300 = sext i32 %298 to i64
  %301 = shl nsw i64 %300, 3
  %302 = add i64 %283, %301
  %303 = inttoptr i64 %302 to double*
  %304 = load double, double* %303
  %305 = fadd double %297, %304
  %306 = add i64 %233, %263
  %307 = inttoptr i64 %306 to double*
  %308 = load double, double* %307
  %309 = fadd double %305, %308
  %310 = fmul double %291, %309
  %311 = fadd double %288, %310
  %312 = add i64 %268, 16
  %313 = inttoptr i64 %312 to double*
  %314 = load double, double* %313
  %315 = add i64 %234, %263
  %316 = inttoptr i64 %315 to double*
  %317 = load double, double* %316
  %318 = add nsw i64 %294, -2144
  %319 = add i64 %318, %218
  %320 = inttoptr i64 %319 to double*
  %321 = load double, double* %320
  %322 = fadd double %317, %321
  store i64 %299, i64* %19, align 8, !tbaa !1240
  %323 = add nsw i64 %301, -2144
  %324 = add i64 %323, %218
  %325 = inttoptr i64 %324 to double*
  %326 = load double, double* %325
  %327 = fadd double %322, %326
  store double %327, double* %241, align 1, !tbaa !1244
  store i64 0, i64* %242, align 1, !tbaa !1244
  %328 = fmul double %314, %327
  store double %328, double* %239, align 1, !tbaa !1244
  store i64 0, i64* %240, align 1, !tbaa !1244
  %329 = fadd double %311, %328
  store double %329, double* %231, align 1, !tbaa !1244
  store i64 0, i64* %232, align 1, !tbaa !1244
  %330 = load i64, i64* %15, align 8
  %331 = mul i64 %330, %249
  store i64 %331, i64* %14, align 8, !tbaa !1240
  %332 = mul i64 %331, %247
  %333 = shl i64 %332, 3
  %334 = add i64 %333, %244
  %335 = mul i64 %330, %258
  %336 = shl i64 %335, 3
  %337 = add i64 %336, %334
  %338 = add i64 %263, %337
  %339 = inttoptr i64 %338 to double*
  store double %329, double* %339
  %340 = inttoptr i64 %226 to i32*
  %341 = load i32, i32* %340
  %342 = add i32 %341, 1
  %343 = inttoptr i64 %226 to i32*
  store i32 %342, i32* %343
  %344 = add i64 %424, -17
  br label %block_4049a9

block_40477b:                                     ; preds = %block_404787, %block_404774
  %345 = phi i64 [ %432, %block_404774 ], [ %593, %block_404787 ]
  %346 = phi %struct.Memory* [ %141, %block_404774 ], [ %346, %block_404787 ]
  %347 = inttoptr i64 %226 to i32*
  %348 = load i32, i32* %347
  %349 = inttoptr i64 %227 to i32*
  %350 = load i32, i32* %349
  %351 = sub i32 %348, %350
  %352 = lshr i32 %351, 31
  %353 = lshr i32 %348, 31
  %354 = lshr i32 %350, 31
  %355 = xor i32 %354, %353
  %356 = xor i32 %352, %353
  %357 = add nuw nsw i32 %356, %355
  %358 = icmp eq i32 %357, 2
  %359 = icmp ne i32 %352, 0
  %360 = xor i1 %359, %358
  %361 = select i1 %360, i64 12, i64 551
  %362 = add i64 %345, %361
  br i1 %360, label %block_404787, label %block_4049a2

block_4049a2:                                     ; preds = %block_40477b
  %363 = add i64 %362, 7
  %364 = inttoptr i64 %226 to i32*
  store i32 1, i32* %364
  br label %block_4049a9

block_404ba0:                                     ; preds = %block_404b88, %block_404b96
  %365 = phi i64 [ %445, %block_404b88 ], [ %431, %block_404b96 ]
  %366 = phi %struct.Memory* [ %165, %block_404b88 ], [ %430, %block_404b96 ]
  %367 = load i64, i64* %18, align 8
  %368 = add i64 %367, -56
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = add i64 %367, -20
  %372 = inttoptr i64 %371 to i32*
  %373 = load i32, i32* %372
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %15, align 8, !tbaa !1240
  %375 = add i64 %367, -24
  %376 = inttoptr i64 %375 to i32*
  %377 = load i32, i32* %376
  %378 = zext i32 %377 to i64
  store i64 %378, i64* %14, align 8, !tbaa !1240
  %379 = add i64 %367, -28
  %380 = inttoptr i64 %379 to i32*
  %381 = load i32, i32* %380
  %382 = zext i32 %381 to i64
  store i64 %382, i64* %13, align 8, !tbaa !1240
  %383 = add i64 %367, 16
  %384 = inttoptr i64 %383 to i32*
  %385 = load i32, i32* %384
  %386 = zext i32 %385 to i64
  store i64 %386, i64* %19, align 8, !tbaa !1240
  store i64 %370, i64* %16, align 8, !tbaa !1240
  %387 = add i64 %365, 6848
  %388 = add i64 %365, 25
  %389 = load i64, i64* %17, align 8, !tbaa !1240
  %390 = add i64 %389, -8
  %391 = inttoptr i64 %390 to i64*
  store i64 %388, i64* %391
  store i64 %390, i64* %17, align 8, !tbaa !1240
  %392 = tail call %struct.Memory* @sub_406660_comm3(%struct.State* nonnull %0, i64 %387, %struct.Memory* %366)
  %393 = load i64, i64* %3, align 8
  %394 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1200) to i32*)
  %395 = add i32 %394, -1
  %396 = lshr i32 %395, 31
  %397 = trunc i32 %396 to i8
  %398 = lshr i32 %394, 31
  %399 = xor i32 %396, %398
  %400 = add nuw nsw i32 %399, %398
  %401 = icmp eq i32 %400, 2
  %402 = icmp ne i8 %397, 0
  %403 = xor i1 %402, %401
  %404 = select i1 %403, i64 49, i64 14
  %405 = add i64 %393, %404
  br i1 %403, label %block_404bea, label %block_404bc7

block_4049a9:                                     ; preds = %block_4049a2, %block_4049ba
  %406 = phi i64 [ %363, %block_4049a2 ], [ %344, %block_4049ba ]
  %407 = phi %struct.Memory* [ %346, %block_4049a2 ], [ %407, %block_4049ba ]
  %408 = inttoptr i64 %226 to i32*
  %409 = load i32, i32* %408
  %410 = inttoptr i64 %227 to i32*
  %411 = load i32, i32* %410
  %412 = add i32 %411, -1
  %413 = sub i32 %409, %412
  %414 = lshr i32 %413, 31
  %415 = lshr i32 %409, 31
  %416 = lshr i32 %412, 31
  %417 = xor i32 %416, %415
  %418 = xor i32 %414, %415
  %419 = add nuw nsw i32 %418, %417
  %420 = icmp eq i32 %419, 2
  %421 = icmp ne i32 %414, 0
  %422 = xor i1 %421, %420
  %423 = select i1 %422, i64 17, i64 441
  %424 = add i64 %406, %423
  br i1 %422, label %block_4049ba, label %block_404b62

block_404b96:                                     ; preds = %block_404b88
  store i64 3, i64* %16, align 8, !tbaa !1240
  %425 = add i64 %445, -16118
  %426 = add i64 %445, 10
  %427 = load i64, i64* %17, align 8, !tbaa !1240
  %428 = add i64 %427, -8
  %429 = inttoptr i64 %428 to i64*
  store i64 %426, i64* %429
  store i64 %428, i64* %17, align 8, !tbaa !1240
  %430 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %425, %struct.Memory* %165)
  %431 = load i64, i64* %3, align 8
  br label %block_404ba0

block_404774:                                     ; preds = %block_404763
  %432 = add i64 %158, 7
  %433 = inttoptr i64 %226 to i32*
  store i32 0, i32* %433
  br label %block_40477b

block_40473a:                                     ; preds = %block_4046c0
  store i64 3, i64* %16, align 8, !tbaa !1240
  %434 = add i64 %97, -15082
  %435 = add i64 %97, 10
  %436 = load i64, i64* %17, align 8, !tbaa !1240
  %437 = add i64 %436, -8
  %438 = inttoptr i64 %437 to i64*
  store i64 %435, i64* %438
  store i64 %437, i64* %17, align 8, !tbaa !1240
  %439 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %434, %struct.Memory* %2)
  %440 = load i64, i64* %18, align 8
  %441 = load i64, i64* %3, align 8
  br label %block_404744

block_404b88:                                     ; preds = %block_40474b
  %442 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %443 = icmp eq i32 %442, 0
  %444 = select i1 %443, i64 24, i64 14
  %445 = add i64 %182, %444
  br i1 %443, label %block_404ba0, label %block_404b96

block_404c0f:                                     ; preds = %block_404bea, %block_404bfa
  %446 = phi %struct.Memory* [ %120, %block_404bea ], [ %118, %block_404bfa ]
  %447 = load i64, i64* %17, align 8
  %448 = add i64 %447, 4272
  %449 = icmp ugt i64 %447, -4273
  %450 = zext i1 %449 to i8
  store i8 %450, i8* %31, align 1, !tbaa !1246
  %451 = trunc i64 %448 to i32
  %452 = and i32 %451, 255
  %453 = tail call i32 @llvm.ctpop.i32(i32 %452) #11
  %454 = trunc i32 %453 to i8
  %455 = and i8 %454, 1
  %456 = xor i8 %455, 1
  store i8 %456, i8* %32, align 1, !tbaa !1260
  %457 = xor i64 %447, 16
  %458 = xor i64 %457, %448
  %459 = lshr i64 %458, 4
  %460 = trunc i64 %459 to i8
  %461 = and i8 %460, 1
  store i8 %461, i8* %33, align 1, !tbaa !1261
  %462 = icmp eq i64 %448, 0
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %34, align 1, !tbaa !1262
  %464 = lshr i64 %448, 63
  %465 = trunc i64 %464 to i8
  store i8 %465, i8* %35, align 1, !tbaa !1263
  %466 = lshr i64 %447, 63
  %467 = xor i64 %464, %466
  %468 = add nuw nsw i64 %467, %464
  %469 = icmp eq i64 %468, 2
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %36, align 1, !tbaa !1264
  %471 = add i64 %447, 4280
  %472 = inttoptr i64 %448 to i64*
  %473 = load i64, i64* %472
  store i64 %473, i64* %18, align 8, !tbaa !1240
  %474 = inttoptr i64 %471 to i64*
  %475 = load i64, i64* %474
  store i64 %475, i64* %3, align 8, !tbaa !1240
  %476 = add i64 %447, 4288
  store i64 %476, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %446

block_404787:                                     ; preds = %block_40477b
  %477 = inttoptr i64 %228 to i64*
  %478 = load i64, i64* %477
  %479 = inttoptr i64 %220 to i32*
  %480 = load i32, i32* %479
  %481 = sext i32 %480 to i64
  %482 = inttoptr i64 %229 to i64*
  %483 = load i64, i64* %482
  %484 = inttoptr i64 %230 to i64*
  %485 = load i64, i64* %484
  store i64 %485, i64* %15, align 8, !tbaa !1240
  %486 = mul i64 %485, %483
  %487 = mul i64 %486, %481
  %488 = shl i64 %487, 3
  %489 = add i64 %488, %478
  %490 = inttoptr i64 %224 to i32*
  %491 = load i32, i32* %490
  %492 = add i32 %491, -1
  %493 = sext i32 %492 to i64
  %494 = mul i64 %485, %493
  %495 = shl i64 %494, 3
  %496 = add i64 %495, %489
  %497 = sext i32 %348 to i64
  %498 = shl nsw i64 %497, 3
  %499 = add i64 %498, %496
  %500 = inttoptr i64 %499 to double*
  %501 = load double, double* %500
  %502 = add i32 %491, 1
  %503 = sext i32 %502 to i64
  %504 = mul i64 %485, %503
  %505 = shl i64 %504, 3
  %506 = add i64 %505, %489
  %507 = add i64 %498, %506
  %508 = inttoptr i64 %507 to double*
  %509 = load double, double* %508
  %510 = fadd double %501, %509
  %511 = add i32 %480, -1
  %512 = sext i32 %511 to i64
  %513 = mul i64 %486, %512
  %514 = shl i64 %513, 3
  %515 = add i64 %514, %478
  %516 = sext i32 %491 to i64
  %517 = mul i64 %485, %516
  %518 = shl i64 %517, 3
  %519 = add i64 %518, %515
  %520 = add i64 %498, %519
  %521 = inttoptr i64 %520 to double*
  %522 = load double, double* %521
  %523 = fadd double %510, %522
  %524 = add i32 %480, 1
  %525 = sext i32 %524 to i64
  %526 = mul i64 %486, %525
  %527 = shl i64 %526, 3
  %528 = add i64 %527, %478
  %529 = add i64 %518, %528
  %530 = add i64 %498, %529
  %531 = inttoptr i64 %530 to double*
  %532 = load double, double* %531
  %533 = fadd double %523, %532
  %534 = add i64 %233, %498
  %535 = inttoptr i64 %534 to double*
  store double %533, double* %535
  %536 = inttoptr i64 %228 to i64*
  %537 = load i64, i64* %536
  %538 = inttoptr i64 %220 to i32*
  %539 = load i32, i32* %538
  %540 = add i32 %539, -1
  %541 = sext i32 %540 to i64
  %542 = inttoptr i64 %229 to i64*
  %543 = load i64, i64* %542
  %544 = load i64, i64* %15, align 8
  %545 = mul i64 %544, %543
  %546 = mul i64 %545, %541
  %547 = shl i64 %546, 3
  %548 = add i64 %547, %537
  %549 = inttoptr i64 %224 to i32*
  %550 = load i32, i32* %549
  %551 = add i32 %550, -1
  %552 = sext i32 %551 to i64
  %553 = mul i64 %544, %552
  %554 = shl i64 %553, 3
  %555 = add i64 %554, %548
  %556 = inttoptr i64 %226 to i32*
  %557 = load i32, i32* %556
  %558 = sext i32 %557 to i64
  %559 = shl nsw i64 %558, 3
  %560 = add i64 %559, %555
  %561 = inttoptr i64 %560 to double*
  %562 = load double, double* %561
  %563 = add i32 %550, 1
  %564 = sext i32 %563 to i64
  %565 = mul i64 %544, %564
  %566 = shl i64 %565, 3
  %567 = add i64 %566, %548
  %568 = add i64 %559, %567
  %569 = inttoptr i64 %568 to double*
  %570 = load double, double* %569
  %571 = fadd double %562, %570
  %572 = add i32 %539, 1
  %573 = sext i32 %572 to i64
  %574 = mul i64 %545, %573
  %575 = shl i64 %574, 3
  %576 = add i64 %575, %537
  %577 = add i64 %554, %576
  %578 = add i64 %559, %577
  %579 = inttoptr i64 %578 to double*
  %580 = load double, double* %579
  %581 = fadd double %571, %580
  store i64 %545, i64* %14, align 8, !tbaa !1240
  %582 = add i64 %566, %576
  %583 = add i64 %559, %582
  %584 = inttoptr i64 %583 to double*
  %585 = load double, double* %584
  %586 = fadd double %581, %585
  store double %586, double* %231, align 1, !tbaa !1244
  store i64 0, i64* %232, align 1, !tbaa !1244
  %587 = add i64 %234, %559
  %588 = inttoptr i64 %587 to double*
  store double %586, double* %588
  %589 = inttoptr i64 %226 to i32*
  %590 = load i32, i32* %589
  %591 = add i32 %590, 1
  %592 = inttoptr i64 %226 to i32*
  store i32 %591, i32* %592
  %593 = add i64 %362, -12
  br label %block_40477b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_407900___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_407900:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %12, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  %22 = load i64, i64* %16, align 8
  %23 = add i64 %19, -16
  %24 = inttoptr i64 %23 to i64*
  store i64 %22, i64* %24
  %25 = load i64, i64* %9, align 8
  store i64 %25, i64* %17, align 8, !tbaa !1240
  %26 = load i64, i64* %15, align 8
  %27 = add i64 %19, -24
  %28 = inttoptr i64 %27 to i64*
  store i64 %26, i64* %28
  %29 = load i64, i64* %14, align 8
  %30 = add i64 %19, -32
  %31 = inttoptr i64 %30 to i64*
  store i64 %29, i64* %31
  store i64 ptrtoint (%seg_608e00__init_array_type* @seg_608e00__init_array to i64), i64* %14, align 8, !tbaa !1240
  %32 = load i64, i64* %13, align 8
  %33 = add i64 %19, -40
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %8, align 8
  %36 = add i64 %19, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = load i32, i32* %5, align 4
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %15, align 8, !tbaa !1240
  %40 = load i64, i64* %10, align 8
  store i64 %40, i64* %16, align 8, !tbaa !1240
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ashr (i64 sub (i64 add (i64 ptrtoint (%seg_608e00__init_array_type* @seg_608e00__init_array to i64), i64 8), i64 ptrtoint (%seg_608e00__init_array_type* @seg_608e00__init_array to i64)), i64 3), i64* %13, align 8, !tbaa !1240
  %47 = add i64 %1, -29280
  %48 = add i64 %1, 49
  %49 = add i64 %19, -64
  %50 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %50
  store i64 %49, i64* %12, align 8, !tbaa !1240
  %51 = tail call %struct.Memory* @sub_4006a0__init_proc(%struct.State* nonnull %0, i64 %47, %struct.Memory* %2)
  %52 = load i64, i64* %13, align 8
  %53 = load i64, i64* %3, align 8
  %54 = icmp eq i64 %52, 0
  %55 = select i1 %54, i64 37, i64 5
  %56 = add i64 %53, %55
  br i1 %54, label %block_407956, label %block_407936

block_407956.loopexit:                            ; preds = %block_407940
  br label %block_407956

block_407956:                                     ; preds = %block_407956.loopexit, %block_407900
  %57 = phi %struct.Memory* [ %51, %block_407900 ], [ %119, %block_407956.loopexit ]
  %58 = load i64, i64* %12, align 8
  %59 = add i64 %58, 8
  %60 = icmp ugt i64 %58, -9
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %41, align 1, !tbaa !1246
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %42, align 1, !tbaa !1260
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %43, align 1, !tbaa !1261
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %44, align 1, !tbaa !1262
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %45, align 1, !tbaa !1263
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %46, align 1, !tbaa !1264
  %81 = add i64 %58, 16
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = add i64 %58, 24
  %85 = inttoptr i64 %81 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %13, align 8, !tbaa !1240
  %87 = add i64 %58, 32
  %88 = inttoptr i64 %84 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %14, align 8, !tbaa !1240
  %90 = add i64 %58, 40
  %91 = inttoptr i64 %87 to i64*
  %92 = load i64, i64* %91
  store i64 %92, i64* %15, align 8, !tbaa !1240
  %93 = add i64 %58, 48
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %16, align 8, !tbaa !1240
  %96 = add i64 %58, 56
  %97 = inttoptr i64 %93 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %17, align 8, !tbaa !1240
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %3, align 8, !tbaa !1240
  %101 = add i64 %58, 64
  store i64 %101, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %57

block_407936:                                     ; preds = %block_407900
  store i64 0, i64* %8, align 8, !tbaa !1240
  store i8 0, i8* %41, align 1, !tbaa !1246
  store i8 1, i8* %42, align 1, !tbaa !1260
  store i8 1, i8* %44, align 1, !tbaa !1262
  store i8 0, i8* %45, align 1, !tbaa !1263
  store i8 0, i8* %46, align 1, !tbaa !1264
  store i8 0, i8* %43, align 1, !tbaa !1261
  %102 = add i64 %56, 10
  br label %block_407940

block_407940:                                     ; preds = %block_407940, %block_407936
  %103 = phi i64 [ 0, %block_407936 ], [ %122, %block_407940 ]
  %104 = phi i64 [ %102, %block_407936 ], [ %150, %block_407940 ]
  %105 = phi %struct.Memory* [ %51, %block_407936 ], [ %119, %block_407940 ]
  %106 = load i64, i64* %17, align 8
  store i64 %106, i64* %9, align 8, !tbaa !1240
  %107 = load i64, i64* %16, align 8
  store i64 %107, i64* %10, align 8, !tbaa !1240
  %108 = load i32, i32* %7, align 4
  %109 = zext i32 %108 to i64
  store i64 %109, i64* %11, align 8, !tbaa !1240
  %110 = load i64, i64* %14, align 8
  %111 = shl i64 %103, 3
  %112 = add i64 %111, %110
  %113 = add i64 %104, 13
  %114 = load i64, i64* %12, align 8, !tbaa !1240
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  store i64 %113, i64* %116
  store i64 %115, i64* %12, align 8, !tbaa !1240
  %117 = inttoptr i64 %112 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %3, align 8, !tbaa !1240
  %119 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %118, %struct.Memory* %105)
  %120 = load i64, i64* %8, align 8
  %121 = load i64, i64* %3, align 8
  %122 = add i64 %120, 1
  store i64 %122, i64* %8, align 8, !tbaa !1240
  %123 = lshr i64 %122, 63
  %124 = load i64, i64* %13, align 8
  %125 = sub i64 %124, %122
  %126 = icmp ult i64 %124, %122
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %41, align 1, !tbaa !1246
  %128 = trunc i64 %125 to i32
  %129 = and i32 %128, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #11
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %42, align 1, !tbaa !1260
  %134 = xor i64 %122, %124
  %135 = xor i64 %134, %125
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %43, align 1, !tbaa !1261
  %139 = icmp eq i64 %125, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %44, align 1, !tbaa !1262
  %141 = lshr i64 %125, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %45, align 1, !tbaa !1263
  %143 = lshr i64 %124, 63
  %144 = xor i64 %123, %143
  %145 = xor i64 %141, %143
  %146 = add nuw nsw i64 %145, %144
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %46, align 1, !tbaa !1264
  %149 = select i1 %139, i64 9, i64 -13
  %150 = add i64 %121, %149
  br i1 %139, label %block_407956.loopexit, label %block_407940
}

; Function Attrs: noinline
define %struct.Memory* @sub_402190_init_arrays(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_402190:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8, !tbaa !1240
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  store i64 %11, i64* %8, align 8, !tbaa !1240
  %13 = add i64 %10, -24
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %1, 20
  %21 = add i64 %10, -32
  %22 = inttoptr i64 %21 to i64*
  store i64 %20, i64* %22
  %23 = inttoptr i64 %21 to i64*
  %24 = load i64, i64* %23
  store i64 %13, i64* %7, align 8, !alias.scope !1740, !noalias !1743
  %25 = tail call i64 @malloc(i64 157635904)
  store i64 %25, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  %26 = add i64 %24, 20
  %27 = load i64, i64* %7, align 8, !tbaa !1240
  %28 = add i64 %27, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29
  %30 = inttoptr i64 %28 to i64*
  %31 = load i64, i64* %30
  store i64 %27, i64* %7, align 8, !alias.scope !1745, !noalias !1748
  %32 = tail call i64 @malloc(i64 157635904)
  store i64 157635904, i64* %5, align 8, !tbaa !1240
  store i64 157635904, i64* %6, align 8, !tbaa !1240
  store i64 %32, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  %33 = add i64 %31, 20
  %34 = load i64, i64* %7, align 8, !tbaa !1240
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %33, i64* %36
  store i64 %34, i64* %7, align 8, !alias.scope !1750, !noalias !1753
  %37 = tail call i64 @malloc(i64 157635904)
  store i64 %37, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  %38 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1240) to i64*)
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %block_402201, label %block_4021e3

block_4021f2:                                     ; preds = %block_4021e3
  %40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1256) to i64*)
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %block_402201, label %block_40220d

block_402214:                                     ; preds = %block_402201, %block_40220d
  %42 = phi i64 [ %83, %block_402201 ], [ %78, %block_40220d ]
  %43 = phi %struct.Memory* [ %2, %block_402201 ], [ %2, %block_40220d ]
  %44 = add i64 %42, -4
  %45 = inttoptr i64 %44 to i32*
  %46 = load i32, i32* %45
  %47 = zext i32 %46 to i64
  store i64 %47, i64* %4, align 8, !tbaa !1240
  %48 = load i64, i64* %7, align 8
  %49 = add i64 %48, 16
  %50 = icmp ugt i64 %48, -17
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %14, align 1, !tbaa !1246
  %52 = trunc i64 %49 to i32
  %53 = and i32 %52, 255
  %54 = tail call i32 @llvm.ctpop.i32(i32 %53) #11
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  store i8 %57, i8* %15, align 1, !tbaa !1260
  %58 = xor i64 %48, 16
  %59 = xor i64 %58, %49
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  store i8 %62, i8* %16, align 1, !tbaa !1261
  %63 = icmp eq i64 %49, 0
  %64 = zext i1 %63 to i8
  store i8 %64, i8* %17, align 1, !tbaa !1262
  %65 = lshr i64 %49, 63
  %66 = trunc i64 %65 to i8
  store i8 %66, i8* %18, align 1, !tbaa !1263
  %67 = lshr i64 %48, 63
  %68 = xor i64 %65, %67
  %69 = add nuw nsw i64 %68, %65
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %19, align 1, !tbaa !1264
  %72 = add i64 %48, 24
  %73 = inttoptr i64 %49 to i64*
  %74 = load i64, i64* %73
  store i64 %74, i64* %8, align 8, !tbaa !1240
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75
  store i64 %76, i64* %3, align 8, !tbaa !1240
  %77 = add i64 %48, 32
  store i64 %77, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %43

block_40220d:                                     ; preds = %block_4021f2
  %78 = load i64, i64* %8, align 8
  %79 = add i64 %78, -4
  %80 = inttoptr i64 %79 to i32*
  store i32 0, i32* %80
  br label %block_402214

block_4021e3:                                     ; preds = %block_402190
  %81 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1248) to i64*)
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %block_402201, label %block_4021f2

block_402201:                                     ; preds = %block_4021e3, %block_4021f2, %block_402190
  %83 = load i64, i64* %8, align 8
  %84 = add i64 %83, -4
  %85 = inttoptr i64 %84 to i32*
  store i32 -1, i32* %85
  br label %block_402214
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ca0_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400ca0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, -32
  %24 = add i64 %1, 16
  %25 = add i64 %11, -48
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_400c80_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -24
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %29 to double*
  %34 = load double, double* %33
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %36 = add i64 %28, -4
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37
  %39 = sext i32 %38 to i64
  %40 = shl nsw i64 %39, 3
  %41 = add i64 %40, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 528)
  %42 = inttoptr i64 %41 to double*
  %43 = load double, double* %42
  %44 = fsub double %34, %43
  %45 = add i64 %28, -16
  %46 = inttoptr i64 %45 to double*
  store double %44, double* %46
  %47 = inttoptr i64 %45 to double*
  %48 = load double, double* %47
  %49 = inttoptr i64 %36 to i32*
  %50 = load i32, i32* %49
  %51 = sext i32 %50 to i64
  store i64 %51, i64* %6, align 8, !tbaa !1240
  %52 = shl nsw i64 %51, 3
  %53 = add i64 %52, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 16)
  %54 = inttoptr i64 %53 to double*
  %55 = load double, double* %54
  %56 = fadd double %48, %55
  store double %56, double* %30, align 1, !tbaa !1244
  store i64 0, i64* %35, align 1, !tbaa !1244
  %57 = inttoptr i64 %53 to double*
  store double %56, double* %57
  %58 = load i64, i64* %7, align 8
  %59 = add i64 %58, 32
  %60 = icmp ugt i64 %58, -33
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %14, align 1, !tbaa !1246
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %15, align 1, !tbaa !1260
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %16, align 1, !tbaa !1261
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %17, align 1, !tbaa !1262
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %18, align 1, !tbaa !1263
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %19, align 1, !tbaa !1264
  %81 = add i64 %58, 40
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = inttoptr i64 %81 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %3, align 8, !tbaa !1240
  %86 = add i64 %58, 48
  store i64 %86, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400870_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400870:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = load i64, i64* %3, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %5, i64* %8
  %9 = inttoptr i64 %7 to i64*
  %10 = load i64, i64* %9
  store i64 %10, i64* %4, align 8, !tbaa !1240
  store i64 %6, i64* %3, align 8, !tbaa !1240
  %11 = add i64 %1, -112
  %12 = tail call %struct.Memory* @sub_400800_register_tm_clones(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  ret %struct.Memory* %12
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_407580_randlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_407580:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %14 = load i64, i64* %7, align 8
  %15 = load i64, i64* %6, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %6, align 8, !tbaa !1240
  store i64 %16, i64* %7, align 8, !tbaa !1240
  %18 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2608) to double*)
  %19 = bitcast %union.VectorReg* %9 to double*
  store double %18, double* %19, align 1, !tbaa !1244
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %21 = bitcast i64* %20 to double*
  store double 0.000000e+00, double* %21, align 1, !tbaa !1244
  %22 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2616) to double*)
  %23 = bitcast %union.VectorReg* %10 to double*
  store double %22, double* %23, align 1, !tbaa !1244
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %25, align 1, !tbaa !1244
  %26 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2624) to double*)
  %27 = bitcast %union.VectorReg* %11 to double*
  store double %26, double* %27, align 1, !tbaa !1244
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %29 = bitcast i64* %28 to double*
  store double 0.000000e+00, double* %29, align 1, !tbaa !1244
  %30 = bitcast %union.VectorReg* %12 to i8*
  %31 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 2632) to double*)
  %32 = bitcast %union.VectorReg* %12 to double*
  store double %31, double* %32, align 1, !tbaa !1244
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  store double 0.000000e+00, double* %34, align 1, !tbaa !1244
  %35 = add i64 %15, -16
  %36 = load i64, i64* %5, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %37
  %38 = add i64 %15, -24
  %39 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %40 = bitcast [32 x %union.VectorReg]* %8 to double*
  %41 = load double, double* %40, align 1
  %42 = inttoptr i64 %38 to double*
  store double %41, double* %42
  %43 = add i64 %15, -32
  %44 = inttoptr i64 %43 to double*
  store double %31, double* %44
  %45 = add i64 %15, -40
  %46 = inttoptr i64 %45 to double*
  store double %18, double* %46
  %47 = add i64 %15, -48
  %48 = inttoptr i64 %47 to double*
  store double %26, double* %48
  %49 = add i64 %15, -56
  %50 = inttoptr i64 %49 to double*
  store double %22, double* %50
  %51 = bitcast %union.VectorReg* %12 to <2 x i32>*
  %52 = bitcast double %31 to <2 x i32>
  %53 = extractelement <2 x i32> %52, i32 0
  %54 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %53, i32* %54, align 1, !tbaa !1492
  %55 = extractelement <2 x i32> %52, i32 1
  %56 = getelementptr inbounds i8, i8* %39, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %55, i32* %57, align 1, !tbaa !1492
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = load double, double* %40, align 1
  %60 = inttoptr i64 %38 to double*
  %61 = load double, double* %60
  %62 = fmul double %59, %61
  %63 = add i64 %15, -64
  %64 = inttoptr i64 %63 to double*
  store double %62, double* %64
  %65 = inttoptr i64 %63 to double*
  %66 = load double, double* %65
  %67 = tail call double @llvm.trunc.f64(double %66) #11
  %68 = tail call double @llvm.fabs.f64(double %67) #11
  %69 = fcmp ogt double %68, 0x41DFFFFFFFC00000
  %70 = fptosi double %67 to i32
  %71 = sitofp i32 %70 to double
  %72 = select i1 %69, double 0xC1E0000000000000, double %71
  %73 = load i64, i64* %7, align 8
  %74 = add i64 %73, -88
  %75 = inttoptr i64 %74 to double*
  store double %72, double* %75
  %76 = add i64 %73, -16
  %77 = inttoptr i64 %76 to double*
  %78 = load double, double* %77
  %79 = bitcast i64* %58 to double*
  %80 = bitcast %union.VectorReg* %13 to i8*
  %81 = bitcast %union.VectorReg* %11 to <2 x i32>*
  %82 = load <2 x i32>, <2 x i32>* %81, align 1
  %83 = bitcast i64* %28 to <2 x i32>*
  %84 = extractelement <2 x i32> %82, i32 0
  %85 = bitcast %union.VectorReg* %13 to i32*
  store i32 %84, i32* %85, align 1, !tbaa !1492
  %86 = extractelement <2 x i32> %82, i32 1
  %87 = getelementptr inbounds i8, i8* %80, i64 4
  %88 = bitcast i8* %87 to i32*
  store i32 %86, i32* %88, align 1, !tbaa !1492
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast %union.VectorReg* %13 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %74 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  %95 = fsub double %78, %94
  %96 = add i64 %73, -96
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %73, -8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = load <2 x i32>, <2 x i32>* %51, align 1
  %102 = extractelement <2 x i32> %101, i32 0
  store i32 %102, i32* %54, align 1, !tbaa !1492
  %103 = extractelement <2 x i32> %101, i32 1
  store i32 %103, i32* %57, align 1, !tbaa !1492
  %104 = load double, double* %40, align 1
  %105 = inttoptr i64 %100 to double*
  %106 = load double, double* %105
  %107 = fmul double %104, %106
  %108 = add i64 %73, -56
  %109 = inttoptr i64 %108 to double*
  store double %107, double* %109
  %110 = inttoptr i64 %108 to double*
  %111 = load double, double* %110
  %112 = tail call double @llvm.trunc.f64(double %111) #11
  %113 = tail call double @llvm.fabs.f64(double %112) #11
  %114 = fcmp ogt double %113, 0x41DFFFFFFFC00000
  %115 = fptosi double %112 to i32
  %116 = sitofp i32 %115 to double
  %117 = select i1 %114, double 0xC1E0000000000000, double %116
  %118 = add i64 %73, -104
  %119 = inttoptr i64 %118 to double*
  store double %117, double* %119
  %120 = inttoptr i64 %98 to i64*
  %121 = load i64, i64* %120
  %122 = inttoptr i64 %121 to double*
  %123 = load double, double* %122
  store i32 %84, i32* %85, align 1, !tbaa !1492
  store i32 %86, i32* %88, align 1, !tbaa !1492
  %124 = load i64, i64* %7, align 8
  %125 = add i64 %124, -104
  %126 = load double, double* %90, align 1
  %127 = inttoptr i64 %125 to double*
  %128 = load double, double* %127
  %129 = fmul double %126, %128
  %130 = fsub double %123, %129
  %131 = add i64 %124, -112
  %132 = inttoptr i64 %131 to double*
  store double %130, double* %132
  %133 = add i64 %124, -88
  %134 = inttoptr i64 %133 to double*
  %135 = load double, double* %134
  %136 = inttoptr i64 %131 to double*
  %137 = load double, double* %136
  %138 = fmul double %135, %137
  %139 = add i64 %124, -96
  %140 = inttoptr i64 %139 to double*
  %141 = load double, double* %140
  %142 = inttoptr i64 %125 to double*
  %143 = load double, double* %142
  %144 = fmul double %141, %143
  store double %144, double* %90, align 1, !tbaa !1244
  store i64 0, i64* %89, align 1, !tbaa !1244
  %145 = fadd double %138, %144
  %146 = add i64 %124, -56
  %147 = inttoptr i64 %146 to double*
  store double %145, double* %147
  %148 = load double, double* %32, align 1
  %149 = inttoptr i64 %146 to double*
  %150 = load double, double* %149
  %151 = fmul double %148, %150
  %152 = tail call double @llvm.trunc.f64(double %151) #11
  %153 = tail call double @llvm.fabs.f64(double %152) #11
  %154 = fcmp ogt double %153, 0x41DFFFFFFFC00000
  %155 = fptosi double %152 to i32
  %156 = sitofp i32 %155 to double
  %157 = select i1 %154, double 0xC1E0000000000000, double %156
  %158 = add i64 %124, -64
  %159 = inttoptr i64 %158 to double*
  store double %157, double* %159
  %160 = inttoptr i64 %146 to double*
  %161 = load double, double* %160
  %162 = load <2 x i32>, <2 x i32>* %81, align 1
  %163 = load <2 x i32>, <2 x i32>* %83, align 1
  %164 = extractelement <2 x i32> %162, i32 0
  %165 = bitcast %union.VectorReg* %12 to i32*
  store i32 %164, i32* %165, align 1, !tbaa !1492
  %166 = extractelement <2 x i32> %162, i32 1
  %167 = getelementptr inbounds i8, i8* %30, i64 4
  %168 = bitcast i8* %167 to i32*
  store i32 %166, i32* %168, align 1, !tbaa !1492
  %169 = extractelement <2 x i32> %163, i32 0
  %170 = bitcast i64* %33 to i32*
  store i32 %169, i32* %170, align 1, !tbaa !1492
  %171 = extractelement <2 x i32> %163, i32 1
  %172 = getelementptr inbounds i8, i8* %30, i64 12
  %173 = bitcast i8* %172 to i32*
  store i32 %171, i32* %173, align 1, !tbaa !1492
  %174 = load i64, i64* %7, align 8
  %175 = add i64 %174, -64
  %176 = load double, double* %32, align 1
  %177 = inttoptr i64 %175 to double*
  %178 = load double, double* %177
  %179 = fmul double %176, %178
  store double %179, double* %32, align 1, !tbaa !1244
  %180 = fsub double %161, %179
  %181 = add i64 %174, -120
  %182 = inttoptr i64 %181 to double*
  store double %180, double* %182
  %183 = bitcast <2 x i32> %162 to double
  %184 = inttoptr i64 %181 to double*
  %185 = load double, double* %184
  %186 = fmul double %183, %185
  %187 = add i64 %174, -96
  %188 = inttoptr i64 %187 to double*
  %189 = load double, double* %188
  %190 = add i64 %174, -112
  %191 = inttoptr i64 %190 to double*
  %192 = load double, double* %191
  %193 = fmul double %189, %192
  %194 = fadd double %193, %186
  store double %194, double* %27, align 1, !tbaa !1244
  %195 = bitcast i64* %28 to <2 x i32>*
  store <2 x i32> %163, <2 x i32>* %195, align 1, !tbaa !1244
  %196 = add i64 %174, -72
  %197 = inttoptr i64 %196 to double*
  store double %194, double* %197
  %198 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %199 = load <2 x i32>, <2 x i32>* %198, align 1
  %200 = load i64, i64* %20, align 1
  %201 = extractelement <2 x i32> %199, i32 0
  store i32 %201, i32* %54, align 1, !tbaa !1492
  %202 = extractelement <2 x i32> %199, i32 1
  store i32 %202, i32* %57, align 1, !tbaa !1492
  %203 = load double, double* %40, align 1
  %204 = inttoptr i64 %196 to double*
  %205 = load double, double* %204
  %206 = fmul double %203, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #11
  %208 = tail call double @llvm.fabs.f64(double %207) #11
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = zext i32 %210 to i64
  %212 = select i1 %209, i64 2147483648, i64 %211
  store i64 %212, i64* %4, align 8, !tbaa !1240
  %213 = trunc i64 %212 to i32
  %214 = sitofp i32 %213 to double
  %215 = add i64 %174, -80
  %216 = inttoptr i64 %215 to double*
  store double %214, double* %216
  %217 = inttoptr i64 %196 to double*
  %218 = load double, double* %217
  %219 = load double, double* %23, align 1
  %220 = inttoptr i64 %215 to double*
  %221 = load double, double* %220
  %222 = fmul double %219, %221
  store double %222, double* %23, align 1, !tbaa !1244
  %223 = fsub double %218, %222
  %224 = load i64, i64* %7, align 8
  %225 = add i64 %224, -8
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = inttoptr i64 %227 to double*
  store double %223, double* %228
  %229 = inttoptr i64 %225 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %5, align 8, !tbaa !1240
  %231 = bitcast <2 x i32> %199 to double
  %232 = inttoptr i64 %230 to double*
  %233 = load double, double* %232
  %234 = fmul double %231, %233
  store double %234, double* %19, align 1, !tbaa !1244
  store i64 %200, i64* %20, align 1, !tbaa !1244
  %235 = add i64 %224, -128
  %236 = inttoptr i64 %235 to double*
  store double %234, double* %236
  %237 = inttoptr i64 %235 to double*
  %238 = load double, double* %237
  store double %238, double* %40, align 1, !tbaa !1244
  store double 0.000000e+00, double* %79, align 1, !tbaa !1244
  %239 = load i64, i64* %6, align 8, !tbaa !1240
  %240 = add i64 %239, 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %7, align 8, !tbaa !1240
  %243 = inttoptr i64 %240 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %3, align 8, !tbaa !1240
  %245 = add i64 %239, 16
  store i64 %245, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406d20_bubble(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_406d20:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %18 = load i64, i64* %16, align 8
  %19 = load i64, i64* %15, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  store i64 %20, i64* %15, align 8, !tbaa !1240
  store i64 %20, i64* %16, align 8, !tbaa !1240
  %22 = add i64 %19, -16
  %23 = load i64, i64* %14, align 8
  %24 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %24
  %25 = add i64 %19, -24
  %26 = load i64, i64* %13, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %19, -32
  %29 = load i64, i64* %12, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = add i64 %19, -40
  %32 = load i64, i64* %11, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %32, i64* %33
  %34 = add i64 %19, -44
  %35 = load i32, i32* %7, align 4
  %36 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %36
  %37 = add i64 %19, -48
  %38 = load i32, i32* %9, align 4
  %39 = inttoptr i64 %37 to i32*
  store i32 %38, i32* %39
  %40 = inttoptr i64 %37 to i32*
  %41 = load i32, i32* %40
  %42 = add i32 %41, -1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = icmp eq i32 %42, 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %50 = select i1 %46, i64 38, i64 583
  %51 = add i64 %50, %1
  %52 = add i64 %19, -60
  %53 = add i64 %51, 7
  %54 = inttoptr i64 %52 to i32*
  store i32 0, i32* %54
  %55 = bitcast [32 x %union.VectorReg]* %17 to double*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to double*
  br i1 %46, label %block_406d4d.preheader, label %block_406f6e.preheader

block_406d4d.preheader:                           ; preds = %block_406d20
  br label %block_406d4d

block_406f6e.preheader:                           ; preds = %block_406d20
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %59 = bitcast %union.VectorReg* %58 to double*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %61 = bitcast i64* %60 to double*
  br label %block_406f6e

block_406d99:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %62 = load i64, i64* %16, align 8
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = add i64 %62, -52
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67
  %69 = add i32 %68, 1
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 4
  %72 = add i64 %71, %65
  %73 = load i64, i64* %16, align 8
  %74 = add i64 %73, -40
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75
  %77 = sext i32 %76 to i64
  %78 = shl nsw i64 %77, 3
  %79 = add i64 %78, %72
  %80 = inttoptr i64 %79 to double*
  %81 = load double, double* %80
  %82 = add i64 %73, -48
  %83 = inttoptr i64 %82 to double*
  store double %81, double* %83
  %84 = add i64 %73, -8
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = add i64 %73, -52
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = add i64 %91, %86
  %93 = inttoptr i64 %74 to i32*
  %94 = load i32, i32* %93
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 3
  %97 = add i64 %96, %92
  %98 = inttoptr i64 %97 to double*
  %99 = load double, double* %98
  store double %99, double* %55, align 1, !tbaa !1244
  %100 = add i32 %89, 1
  %101 = sext i32 %100 to i64
  %102 = shl nsw i64 %101, 4
  %103 = add i64 %102, %86
  %104 = load i64, i64* %16, align 8
  %105 = add i64 %104, -40
  %106 = inttoptr i64 %105 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  %109 = shl nsw i64 %108, 3
  %110 = add i64 %109, %103
  %111 = load double, double* %55, align 1
  %112 = inttoptr i64 %110 to double*
  store double %111, double* %112
  %113 = add i64 %104, -48
  %114 = inttoptr i64 %113 to double*
  %115 = load double, double* %114
  store double %115, double* %55, align 1, !tbaa !1244
  store double 0.000000e+00, double* %57, align 1, !tbaa !1244
  %116 = add i64 %104, -8
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %104, -52
  %120 = inttoptr i64 %119 to i32*
  %121 = load i32, i32* %120
  %122 = sext i32 %121 to i64
  %123 = shl nsw i64 %122, 4
  %124 = add i64 %123, %118
  %125 = inttoptr i64 %105 to i32*
  %126 = load i32, i32* %125
  %127 = sext i32 %126 to i64
  %128 = shl nsw i64 %127, 3
  %129 = add i64 %128, %124
  %130 = inttoptr i64 %129 to double*
  store double %115, double* %130
  %131 = add i64 %104, -16
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  %134 = inttoptr i64 %119 to i32*
  %135 = load i32, i32* %134
  %136 = add i32 %135, 1
  %137 = sext i32 %136 to i64
  %138 = shl nsw i64 %137, 3
  %139 = add i64 %138, %133
  %140 = load i64, i64* %16, align 8
  %141 = add i64 %140, -40
  %142 = inttoptr i64 %141 to i32*
  %143 = load i32, i32* %142
  %144 = sext i32 %143 to i64
  %145 = shl nsw i64 %144, 2
  %146 = add i64 %145, %139
  %147 = inttoptr i64 %146 to i32*
  %148 = load i32, i32* %147
  %149 = add i64 %140, -56
  %150 = inttoptr i64 %149 to i32*
  store i32 %148, i32* %150
  %151 = add i64 %140, -16
  %152 = inttoptr i64 %151 to i64*
  %153 = load i64, i64* %152
  %154 = add i64 %140, -52
  %155 = inttoptr i64 %154 to i32*
  %156 = load i32, i32* %155
  %157 = sext i32 %156 to i64
  %158 = shl nsw i64 %157, 3
  %159 = add i64 %158, %153
  %160 = inttoptr i64 %141 to i32*
  %161 = load i32, i32* %160
  %162 = sext i32 %161 to i64
  %163 = shl nsw i64 %162, 2
  %164 = add i64 %163, %159
  %165 = inttoptr i64 %164 to i32*
  %166 = load i32, i32* %165
  %167 = zext i32 %166 to i64
  store i64 %167, i64* %11, align 8, !tbaa !1240
  %168 = load i64, i64* %16, align 8
  %169 = add i64 %168, -16
  %170 = inttoptr i64 %169 to i64*
  %171 = load i64, i64* %170
  %172 = add i64 %168, -52
  %173 = inttoptr i64 %172 to i32*
  %174 = load i32, i32* %173
  %175 = add i32 %174, 1
  %176 = sext i32 %175 to i64
  %177 = shl nsw i64 %176, 3
  %178 = add i64 %177, %171
  %179 = load i64, i64* %16, align 8
  %180 = add i64 %179, -40
  %181 = inttoptr i64 %180 to i32*
  %182 = load i32, i32* %181
  %183 = sext i32 %182 to i64
  %184 = shl nsw i64 %183, 2
  %185 = add i64 %184, %178
  %186 = load i32, i32* %5, align 4
  %187 = inttoptr i64 %185 to i32*
  store i32 %186, i32* %187
  %188 = add i64 %179, -56
  %189 = inttoptr i64 %188 to i32*
  %190 = load i32, i32* %189
  %191 = add i64 %179, -16
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  %194 = add i64 %179, -52
  %195 = inttoptr i64 %194 to i32*
  %196 = load i32, i32* %195
  %197 = sext i32 %196 to i64
  %198 = shl nsw i64 %197, 3
  %199 = add i64 %198, %193
  %200 = inttoptr i64 %180 to i32*
  %201 = load i32, i32* %200
  %202 = sext i32 %201 to i64
  %203 = shl nsw i64 %202, 2
  %204 = add i64 %203, %199
  %205 = inttoptr i64 %204 to i32*
  store i32 %190, i32* %205
  %206 = load i64, i64* %16, align 8
  %207 = add i64 %206, -24
  %208 = inttoptr i64 %207 to i64*
  %209 = load i64, i64* %208
  %210 = add i64 %206, -52
  %211 = inttoptr i64 %210 to i32*
  %212 = load i32, i32* %211
  %213 = add i32 %212, 1
  %214 = sext i32 %213 to i64
  %215 = shl nsw i64 %214, 3
  %216 = add i64 %215, %209
  %217 = load i64, i64* %16, align 8
  %218 = add i64 %217, -40
  %219 = inttoptr i64 %218 to i32*
  %220 = load i32, i32* %219
  %221 = sext i32 %220 to i64
  %222 = shl nsw i64 %221, 2
  %223 = add i64 %222, %216
  %224 = inttoptr i64 %223 to i32*
  %225 = load i32, i32* %224
  %226 = add i64 %217, -56
  %227 = inttoptr i64 %226 to i32*
  store i32 %225, i32* %227
  %228 = add i64 %217, -24
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %217, -52
  %232 = inttoptr i64 %231 to i32*
  %233 = load i32, i32* %232
  %234 = sext i32 %233 to i64
  %235 = shl nsw i64 %234, 3
  %236 = add i64 %235, %230
  %237 = inttoptr i64 %218 to i32*
  %238 = load i32, i32* %237
  %239 = sext i32 %238 to i64
  %240 = shl nsw i64 %239, 2
  %241 = add i64 %240, %236
  %242 = inttoptr i64 %241 to i32*
  %243 = load i32, i32* %242
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %11, align 8, !tbaa !1240
  %245 = load i64, i64* %16, align 8
  %246 = add i64 %245, -24
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %245, -52
  %250 = inttoptr i64 %249 to i32*
  %251 = load i32, i32* %250
  %252 = add i32 %251, 1
  %253 = sext i32 %252 to i64
  %254 = shl nsw i64 %253, 3
  %255 = add i64 %254, %248
  %256 = load i64, i64* %16, align 8
  %257 = add i64 %256, -40
  %258 = inttoptr i64 %257 to i32*
  %259 = load i32, i32* %258
  %260 = sext i32 %259 to i64
  %261 = shl nsw i64 %260, 2
  %262 = add i64 %261, %255
  %263 = load i32, i32* %5, align 4
  %264 = inttoptr i64 %262 to i32*
  store i32 %263, i32* %264
  %265 = add i64 %256, -56
  %266 = inttoptr i64 %265 to i32*
  %267 = load i32, i32* %266
  %268 = add i64 %256, -24
  %269 = inttoptr i64 %268 to i64*
  %270 = load i64, i64* %269
  %271 = add i64 %256, -52
  %272 = inttoptr i64 %271 to i32*
  %273 = load i32, i32* %272
  %274 = sext i32 %273 to i64
  %275 = shl nsw i64 %274, 3
  %276 = add i64 %275, %270
  %277 = inttoptr i64 %257 to i32*
  %278 = load i32, i32* %277
  %279 = sext i32 %278 to i64
  %280 = shl nsw i64 %279, 2
  %281 = add i64 %280, %276
  %282 = inttoptr i64 %281 to i32*
  store i32 %267, i32* %282
  %283 = load i64, i64* %16, align 8
  %284 = add i64 %283, -32
  %285 = inttoptr i64 %284 to i64*
  %286 = load i64, i64* %285
  %287 = add i64 %283, -52
  %288 = inttoptr i64 %287 to i32*
  %289 = load i32, i32* %288
  %290 = add i32 %289, 1
  %291 = sext i32 %290 to i64
  %292 = shl nsw i64 %291, 3
  %293 = add i64 %292, %286
  %294 = load i64, i64* %16, align 8
  %295 = add i64 %294, -40
  %296 = inttoptr i64 %295 to i32*
  %297 = load i32, i32* %296
  %298 = sext i32 %297 to i64
  %299 = shl nsw i64 %298, 2
  %300 = add i64 %299, %293
  %301 = inttoptr i64 %300 to i32*
  %302 = load i32, i32* %301
  %303 = add i64 %294, -56
  %304 = inttoptr i64 %303 to i32*
  store i32 %302, i32* %304
  %305 = add i64 %294, -32
  %306 = inttoptr i64 %305 to i64*
  %307 = load i64, i64* %306
  %308 = add i64 %294, -52
  %309 = inttoptr i64 %308 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  %312 = shl nsw i64 %311, 3
  %313 = add i64 %312, %307
  %314 = inttoptr i64 %295 to i32*
  %315 = load i32, i32* %314
  %316 = sext i32 %315 to i64
  %317 = shl nsw i64 %316, 2
  %318 = add i64 %317, %313
  %319 = inttoptr i64 %318 to i32*
  %320 = load i32, i32* %319
  %321 = zext i32 %320 to i64
  store i64 %321, i64* %11, align 8, !tbaa !1240
  %322 = load i64, i64* %16, align 8
  %323 = add i64 %322, -32
  %324 = inttoptr i64 %323 to i64*
  %325 = load i64, i64* %324
  %326 = add i64 %322, -52
  %327 = inttoptr i64 %326 to i32*
  %328 = load i32, i32* %327
  %329 = add i32 %328, 1
  %330 = zext i32 %329 to i64
  store i64 %330, i64* %13, align 8, !tbaa !1240
  %331 = sext i32 %329 to i64
  %332 = shl nsw i64 %331, 3
  %333 = add i64 %332, %325
  %334 = load i64, i64* %16, align 8
  %335 = add i64 %334, -40
  %336 = inttoptr i64 %335 to i32*
  %337 = load i32, i32* %336
  %338 = sext i32 %337 to i64
  %339 = shl nsw i64 %338, 2
  %340 = add i64 %339, %333
  %341 = load i32, i32* %5, align 4
  %342 = inttoptr i64 %340 to i32*
  store i32 %341, i32* %342
  %343 = add i64 %334, -56
  %344 = inttoptr i64 %343 to i32*
  %345 = load i32, i32* %344
  %346 = add i64 %334, -32
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = add i64 %334, -52
  %350 = inttoptr i64 %349 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 3
  %354 = add i64 %353, %348
  %355 = inttoptr i64 %335 to i32*
  %356 = load i32, i32* %355
  %357 = sext i32 %356 to i64
  store i64 %357, i64* %12, align 8, !tbaa !1240
  %358 = shl nsw i64 %357, 2
  %359 = add i64 %358, %354
  %360 = inttoptr i64 %359 to i32*
  store i32 %345, i32* %360
  %361 = load i64, i64* %16, align 8
  %362 = add i64 %361, -52
  %363 = inttoptr i64 %362 to i32*
  %364 = load i32, i32* %363
  %365 = add i32 %364, 1
  %366 = inttoptr i64 %362 to i32*
  store i32 %365, i32* %366
  %367 = add i64 %947, -76
  br label %block_406d4d

block_406f7f:                                     ; preds = %block_406f6e
  %368 = add i64 %511, -8
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = sext i32 %515 to i64
  %372 = shl nsw i64 %371, 4
  %373 = add i64 %372, %370
  %374 = lshr i64 %370, 63
  %375 = add i64 %511, -40
  %376 = inttoptr i64 %375 to i32*
  %377 = load i32, i32* %376
  %378 = sext i32 %377 to i64
  %379 = shl nsw i64 %378, 3
  %380 = add i64 %379, %373
  %381 = inttoptr i64 %380 to double*
  %382 = load double, double* %381
  store double %382, double* %55, align 1, !tbaa !1244
  store double 0.000000e+00, double* %57, align 1, !tbaa !1244
  %383 = add i32 %515, 1
  %384 = zext i32 %383 to i64
  store i64 %384, i64* %12, align 8, !tbaa !1240
  %385 = sext i32 %383 to i64
  %386 = shl nsw i64 %385, 4
  %387 = add i64 %386, %370
  store i64 %387, i64* %10, align 8, !tbaa !1240
  %388 = icmp ult i64 %387, %370
  %389 = icmp ult i64 %387, %386
  %390 = or i1 %388, %389
  %391 = zext i1 %390 to i8
  store i8 %391, i8* %43, align 1, !tbaa !1246
  %392 = trunc i64 %387 to i32
  %393 = and i32 %392, 255
  %394 = tail call i32 @llvm.ctpop.i32(i32 %393) #11
  %395 = trunc i32 %394 to i8
  %396 = and i8 %395, 1
  %397 = xor i8 %396, 1
  store i8 %397, i8* %44, align 1, !tbaa !1260
  %398 = xor i64 %386, %370
  %399 = xor i64 %398, %387
  %400 = lshr i64 %399, 4
  %401 = trunc i64 %400 to i8
  %402 = and i8 %401, 1
  store i8 %402, i8* %45, align 1, !tbaa !1261
  %403 = icmp eq i64 %387, 0
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %47, align 1, !tbaa !1262
  %405 = lshr i64 %387, 63
  %406 = trunc i64 %405 to i8
  store i8 %406, i8* %48, align 1, !tbaa !1263
  %407 = lshr i64 %385, 59
  %408 = and i64 %407, 1
  %409 = xor i64 %405, %374
  %410 = xor i64 %405, %408
  %411 = add nuw nsw i64 %409, %410
  %412 = icmp eq i64 %411, 2
  %413 = zext i1 %412 to i8
  store i8 %413, i8* %49, align 1, !tbaa !1264
  %414 = load i64, i64* %16, align 8
  %415 = add i64 %414, -40
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416
  %418 = sext i32 %417 to i64
  store i64 %418, i64* %11, align 8, !tbaa !1240
  %419 = shl nsw i64 %418, 3
  %420 = add i64 %419, %387
  %421 = inttoptr i64 %420 to double*
  %422 = load double, double* %421
  store double %422, double* %59, align 1, !tbaa !1244
  store double 0.000000e+00, double* %61, align 1, !tbaa !1244
  %423 = add i64 %549, 57
  store i64 %423, i64* %3, align 8
  %424 = load double, double* %55, align 1
  %425 = fcmp uno double %422, %424
  br i1 %425, label %426, label %439

; <label>:426:                                    ; preds = %block_406f7f
  %427 = fadd double %422, %424
  %428 = bitcast double %427 to i64
  %429 = and i64 %428, 9221120237041090560
  %430 = icmp eq i64 %429, 9218868437227405312
  %431 = and i64 %428, 2251799813685247
  %432 = icmp ne i64 %431, 0
  %433 = and i1 %430, %432
  br i1 %433, label %434, label %445

; <label>:434:                                    ; preds = %426
  %435 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %423, %struct.Memory* %512) #14
  %436 = load i64, i64* %3, align 8
  %437 = load i8, i8* %43, align 1, !tbaa !1246
  %438 = load i8, i8* %47, align 1, !tbaa !1262
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:439:                                    ; preds = %block_406f7f
  %440 = fcmp ogt double %422, %424
  br i1 %440, label %445, label %441

; <label>:441:                                    ; preds = %439
  %442 = fcmp olt double %422, %424
  br i1 %442, label %445, label %443

; <label>:443:                                    ; preds = %441
  %444 = fcmp oeq double %422, %424
  br i1 %444, label %445, label %449

; <label>:445:                                    ; preds = %443, %441, %439, %426
  %446 = phi i8 [ 0, %439 ], [ 0, %441 ], [ 1, %443 ], [ 1, %426 ]
  %447 = phi i8 [ 0, %439 ], [ 0, %441 ], [ 0, %443 ], [ 1, %426 ]
  %448 = phi i8 [ 0, %439 ], [ 1, %441 ], [ 0, %443 ], [ 1, %426 ]
  store i8 %446, i8* %47, align 1, !tbaa !1494
  store i8 %447, i8* %44, align 1, !tbaa !1494
  store i8 %448, i8* %43, align 1, !tbaa !1494
  br label %449

; <label>:449:                                    ; preds = %445, %443
  %450 = phi i8 [ %446, %445 ], [ %404, %443 ]
  %451 = phi i8 [ %448, %445 ], [ %391, %443 ]
  store i8 0, i8* %49, align 1, !tbaa !1494
  store i8 0, i8* %48, align 1, !tbaa !1494
  store i8 0, i8* %45, align 1, !tbaa !1494
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %449, %434
  %452 = phi i8 [ %438, %434 ], [ %450, %449 ]
  %453 = phi i8 [ %437, %434 ], [ %451, %449 ]
  %454 = phi i64 [ %436, %434 ], [ %423, %449 ]
  %455 = phi %struct.Memory* [ %435, %434 ], [ %512, %449 ]
  %456 = or i8 %452, %453
  %457 = icmp ne i8 %456, 0
  %458 = select i1 %457, i64 439, i64 6
  %459 = add i64 %454, %458
  br i1 %457, label %block_40718c.loopexit64, label %block_406fbe

block_406d4d:                                     ; preds = %block_406d99, %block_406d4d.preheader
  %460 = phi i64 [ %367, %block_406d99 ], [ %53, %block_406d4d.preheader ]
  %461 = phi i64 [ %361, %block_406d99 ], [ %20, %block_406d4d.preheader ]
  %462 = phi %struct.Memory* [ %943, %block_406d99 ], [ %2, %block_406d4d.preheader ]
  %463 = add i64 %461, -52
  %464 = inttoptr i64 %463 to i32*
  %465 = load i32, i32* %464
  %466 = zext i32 %465 to i64
  store i64 %466, i64* %10, align 8, !tbaa !1240
  %467 = add i64 %461, -36
  %468 = inttoptr i64 %467 to i32*
  %469 = load i32, i32* %468
  %470 = add i32 %469, -1
  %471 = zext i32 %470 to i64
  store i64 %471, i64* %11, align 8, !tbaa !1240
  %472 = lshr i32 %470, 31
  %473 = sub i32 %465, %470
  %474 = icmp ult i32 %465, %470
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %43, align 1, !tbaa !1246
  %476 = and i32 %473, 255
  %477 = tail call i32 @llvm.ctpop.i32(i32 %476) #11
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  store i8 %480, i8* %44, align 1, !tbaa !1260
  %481 = xor i32 %470, %465
  %482 = xor i32 %481, %473
  %483 = lshr i32 %482, 4
  %484 = trunc i32 %483 to i8
  %485 = and i8 %484, 1
  store i8 %485, i8* %45, align 1, !tbaa !1261
  %486 = icmp eq i32 %473, 0
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %47, align 1, !tbaa !1262
  %488 = lshr i32 %473, 31
  %489 = trunc i32 %488 to i8
  store i8 %489, i8* %48, align 1, !tbaa !1263
  %490 = lshr i32 %465, 31
  %491 = xor i32 %472, %490
  %492 = xor i32 %488, %490
  %493 = add nuw nsw i32 %492, %491
  %494 = icmp eq i32 %493, 2
  %495 = zext i1 %494 to i8
  store i8 %495, i8* %49, align 1, !tbaa !1264
  %496 = icmp ne i8 %489, 0
  %497 = xor i1 %496, %494
  %498 = select i1 %497, i64 17, i64 533
  %499 = add i64 %460, %498
  br i1 %497, label %block_406d5e, label %block_40718c.loopexit

block_40718c.loopexit:                            ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit, %block_406d4d
  %500 = phi %struct.Memory* [ %462, %block_406d4d ], [ %943, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit ]
  br label %block_40718c

block_40718c.loopexit64:                          ; preds = %block_406f6e, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %501 = phi %struct.Memory* [ %455, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %512, %block_406f6e ]
  br label %block_40718c

block_40718c:                                     ; preds = %block_40718c.loopexit64, %block_40718c.loopexit
  %502 = phi %struct.Memory* [ %500, %block_40718c.loopexit ], [ %501, %block_40718c.loopexit64 ]
  %503 = load i64, i64* %15, align 8, !tbaa !1240
  %504 = add i64 %503, 8
  %505 = inttoptr i64 %503 to i64*
  %506 = load i64, i64* %505
  store i64 %506, i64* %16, align 8, !tbaa !1240
  %507 = inttoptr i64 %504 to i64*
  %508 = load i64, i64* %507
  store i64 %508, i64* %3, align 8, !tbaa !1240
  %509 = add i64 %503, 16
  store i64 %509, i64* %15, align 8, !tbaa !1240
  ret %struct.Memory* %502

block_406f6e:                                     ; preds = %block_406fbe, %block_406f6e.preheader
  %510 = phi i64 [ %855, %block_406fbe ], [ %53, %block_406f6e.preheader ]
  %511 = phi i64 [ %849, %block_406fbe ], [ %20, %block_406f6e.preheader ]
  %512 = phi %struct.Memory* [ %455, %block_406fbe ], [ %2, %block_406f6e.preheader ]
  %513 = add i64 %511, -52
  %514 = inttoptr i64 %513 to i32*
  %515 = load i32, i32* %514
  %516 = zext i32 %515 to i64
  store i64 %516, i64* %10, align 8, !tbaa !1240
  %517 = add i64 %511, -36
  %518 = inttoptr i64 %517 to i32*
  %519 = load i32, i32* %518
  %520 = add i32 %519, -1
  %521 = zext i32 %520 to i64
  store i64 %521, i64* %11, align 8, !tbaa !1240
  %522 = lshr i32 %520, 31
  %523 = sub i32 %515, %520
  %524 = icmp ult i32 %515, %520
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %43, align 1, !tbaa !1246
  %526 = and i32 %523, 255
  %527 = tail call i32 @llvm.ctpop.i32(i32 %526) #11
  %528 = trunc i32 %527 to i8
  %529 = and i8 %528, 1
  %530 = xor i8 %529, 1
  store i8 %530, i8* %44, align 1, !tbaa !1260
  %531 = xor i32 %520, %515
  %532 = xor i32 %531, %523
  %533 = lshr i32 %532, 4
  %534 = trunc i32 %533 to i8
  %535 = and i8 %534, 1
  store i8 %535, i8* %45, align 1, !tbaa !1261
  %536 = icmp eq i32 %523, 0
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %47, align 1, !tbaa !1262
  %538 = lshr i32 %523, 31
  %539 = trunc i32 %538 to i8
  store i8 %539, i8* %48, align 1, !tbaa !1263
  %540 = lshr i32 %515, 31
  %541 = xor i32 %522, %540
  %542 = xor i32 %538, %540
  %543 = add nuw nsw i32 %542, %541
  %544 = icmp eq i32 %543, 2
  %545 = zext i1 %544 to i8
  store i8 %545, i8* %49, align 1, !tbaa !1264
  %546 = icmp ne i8 %539, 0
  %547 = xor i1 %546, %544
  %548 = select i1 %547, i64 17, i64 537
  %549 = add i64 %510, %548
  br i1 %547, label %block_406f7f, label %block_40718c.loopexit64

block_406fbe:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %550 = load i64, i64* %16, align 8
  %551 = add i64 %550, -8
  %552 = inttoptr i64 %551 to i64*
  %553 = load i64, i64* %552
  %554 = add i64 %550, -52
  %555 = inttoptr i64 %554 to i32*
  %556 = load i32, i32* %555
  %557 = add i32 %556, 1
  %558 = sext i32 %557 to i64
  %559 = shl nsw i64 %558, 4
  %560 = add i64 %559, %553
  %561 = load i64, i64* %16, align 8
  %562 = add i64 %561, -40
  %563 = inttoptr i64 %562 to i32*
  %564 = load i32, i32* %563
  %565 = sext i32 %564 to i64
  %566 = shl nsw i64 %565, 3
  %567 = add i64 %566, %560
  %568 = inttoptr i64 %567 to double*
  %569 = load double, double* %568
  %570 = add i64 %561, -48
  %571 = inttoptr i64 %570 to double*
  store double %569, double* %571
  %572 = add i64 %561, -8
  %573 = inttoptr i64 %572 to i64*
  %574 = load i64, i64* %573
  %575 = add i64 %561, -52
  %576 = inttoptr i64 %575 to i32*
  %577 = load i32, i32* %576
  %578 = sext i32 %577 to i64
  %579 = shl nsw i64 %578, 4
  %580 = add i64 %579, %574
  %581 = inttoptr i64 %562 to i32*
  %582 = load i32, i32* %581
  %583 = sext i32 %582 to i64
  %584 = shl nsw i64 %583, 3
  %585 = add i64 %584, %580
  %586 = inttoptr i64 %585 to double*
  %587 = load double, double* %586
  store double %587, double* %55, align 1, !tbaa !1244
  %588 = add i32 %577, 1
  %589 = sext i32 %588 to i64
  %590 = shl nsw i64 %589, 4
  %591 = add i64 %590, %574
  %592 = load i64, i64* %16, align 8
  %593 = add i64 %592, -40
  %594 = inttoptr i64 %593 to i32*
  %595 = load i32, i32* %594
  %596 = sext i32 %595 to i64
  %597 = shl nsw i64 %596, 3
  %598 = add i64 %597, %591
  %599 = load double, double* %55, align 1
  %600 = inttoptr i64 %598 to double*
  store double %599, double* %600
  %601 = add i64 %592, -48
  %602 = inttoptr i64 %601 to double*
  %603 = load double, double* %602
  store double %603, double* %55, align 1, !tbaa !1244
  store double 0.000000e+00, double* %57, align 1, !tbaa !1244
  %604 = add i64 %592, -8
  %605 = inttoptr i64 %604 to i64*
  %606 = load i64, i64* %605
  %607 = add i64 %592, -52
  %608 = inttoptr i64 %607 to i32*
  %609 = load i32, i32* %608
  %610 = sext i32 %609 to i64
  %611 = shl nsw i64 %610, 4
  %612 = add i64 %611, %606
  %613 = inttoptr i64 %593 to i32*
  %614 = load i32, i32* %613
  %615 = sext i32 %614 to i64
  %616 = shl nsw i64 %615, 3
  %617 = add i64 %616, %612
  %618 = inttoptr i64 %617 to double*
  store double %603, double* %618
  %619 = add i64 %592, -16
  %620 = inttoptr i64 %619 to i64*
  %621 = load i64, i64* %620
  %622 = inttoptr i64 %607 to i32*
  %623 = load i32, i32* %622
  %624 = add i32 %623, 1
  %625 = sext i32 %624 to i64
  %626 = shl nsw i64 %625, 3
  %627 = add i64 %626, %621
  %628 = load i64, i64* %16, align 8
  %629 = add i64 %628, -40
  %630 = inttoptr i64 %629 to i32*
  %631 = load i32, i32* %630
  %632 = sext i32 %631 to i64
  %633 = shl nsw i64 %632, 2
  %634 = add i64 %633, %627
  %635 = inttoptr i64 %634 to i32*
  %636 = load i32, i32* %635
  %637 = add i64 %628, -56
  %638 = inttoptr i64 %637 to i32*
  store i32 %636, i32* %638
  %639 = add i64 %628, -16
  %640 = inttoptr i64 %639 to i64*
  %641 = load i64, i64* %640
  %642 = add i64 %628, -52
  %643 = inttoptr i64 %642 to i32*
  %644 = load i32, i32* %643
  %645 = sext i32 %644 to i64
  %646 = shl nsw i64 %645, 3
  %647 = add i64 %646, %641
  %648 = inttoptr i64 %629 to i32*
  %649 = load i32, i32* %648
  %650 = sext i32 %649 to i64
  %651 = shl nsw i64 %650, 2
  %652 = add i64 %651, %647
  %653 = inttoptr i64 %652 to i32*
  %654 = load i32, i32* %653
  %655 = zext i32 %654 to i64
  store i64 %655, i64* %11, align 8, !tbaa !1240
  %656 = load i64, i64* %16, align 8
  %657 = add i64 %656, -16
  %658 = inttoptr i64 %657 to i64*
  %659 = load i64, i64* %658
  %660 = add i64 %656, -52
  %661 = inttoptr i64 %660 to i32*
  %662 = load i32, i32* %661
  %663 = add i32 %662, 1
  %664 = sext i32 %663 to i64
  %665 = shl nsw i64 %664, 3
  %666 = add i64 %665, %659
  %667 = load i64, i64* %16, align 8
  %668 = add i64 %667, -40
  %669 = inttoptr i64 %668 to i32*
  %670 = load i32, i32* %669
  %671 = sext i32 %670 to i64
  %672 = shl nsw i64 %671, 2
  %673 = add i64 %672, %666
  %674 = load i32, i32* %5, align 4
  %675 = inttoptr i64 %673 to i32*
  store i32 %674, i32* %675
  %676 = add i64 %667, -56
  %677 = inttoptr i64 %676 to i32*
  %678 = load i32, i32* %677
  %679 = add i64 %667, -16
  %680 = inttoptr i64 %679 to i64*
  %681 = load i64, i64* %680
  %682 = add i64 %667, -52
  %683 = inttoptr i64 %682 to i32*
  %684 = load i32, i32* %683
  %685 = sext i32 %684 to i64
  %686 = shl nsw i64 %685, 3
  %687 = add i64 %686, %681
  %688 = inttoptr i64 %668 to i32*
  %689 = load i32, i32* %688
  %690 = sext i32 %689 to i64
  %691 = shl nsw i64 %690, 2
  %692 = add i64 %691, %687
  %693 = inttoptr i64 %692 to i32*
  store i32 %678, i32* %693
  %694 = load i64, i64* %16, align 8
  %695 = add i64 %694, -24
  %696 = inttoptr i64 %695 to i64*
  %697 = load i64, i64* %696
  %698 = add i64 %694, -52
  %699 = inttoptr i64 %698 to i32*
  %700 = load i32, i32* %699
  %701 = add i32 %700, 1
  %702 = sext i32 %701 to i64
  %703 = shl nsw i64 %702, 3
  %704 = add i64 %703, %697
  %705 = load i64, i64* %16, align 8
  %706 = add i64 %705, -40
  %707 = inttoptr i64 %706 to i32*
  %708 = load i32, i32* %707
  %709 = sext i32 %708 to i64
  %710 = shl nsw i64 %709, 2
  %711 = add i64 %710, %704
  %712 = inttoptr i64 %711 to i32*
  %713 = load i32, i32* %712
  %714 = add i64 %705, -56
  %715 = inttoptr i64 %714 to i32*
  store i32 %713, i32* %715
  %716 = add i64 %705, -24
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  %719 = add i64 %705, -52
  %720 = inttoptr i64 %719 to i32*
  %721 = load i32, i32* %720
  %722 = sext i32 %721 to i64
  %723 = shl nsw i64 %722, 3
  %724 = add i64 %723, %718
  %725 = inttoptr i64 %706 to i32*
  %726 = load i32, i32* %725
  %727 = sext i32 %726 to i64
  %728 = shl nsw i64 %727, 2
  %729 = add i64 %728, %724
  %730 = inttoptr i64 %729 to i32*
  %731 = load i32, i32* %730
  %732 = zext i32 %731 to i64
  store i64 %732, i64* %11, align 8, !tbaa !1240
  %733 = load i64, i64* %16, align 8
  %734 = add i64 %733, -24
  %735 = inttoptr i64 %734 to i64*
  %736 = load i64, i64* %735
  %737 = add i64 %733, -52
  %738 = inttoptr i64 %737 to i32*
  %739 = load i32, i32* %738
  %740 = add i32 %739, 1
  %741 = sext i32 %740 to i64
  %742 = shl nsw i64 %741, 3
  %743 = add i64 %742, %736
  %744 = load i64, i64* %16, align 8
  %745 = add i64 %744, -40
  %746 = inttoptr i64 %745 to i32*
  %747 = load i32, i32* %746
  %748 = sext i32 %747 to i64
  %749 = shl nsw i64 %748, 2
  %750 = add i64 %749, %743
  %751 = load i32, i32* %5, align 4
  %752 = inttoptr i64 %750 to i32*
  store i32 %751, i32* %752
  %753 = add i64 %744, -56
  %754 = inttoptr i64 %753 to i32*
  %755 = load i32, i32* %754
  %756 = add i64 %744, -24
  %757 = inttoptr i64 %756 to i64*
  %758 = load i64, i64* %757
  %759 = add i64 %744, -52
  %760 = inttoptr i64 %759 to i32*
  %761 = load i32, i32* %760
  %762 = sext i32 %761 to i64
  %763 = shl nsw i64 %762, 3
  %764 = add i64 %763, %758
  %765 = inttoptr i64 %745 to i32*
  %766 = load i32, i32* %765
  %767 = sext i32 %766 to i64
  %768 = shl nsw i64 %767, 2
  %769 = add i64 %768, %764
  %770 = inttoptr i64 %769 to i32*
  store i32 %755, i32* %770
  %771 = load i64, i64* %16, align 8
  %772 = add i64 %771, -32
  %773 = inttoptr i64 %772 to i64*
  %774 = load i64, i64* %773
  %775 = add i64 %771, -52
  %776 = inttoptr i64 %775 to i32*
  %777 = load i32, i32* %776
  %778 = add i32 %777, 1
  %779 = sext i32 %778 to i64
  %780 = shl nsw i64 %779, 3
  %781 = add i64 %780, %774
  %782 = load i64, i64* %16, align 8
  %783 = add i64 %782, -40
  %784 = inttoptr i64 %783 to i32*
  %785 = load i32, i32* %784
  %786 = sext i32 %785 to i64
  %787 = shl nsw i64 %786, 2
  %788 = add i64 %787, %781
  %789 = inttoptr i64 %788 to i32*
  %790 = load i32, i32* %789
  %791 = add i64 %782, -56
  %792 = inttoptr i64 %791 to i32*
  store i32 %790, i32* %792
  %793 = add i64 %782, -32
  %794 = inttoptr i64 %793 to i64*
  %795 = load i64, i64* %794
  %796 = add i64 %782, -52
  %797 = inttoptr i64 %796 to i32*
  %798 = load i32, i32* %797
  %799 = sext i32 %798 to i64
  %800 = shl nsw i64 %799, 3
  %801 = add i64 %800, %795
  %802 = inttoptr i64 %783 to i32*
  %803 = load i32, i32* %802
  %804 = sext i32 %803 to i64
  %805 = shl nsw i64 %804, 2
  %806 = add i64 %805, %801
  %807 = inttoptr i64 %806 to i32*
  %808 = load i32, i32* %807
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %11, align 8, !tbaa !1240
  %810 = load i64, i64* %16, align 8
  %811 = add i64 %810, -32
  %812 = inttoptr i64 %811 to i64*
  %813 = load i64, i64* %812
  %814 = add i64 %810, -52
  %815 = inttoptr i64 %814 to i32*
  %816 = load i32, i32* %815
  %817 = add i32 %816, 1
  %818 = zext i32 %817 to i64
  store i64 %818, i64* %13, align 8, !tbaa !1240
  %819 = sext i32 %817 to i64
  %820 = shl nsw i64 %819, 3
  %821 = add i64 %820, %813
  %822 = load i64, i64* %16, align 8
  %823 = add i64 %822, -40
  %824 = inttoptr i64 %823 to i32*
  %825 = load i32, i32* %824
  %826 = sext i32 %825 to i64
  %827 = shl nsw i64 %826, 2
  %828 = add i64 %827, %821
  %829 = load i32, i32* %5, align 4
  %830 = inttoptr i64 %828 to i32*
  store i32 %829, i32* %830
  %831 = add i64 %822, -56
  %832 = inttoptr i64 %831 to i32*
  %833 = load i32, i32* %832
  %834 = add i64 %822, -32
  %835 = inttoptr i64 %834 to i64*
  %836 = load i64, i64* %835
  %837 = add i64 %822, -52
  %838 = inttoptr i64 %837 to i32*
  %839 = load i32, i32* %838
  %840 = sext i32 %839 to i64
  %841 = shl nsw i64 %840, 3
  %842 = add i64 %841, %836
  %843 = inttoptr i64 %823 to i32*
  %844 = load i32, i32* %843
  %845 = sext i32 %844 to i64
  store i64 %845, i64* %12, align 8, !tbaa !1240
  %846 = shl nsw i64 %845, 2
  %847 = add i64 %846, %842
  %848 = inttoptr i64 %847 to i32*
  store i32 %833, i32* %848
  %849 = load i64, i64* %16, align 8
  %850 = add i64 %849, -52
  %851 = inttoptr i64 %850 to i32*
  %852 = load i32, i32* %851
  %853 = add i32 %852, 1
  %854 = inttoptr i64 %850 to i32*
  store i32 %853, i32* %854
  %855 = add i64 %459, -80
  br label %block_406f6e

block_406d5e:                                     ; preds = %block_406d4d
  %856 = add i64 %461, -8
  %857 = inttoptr i64 %856 to i64*
  %858 = load i64, i64* %857
  %859 = sext i32 %465 to i64
  %860 = shl nsw i64 %859, 4
  %861 = add i64 %860, %858
  %862 = lshr i64 %858, 63
  %863 = add i64 %461, -40
  %864 = inttoptr i64 %863 to i32*
  %865 = load i32, i32* %864
  %866 = sext i32 %865 to i64
  %867 = shl nsw i64 %866, 3
  %868 = add i64 %867, %861
  %869 = inttoptr i64 %868 to double*
  %870 = load double, double* %869
  store double %870, double* %55, align 1, !tbaa !1244
  store double 0.000000e+00, double* %57, align 1, !tbaa !1244
  %871 = add i32 %465, 1
  %872 = zext i32 %871 to i64
  store i64 %872, i64* %12, align 8, !tbaa !1240
  %873 = sext i32 %871 to i64
  %874 = shl nsw i64 %873, 4
  %875 = add i64 %874, %858
  store i64 %875, i64* %10, align 8, !tbaa !1240
  %876 = icmp ult i64 %875, %858
  %877 = icmp ult i64 %875, %874
  %878 = or i1 %876, %877
  %879 = zext i1 %878 to i8
  store i8 %879, i8* %43, align 1, !tbaa !1246
  %880 = trunc i64 %875 to i32
  %881 = and i32 %880, 255
  %882 = tail call i32 @llvm.ctpop.i32(i32 %881) #11
  %883 = trunc i32 %882 to i8
  %884 = and i8 %883, 1
  %885 = xor i8 %884, 1
  store i8 %885, i8* %44, align 1, !tbaa !1260
  %886 = xor i64 %874, %858
  %887 = xor i64 %886, %875
  %888 = lshr i64 %887, 4
  %889 = trunc i64 %888 to i8
  %890 = and i8 %889, 1
  store i8 %890, i8* %45, align 1, !tbaa !1261
  %891 = icmp eq i64 %875, 0
  %892 = zext i1 %891 to i8
  store i8 %892, i8* %47, align 1, !tbaa !1262
  %893 = lshr i64 %875, 63
  %894 = trunc i64 %893 to i8
  store i8 %894, i8* %48, align 1, !tbaa !1263
  %895 = lshr i64 %873, 59
  %896 = and i64 %895, 1
  %897 = xor i64 %893, %862
  %898 = xor i64 %893, %896
  %899 = add nuw nsw i64 %897, %898
  %900 = icmp eq i64 %899, 2
  %901 = zext i1 %900 to i8
  store i8 %901, i8* %49, align 1, !tbaa !1264
  %902 = load i64, i64* %16, align 8
  %903 = add i64 %902, -40
  %904 = inttoptr i64 %903 to i32*
  %905 = load i32, i32* %904
  %906 = sext i32 %905 to i64
  store i64 %906, i64* %11, align 8, !tbaa !1240
  %907 = shl nsw i64 %906, 3
  %908 = add i64 %907, %875
  %909 = add i64 %499, 53
  store i64 %909, i64* %3, align 8
  %910 = load double, double* %55, align 1
  %911 = inttoptr i64 %908 to double*
  %912 = load double, double* %911
  %913 = fcmp uno double %910, %912
  br i1 %913, label %914, label %927

; <label>:914:                                    ; preds = %block_406d5e
  %915 = fadd double %910, %912
  %916 = bitcast double %915 to i64
  %917 = and i64 %916, 9221120237041090560
  %918 = icmp eq i64 %917, 9218868437227405312
  %919 = and i64 %916, 2251799813685247
  %920 = icmp ne i64 %919, 0
  %921 = and i1 %918, %920
  br i1 %921, label %922, label %933

; <label>:922:                                    ; preds = %914
  %923 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %909, %struct.Memory* %462) #14
  %924 = load i64, i64* %3, align 8
  %925 = load i8, i8* %43, align 1, !tbaa !1246
  %926 = load i8, i8* %47, align 1, !tbaa !1262
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:927:                                    ; preds = %block_406d5e
  %928 = fcmp ogt double %910, %912
  br i1 %928, label %933, label %929

; <label>:929:                                    ; preds = %927
  %930 = fcmp olt double %910, %912
  br i1 %930, label %933, label %931

; <label>:931:                                    ; preds = %929
  %932 = fcmp oeq double %910, %912
  br i1 %932, label %933, label %937

; <label>:933:                                    ; preds = %931, %929, %927, %914
  %934 = phi i8 [ 0, %927 ], [ 0, %929 ], [ 1, %931 ], [ 1, %914 ]
  %935 = phi i8 [ 0, %927 ], [ 0, %929 ], [ 0, %931 ], [ 1, %914 ]
  %936 = phi i8 [ 0, %927 ], [ 1, %929 ], [ 0, %931 ], [ 1, %914 ]
  store i8 %934, i8* %47, align 1, !tbaa !1494
  store i8 %935, i8* %44, align 1, !tbaa !1494
  store i8 %936, i8* %43, align 1, !tbaa !1494
  br label %937

; <label>:937:                                    ; preds = %933, %931
  %938 = phi i8 [ %934, %933 ], [ %892, %931 ]
  %939 = phi i8 [ %936, %933 ], [ %879, %931 ]
  store i8 0, i8* %49, align 1, !tbaa !1494
  store i8 0, i8* %48, align 1, !tbaa !1494
  store i8 0, i8* %45, align 1, !tbaa !1494
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %937, %922
  %940 = phi i8 [ %926, %922 ], [ %938, %937 ]
  %941 = phi i8 [ %925, %922 ], [ %939, %937 ]
  %942 = phi i64 [ %924, %922 ], [ %909, %937 ]
  %943 = phi %struct.Memory* [ %923, %922 ], [ %462, %937 ]
  %944 = or i8 %940, %941
  %945 = icmp ne i8 %944, 0
  %946 = select i1 %945, i64 439, i64 6
  %947 = add i64 %942, %946
  br i1 %945, label %block_40718c.loopexit, label %block_406d99
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4006a0__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4006a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_608ff0__got_type* @seg_608ff0__got to i64), i64 8) to i64*)
  store i64 %14, i64* %4, align 8, !tbaa !1240
  store i8 0, i8* %8, align 1, !tbaa !1246
  %15 = trunc i64 %14 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* %9, align 1, !tbaa !1260
  %21 = icmp eq i64 %14, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %11, align 1, !tbaa !1262
  %23 = lshr i64 %14, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %12, align 1, !tbaa !1263
  store i8 0, i8* %13, align 1, !tbaa !1264
  store i8 0, i8* %10, align 1, !tbaa !1261
  %25 = select i1 %21, i64 18, i64 16
  %26 = add i64 %25, %1
  br i1 %21, label %block_4006b2, label %block_4006b0

block_4006b2:                                     ; preds = %block_4006b0, %block_4006a0
  %27 = phi i64 [ %7, %block_4006a0 ], [ %58, %block_4006b0 ]
  %28 = phi %struct.Memory* [ %2, %block_4006a0 ], [ %57, %block_4006b0 ]
  %29 = add i64 %27, 8
  %30 = icmp ugt i64 %27, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %8, align 1, !tbaa !1246
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #11
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %9, align 1, !tbaa !1260
  %38 = xor i64 %29, %27
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %10, align 1, !tbaa !1261
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %11, align 1, !tbaa !1262
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %12, align 1, !tbaa !1263
  %46 = lshr i64 %27, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %13, align 1, !tbaa !1264
  %51 = inttoptr i64 %29 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %3, align 8, !tbaa !1240
  %53 = add i64 %27, 16
  store i64 %53, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %28

block_4006b0:                                     ; preds = %block_4006a0
  %54 = add i64 %26, 2
  %55 = add i64 %6, -16
  %56 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %56
  store i64 %55, i64* %5, align 8, !tbaa !1240
  store i64 %14, i64* %3, align 8, !tbaa !1240
  %57 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %14, %struct.Memory* %2)
  %58 = load i64, i64* %5, align 8
  br label %block_4006b2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400c50_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400c50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, 48
  %24 = add i64 %1, 16
  %25 = add i64 %11, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_400c80_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -4
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30
  %32 = sext i32 %31 to i64
  store i64 %32, i64* %6, align 8, !tbaa !1240
  %33 = shl nsw i64 %32, 3
  %34 = add i64 %33, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 528)
  %35 = bitcast %union.VectorReg* %9 to double*
  %36 = load double, double* %35, align 1
  %37 = inttoptr i64 %34 to double*
  store double %36, double* %37
  %38 = load i64, i64* %7, align 8
  %39 = add i64 %38, 16
  %40 = icmp ugt i64 %38, -17
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %14, align 1, !tbaa !1246
  %42 = trunc i64 %39 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #11
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %15, align 1, !tbaa !1260
  %48 = xor i64 %38, 16
  %49 = xor i64 %48, %39
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  store i8 %52, i8* %16, align 1, !tbaa !1261
  %53 = icmp eq i64 %39, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1262
  %55 = lshr i64 %39, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %18, align 1, !tbaa !1263
  %57 = lshr i64 %38, 63
  %58 = xor i64 %55, %57
  %59 = add nuw nsw i64 %58, %55
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %19, align 1, !tbaa !1264
  %62 = add i64 %38, 24
  %63 = inttoptr i64 %39 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %8, align 8, !tbaa !1240
  %65 = inttoptr i64 %62 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %3, align 8, !tbaa !1240
  %67 = add i64 %38, 32
  store i64 %67, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline
define %struct.Memory* @sub_403e90_rprj3(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403e90:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %15 = bitcast %union.anon* %14 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %17 = bitcast %union.anon* %16 to i32*
  %18 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %20 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %21 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %22 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %34 = load i64, i64* %25, align 8
  %35 = load i64, i64* %24, align 8, !tbaa !1240
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %34, i64* %37
  store i64 %36, i64* %25, align 8, !tbaa !1240
  %38 = load i64, i64* %28, align 8
  %39 = add i64 %35, -16
  %40 = inttoptr i64 %39 to i64*
  store i64 %38, i64* %40
  %41 = load i64, i64* %27, align 8
  %42 = add i64 %35, -24
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43
  %44 = load i64, i64* %19, align 8
  %45 = add i64 %35, -32
  %46 = inttoptr i64 %45 to i64*
  store i64 %44, i64* %46
  %47 = add i64 %35, -4360
  store i64 %47, i64* %24, align 8, !tbaa !1240
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %54 = add i64 %35, 24
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55
  %57 = zext i32 %56 to i64
  store i64 %57, i64* %18, align 8, !tbaa !1240
  %58 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %59 = add i64 %35, 16
  %60 = inttoptr i64 %59 to i32*
  %61 = load i32, i32* %60
  %62 = zext i32 %61 to i64
  store i64 %62, i64* %58, align 8, !tbaa !1240
  %63 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %64 = add i64 %35, 8
  %65 = inttoptr i64 %64 to i32*
  %66 = load i32, i32* %65
  %67 = zext i32 %66 to i64
  store i64 %67, i64* %63, align 8, !tbaa !1240
  %68 = add i64 %35, -40
  %69 = load i64, i64* %23, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %70
  %71 = add i64 %35, -44
  %72 = load i32, i32* %11, align 4
  %73 = inttoptr i64 %71 to i32*
  store i32 %72, i32* %73
  %74 = add i64 %35, -48
  %75 = load i32, i32* %9, align 4
  %76 = inttoptr i64 %74 to i32*
  store i32 %75, i32* %76
  %77 = add i64 %35, -52
  %78 = load i32, i32* %7, align 4
  %79 = inttoptr i64 %77 to i32*
  store i32 %78, i32* %79
  %80 = add i64 %35, -64
  %81 = load i64, i64* %26, align 8
  %82 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %82
  %83 = add i64 %35, -68
  %84 = load i32, i32* %13, align 4
  %85 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %85
  %86 = load i64, i64* %25, align 8
  %87 = add i64 %86, -40
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88
  %90 = zext i32 %89 to i64
  %91 = add i64 %86, -36
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %26, align 8, !tbaa !1240
  %95 = add i64 %86, -32
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96
  %98 = add i64 %86, -72
  %99 = inttoptr i64 %98 to i64*
  store i64 %97, i64* %99
  %100 = add i64 %86, 16
  %101 = inttoptr i64 %100 to i32*
  %102 = load i32, i32* %101
  %103 = zext i32 %102 to i64
  store i64 %103, i64* %19, align 8, !tbaa !1240
  %104 = add i64 %86, -60
  %105 = inttoptr i64 %104 to i32*
  %106 = load i32, i32* %105
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %27, align 8, !tbaa !1240
  %108 = add i64 %86, -56
  %109 = inttoptr i64 %108 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %28, align 8, !tbaa !1240
  %111 = add i64 %86, -80
  %112 = inttoptr i64 %111 to i64*
  store i64 %110, i64* %112
  %113 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %114 = icmp eq i32 %113, 0
  %115 = add i64 %86, -4292
  %116 = load i32, i32* %17, align 4
  %117 = inttoptr i64 %115 to i32*
  store i32 %116, i32* %117
  %118 = add i64 %86, -4296
  %119 = load i32, i32* %15, align 4
  %120 = inttoptr i64 %118 to i32*
  store i32 %119, i32* %120
  %121 = add i64 %86, -4300
  %122 = load i32, i32* %5, align 4
  %123 = inttoptr i64 %121 to i32*
  store i32 %122, i32* %123
  %124 = add i64 %86, -4312
  %125 = inttoptr i64 %124 to i64*
  store i64 %90, i64* %125
  %126 = add i64 %86, -4320
  %127 = inttoptr i64 %126 to i64*
  store i64 %94, i64* %127
  %128 = load i64, i64* %25, align 8
  %129 = add i64 %128, -4328
  %130 = inttoptr i64 %129 to i64*
  store i64 %103, i64* %130
  %131 = add i64 %128, -4336
  %132 = inttoptr i64 %131 to i64*
  store i64 %107, i64* %132
  %133 = select i1 %114, i64 158, i64 148
  %134 = add i64 %133, %1
  br i1 %114, label %block_403f2e, label %block_403f24

block_403f7e:                                     ; preds = %block_403f68
  %135 = inttoptr i64 %154 to i32*
  store i32 1, i32* %135
  br label %block_403f85

block_4041fd:                                     ; preds = %block_403fd4
  %136 = add i64 %301, 7
  %137 = inttoptr i64 %698 to i32*
  store i32 1, i32* %137
  br label %block_404204

block_403f72:                                     ; preds = %block_403f68
  %138 = inttoptr i64 %154 to i32*
  store i32 2, i32* %138
  %139 = add i64 %153, 19
  br label %block_403f85

block_4045f0:                                     ; preds = %block_403fb0
  %140 = inttoptr i64 %690 to i32*
  %141 = load i32, i32* %140
  %142 = add i32 %141, 1
  %143 = inttoptr i64 %690 to i32*
  store i32 %142, i32* %143
  %144 = add i64 %339, -1636
  br label %block_403f8c

block_403f68:                                     ; preds = %block_403f55, %block_403f61
  %145 = phi i64 [ %312, %block_403f61 ], [ %647, %block_403f55 ]
  %146 = phi %struct.Memory* [ %303, %block_403f61 ], [ %303, %block_403f55 ]
  %147 = add i64 %341, -44
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148
  %150 = add i32 %149, -3
  %151 = icmp eq i32 %150, 0
  %152 = select i1 %151, i64 10, i64 22
  %153 = add i64 %145, %152
  %154 = add i64 %341, -116
  %155 = add i64 %153, 7
  br i1 %151, label %block_403f72, label %block_403f7e

block_403f61:                                     ; preds = %block_403f4b
  %156 = inttoptr i64 %311 to i32*
  store i32 1, i32* %156
  br label %block_403f68

block_403fe0:                                     ; preds = %block_403fd4
  %157 = shl i32 %287, 1
  %158 = inttoptr i64 %350 to i32*
  %159 = load i32, i32* %158
  %160 = sub i32 %157, %159
  %161 = inttoptr i64 %700 to i32*
  store i32 %160, i32* %161
  %162 = inttoptr i64 %701 to i64*
  %163 = load i64, i64* %162
  %164 = inttoptr i64 %694 to i32*
  %165 = load i32, i32* %164
  %166 = add i32 %165, 1
  %167 = sext i32 %166 to i64
  %168 = inttoptr i64 %702 to i64*
  %169 = load i64, i64* %168
  %170 = inttoptr i64 %703 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %23, align 8, !tbaa !1240
  %172 = mul i64 %171, %169
  %173 = mul i64 %172, %167
  %174 = shl i64 %173, 3
  %175 = add i64 %174, %163
  %176 = inttoptr i64 %697 to i32*
  %177 = load i32, i32* %176
  %178 = sext i32 %177 to i64
  %179 = mul i64 %171, %178
  %180 = shl i64 %179, 3
  %181 = add i64 %180, %175
  %182 = inttoptr i64 %700 to i32*
  %183 = load i32, i32* %182
  %184 = sext i32 %183 to i64
  %185 = shl nsw i64 %184, 3
  %186 = add i64 %185, %181
  %187 = inttoptr i64 %186 to double*
  %188 = load double, double* %187
  %189 = add i32 %177, 2
  %190 = sext i32 %189 to i64
  %191 = mul i64 %171, %190
  %192 = shl i64 %191, 3
  %193 = add i64 %192, %175
  %194 = add i64 %185, %193
  %195 = inttoptr i64 %194 to double*
  %196 = load double, double* %195
  %197 = fadd double %188, %196
  %198 = sext i32 %165 to i64
  %199 = mul i64 %172, %198
  %200 = shl i64 %199, 3
  %201 = add i64 %200, %163
  %202 = add i32 %177, 1
  %203 = sext i32 %202 to i64
  %204 = mul i64 %171, %203
  %205 = shl i64 %204, 3
  %206 = add i64 %205, %201
  %207 = add i64 %185, %206
  %208 = inttoptr i64 %207 to double*
  %209 = load double, double* %208
  %210 = fadd double %197, %209
  %211 = add i32 %165, 2
  %212 = sext i32 %211 to i64
  %213 = mul i64 %172, %212
  %214 = shl i64 %213, 3
  %215 = add i64 %214, %163
  %216 = add i64 %205, %215
  %217 = add i64 %185, %216
  %218 = inttoptr i64 %217 to double*
  %219 = load double, double* %218
  %220 = fadd double %210, %219
  %221 = add i64 %707, %185
  %222 = inttoptr i64 %221 to double*
  store double %220, double* %222
  %223 = inttoptr i64 %701 to i64*
  %224 = load i64, i64* %223
  %225 = inttoptr i64 %694 to i32*
  %226 = load i32, i32* %225
  %227 = sext i32 %226 to i64
  %228 = inttoptr i64 %702 to i64*
  %229 = load i64, i64* %228
  %230 = load i64, i64* %23, align 8
  %231 = mul i64 %230, %229
  %232 = mul i64 %231, %227
  %233 = shl i64 %232, 3
  %234 = add i64 %233, %224
  %235 = inttoptr i64 %697 to i32*
  %236 = load i32, i32* %235
  %237 = sext i32 %236 to i64
  %238 = mul i64 %230, %237
  %239 = shl i64 %238, 3
  %240 = add i64 %239, %234
  %241 = inttoptr i64 %700 to i32*
  %242 = load i32, i32* %241
  %243 = sext i32 %242 to i64
  %244 = shl nsw i64 %243, 3
  %245 = add i64 %244, %240
  %246 = inttoptr i64 %245 to double*
  %247 = load double, double* %246
  %248 = add i32 %226, 2
  %249 = sext i32 %248 to i64
  %250 = mul i64 %231, %249
  %251 = shl i64 %250, 3
  %252 = add i64 %251, %224
  %253 = add i64 %239, %252
  %254 = add i64 %244, %253
  %255 = inttoptr i64 %254 to double*
  %256 = load double, double* %255
  %257 = fadd double %247, %256
  %258 = add i32 %236, 2
  %259 = sext i32 %258 to i64
  %260 = mul i64 %230, %259
  %261 = shl i64 %260, 3
  %262 = add i64 %261, %234
  %263 = add i64 %244, %262
  %264 = inttoptr i64 %263 to double*
  %265 = load double, double* %264
  %266 = fadd double %257, %265
  %267 = add i64 %261, %252
  store i64 %243, i64* %21, align 8, !tbaa !1240
  %268 = add i64 %244, %267
  %269 = inttoptr i64 %268 to double*
  %270 = load double, double* %269
  %271 = fadd double %266, %270
  store double %271, double* %704, align 1, !tbaa !1244
  store i64 0, i64* %705, align 1, !tbaa !1244
  %272 = add i64 %708, %244
  %273 = inttoptr i64 %272 to double*
  store double %271, double* %273
  %274 = inttoptr i64 %698 to i32*
  %275 = load i32, i32* %274
  %276 = add i32 %275, 1
  %277 = inttoptr i64 %698 to i32*
  store i32 %276, i32* %277
  %278 = add i64 %301, -12
  br label %block_403fd4

block_4045dd:                                     ; preds = %block_404204
  %279 = inttoptr i64 %695 to i32*
  %280 = load i32, i32* %279
  %281 = add i32 %280, 1
  %282 = inttoptr i64 %695 to i32*
  store i32 %281, i32* %282
  %283 = add i64 %803, -1581
  br label %block_403fb0

block_403fd4:                                     ; preds = %block_403fc1, %block_403fe0
  %284 = phi i64 [ %319, %block_403fc1 ], [ %278, %block_403fe0 ]
  %285 = phi %struct.Memory* [ %322, %block_403fc1 ], [ %285, %block_403fe0 ]
  %286 = inttoptr i64 %698 to i32*
  %287 = load i32, i32* %286
  %288 = inttoptr i64 %699 to i32*
  %289 = load i32, i32* %288
  %290 = sub i32 %287, %289
  %291 = lshr i32 %290, 31
  %292 = lshr i32 %287, 31
  %293 = lshr i32 %289, 31
  %294 = xor i32 %293, %292
  %295 = xor i32 %291, %292
  %296 = add nuw nsw i32 %295, %294
  %297 = icmp eq i32 %296, 2
  %298 = icmp ne i32 %291, 0
  %299 = xor i1 %298, %297
  %300 = select i1 %299, i64 12, i64 553
  %301 = add i64 %284, %300
  br i1 %299, label %block_403fe0, label %block_4041fd

block_403f4b:                                     ; preds = %block_403f38, %block_403f44
  %302 = phi i64 [ %351, %block_403f44 ], [ %838, %block_403f38 ]
  %303 = phi %struct.Memory* [ %342, %block_403f44 ], [ %342, %block_403f38 ]
  %304 = add i64 %341, -40
  %305 = inttoptr i64 %304 to i32*
  %306 = load i32, i32* %305
  %307 = add i32 %306, -3
  %308 = icmp eq i32 %307, 0
  %309 = select i1 %308, i64 10, i64 22
  %310 = add i64 %302, %309
  %311 = add i64 %341, -112
  %312 = add i64 %310, 7
  br i1 %308, label %block_403f55, label %block_403f61

block_403f44:                                     ; preds = %block_403f2e
  %313 = inttoptr i64 %350 to i32*
  store i32 1, i32* %313
  br label %block_403f4b

block_403fc1:                                     ; preds = %block_403fb0
  %314 = shl i32 %324, 1
  %315 = inttoptr i64 %311 to i32*
  %316 = load i32, i32* %315
  %317 = sub i32 %314, %316
  %318 = inttoptr i64 %697 to i32*
  store i32 %317, i32* %318
  %319 = add i64 %339, 19
  %320 = inttoptr i64 %698 to i32*
  store i32 1, i32* %320
  br label %block_403fd4

block_403fb0:                                     ; preds = %block_403f9d, %block_4045dd
  %321 = phi i64 [ %357, %block_403f9d ], [ %283, %block_4045dd ]
  %322 = phi %struct.Memory* [ %670, %block_403f9d ], [ %786, %block_4045dd ]
  %323 = inttoptr i64 %695 to i32*
  %324 = load i32, i32* %323
  %325 = inttoptr i64 %696 to i32*
  %326 = load i32, i32* %325
  %327 = add i32 %326, -1
  %328 = sub i32 %324, %327
  %329 = lshr i32 %328, 31
  %330 = lshr i32 %324, 31
  %331 = lshr i32 %327, 31
  %332 = xor i32 %331, %330
  %333 = xor i32 %329, %330
  %334 = add nuw nsw i32 %333, %332
  %335 = icmp eq i32 %334, 2
  %336 = icmp ne i32 %329, 0
  %337 = xor i1 %336, %335
  %338 = select i1 %337, i64 17, i64 1600
  %339 = add i64 %321, %338
  br i1 %337, label %block_403fc1, label %block_4045f0

block_403f2e:                                     ; preds = %block_403f24, %block_403e90
  %340 = phi i64 [ %134, %block_403e90 ], [ %645, %block_403f24 ]
  %341 = phi i64 [ %128, %block_403e90 ], [ %644, %block_403f24 ]
  %342 = phi %struct.Memory* [ %2, %block_403e90 ], [ %643, %block_403f24 ]
  %343 = add i64 %341, -36
  %344 = inttoptr i64 %343 to i32*
  %345 = load i32, i32* %344
  %346 = add i32 %345, -3
  %347 = icmp eq i32 %346, 0
  %348 = select i1 %347, i64 10, i64 22
  %349 = add i64 %340, %348
  %350 = add i64 %341, -108
  %351 = add i64 %349, 7
  br i1 %347, label %block_403f38, label %block_403f44

block_403f9d:                                     ; preds = %block_403f8c
  %352 = shl i32 %672, 1
  %353 = inttoptr i64 %154 to i32*
  %354 = load i32, i32* %353
  %355 = sub i32 %352, %354
  %356 = inttoptr i64 %694 to i32*
  store i32 %355, i32* %356
  %357 = add i64 %687, 19
  %358 = inttoptr i64 %695 to i32*
  store i32 1, i32* %358
  br label %block_403fb0

block_40461b:                                     ; preds = %block_404603, %block_404611
  %359 = phi i64 [ %842, %block_404603 ], [ %637, %block_404611 ]
  %360 = phi %struct.Memory* [ %670, %block_404603 ], [ %636, %block_404611 ]
  %361 = load i64, i64* %25, align 8
  %362 = add i64 %361, 32
  %363 = inttoptr i64 %362 to i32*
  %364 = load i32, i32* %363
  %365 = add i32 %364, -1
  %366 = add i64 %361, -120
  %367 = inttoptr i64 %366 to i32*
  store i32 %365, i32* %367
  %368 = add i64 %361, -80
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = add i64 %361, -60
  %372 = inttoptr i64 %371 to i32*
  %373 = load i32, i32* %372
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %22, align 8, !tbaa !1240
  %375 = add i64 %361, 16
  %376 = inttoptr i64 %375 to i32*
  %377 = load i32, i32* %376
  %378 = zext i32 %377 to i64
  store i64 %378, i64* %21, align 8, !tbaa !1240
  %379 = add i64 %361, 24
  %380 = inttoptr i64 %379 to i32*
  %381 = load i32, i32* %380
  %382 = zext i32 %381 to i64
  %383 = inttoptr i64 %366 to i32*
  %384 = load i32, i32* %383
  %385 = zext i32 %384 to i64
  store i64 %385, i64* %26, align 8, !tbaa !1240
  store i64 %370, i64* %23, align 8, !tbaa !1240
  store i64 %382, i64* %20, align 8, !tbaa !1240
  %386 = add i64 %359, 8261
  %387 = add i64 %359, 36
  %388 = load i64, i64* %24, align 8, !tbaa !1240
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %387, i64* %390
  store i64 %389, i64* %24, align 8, !tbaa !1240
  %391 = tail call %struct.Memory* @sub_406660_comm3(%struct.State* nonnull %0, i64 %386, %struct.Memory* %360)
  %392 = load i64, i64* %3, align 8
  %393 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1200) to i32*)
  %394 = add i32 %393, -1
  %395 = lshr i32 %394, 31
  %396 = trunc i32 %395 to i8
  %397 = lshr i32 %393, 31
  %398 = xor i32 %395, %397
  %399 = add nuw nsw i32 %398, %397
  %400 = icmp eq i32 %399, 2
  %401 = icmp ne i8 %396, 0
  %402 = xor i1 %401, %400
  %403 = select i1 %402, i64 64, i64 14
  %404 = add i64 %392, %403
  br i1 %402, label %block_40467f, label %block_40464d

block_404215:                                     ; preds = %block_404204
  %405 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1016) to double*)
  store double %405, double* %704, align 1, !tbaa !1244
  store double 0.000000e+00, double* %706, align 1, !tbaa !1244
  %406 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1024) to double*)
  store double %406, double* %709, align 1, !tbaa !1244
  store double 0.000000e+00, double* %711, align 1, !tbaa !1244
  %407 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1032) to double*)
  store double %407, double* %712, align 1, !tbaa !1244
  store double 0.000000e+00, double* %714, align 1, !tbaa !1244
  %408 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1040) to double*)
  store double %408, double* %715, align 1, !tbaa !1244
  store double 0.000000e+00, double* %717, align 1, !tbaa !1244
  %409 = shl i32 %788, 1
  %410 = inttoptr i64 %350 to i32*
  %411 = load i32, i32* %410
  %412 = sub i32 %409, %411
  %413 = inttoptr i64 %700 to i32*
  store i32 %412, i32* %413
  %414 = inttoptr i64 %701 to i64*
  %415 = load i64, i64* %414
  %416 = inttoptr i64 %694 to i32*
  %417 = load i32, i32* %416
  %418 = sext i32 %417 to i64
  %419 = inttoptr i64 %702 to i64*
  %420 = load i64, i64* %419
  %421 = inttoptr i64 %703 to i64*
  %422 = load i64, i64* %421
  store i64 %422, i64* %23, align 8, !tbaa !1240
  %423 = mul i64 %422, %420
  %424 = mul i64 %423, %418
  %425 = shl i64 %424, 3
  %426 = add i64 %425, %415
  %427 = inttoptr i64 %697 to i32*
  %428 = load i32, i32* %427
  %429 = sext i32 %428 to i64
  %430 = mul i64 %422, %429
  %431 = shl i64 %430, 3
  %432 = add i64 %431, %426
  %433 = inttoptr i64 %700 to i32*
  %434 = load i32, i32* %433
  %435 = add i32 %434, 1
  %436 = sext i32 %435 to i64
  %437 = shl nsw i64 %436, 3
  %438 = add i64 %432, %437
  %439 = inttoptr i64 %438 to double*
  %440 = load double, double* %439
  %441 = add i32 %417, 2
  %442 = sext i32 %441 to i64
  %443 = mul i64 %423, %442
  %444 = shl i64 %443, 3
  %445 = add i64 %444, %415
  %446 = add i64 %431, %445
  %447 = add i64 %446, %437
  %448 = inttoptr i64 %447 to double*
  %449 = load double, double* %448
  %450 = fadd double %440, %449
  %451 = add i32 %428, 2
  %452 = sext i32 %451 to i64
  %453 = mul i64 %422, %452
  %454 = shl i64 %453, 3
  %455 = add i64 %454, %426
  %456 = add i64 %455, %437
  %457 = inttoptr i64 %456 to double*
  %458 = load double, double* %457
  %459 = fadd double %450, %458
  %460 = add i64 %454, %445
  %461 = add i64 %460, %437
  %462 = inttoptr i64 %461 to double*
  %463 = load double, double* %462
  %464 = fadd double %459, %463
  %465 = inttoptr i64 %720 to double*
  store double %464, double* %465
  %466 = inttoptr i64 %701 to i64*
  %467 = load i64, i64* %466
  %468 = inttoptr i64 %694 to i32*
  %469 = load i32, i32* %468
  %470 = add i32 %469, 1
  %471 = sext i32 %470 to i64
  %472 = inttoptr i64 %702 to i64*
  %473 = load i64, i64* %472
  %474 = load i64, i64* %23, align 8
  %475 = mul i64 %474, %473
  %476 = mul i64 %475, %471
  %477 = shl i64 %476, 3
  %478 = add i64 %477, %467
  %479 = inttoptr i64 %697 to i32*
  %480 = load i32, i32* %479
  %481 = sext i32 %480 to i64
  %482 = mul i64 %474, %481
  %483 = shl i64 %482, 3
  %484 = add i64 %483, %478
  %485 = inttoptr i64 %700 to i32*
  %486 = load i32, i32* %485
  %487 = add i32 %486, 1
  %488 = sext i32 %487 to i64
  %489 = shl nsw i64 %488, 3
  %490 = add i64 %484, %489
  %491 = inttoptr i64 %490 to double*
  %492 = load double, double* %491
  %493 = add i32 %480, 2
  %494 = sext i32 %493 to i64
  %495 = mul i64 %474, %494
  %496 = shl i64 %495, 3
  %497 = add i64 %496, %478
  %498 = add i64 %497, %489
  %499 = inttoptr i64 %498 to double*
  %500 = load double, double* %499
  %501 = fadd double %492, %500
  %502 = sext i32 %469 to i64
  %503 = mul i64 %475, %502
  %504 = shl i64 %503, 3
  %505 = add i64 %504, %467
  %506 = add i32 %480, 1
  %507 = sext i32 %506 to i64
  %508 = mul i64 %474, %507
  %509 = shl i64 %508, 3
  %510 = add i64 %509, %505
  %511 = add i64 %510, %489
  %512 = inttoptr i64 %511 to double*
  %513 = load double, double* %512
  %514 = fadd double %501, %513
  %515 = add i32 %469, 2
  %516 = sext i32 %515 to i64
  %517 = mul i64 %475, %516
  %518 = shl i64 %517, 3
  %519 = add i64 %518, %467
  %520 = load i64, i64* %23, align 8
  %521 = mul i64 %520, %507
  %522 = shl i64 %521, 3
  %523 = add i64 %522, %519
  %524 = add i64 %523, %489
  %525 = inttoptr i64 %524 to double*
  %526 = load double, double* %525
  %527 = fadd double %514, %526
  %528 = inttoptr i64 %721 to double*
  store double %527, double* %528
  %529 = inttoptr i64 %701 to i64*
  %530 = load i64, i64* %529
  %531 = inttoptr i64 %694 to i32*
  %532 = load i32, i32* %531
  %533 = add i32 %532, 1
  %534 = sext i32 %533 to i64
  %535 = inttoptr i64 %702 to i64*
  %536 = load i64, i64* %535
  %537 = mul i64 %520, %536
  %538 = mul i64 %537, %534
  %539 = shl i64 %538, 3
  %540 = add i64 %539, %530
  %541 = inttoptr i64 %697 to i32*
  %542 = load i32, i32* %541
  %543 = add i32 %542, 1
  %544 = sext i32 %543 to i64
  %545 = mul i64 %520, %544
  %546 = shl i64 %545, 3
  %547 = add i64 %546, %540
  %548 = inttoptr i64 %700 to i32*
  %549 = load i32, i32* %548
  %550 = add i32 %549, 1
  %551 = sext i32 %550 to i64
  %552 = shl nsw i64 %551, 3
  %553 = add i64 %547, %552
  %554 = load double, double* %715, align 1
  %555 = inttoptr i64 %553 to double*
  %556 = load double, double* %555
  %557 = fmul double %554, %556
  %558 = sext i32 %549 to i64
  %559 = shl nsw i64 %558, 3
  %560 = add i64 %559, %547
  %561 = inttoptr i64 %560 to double*
  %562 = load double, double* %561
  %563 = add i32 %549, 2
  %564 = sext i32 %563 to i64
  %565 = shl nsw i64 %564, 3
  %566 = add i64 %547, %565
  %567 = inttoptr i64 %566 to double*
  %568 = load double, double* %567
  %569 = fadd double %562, %568
  %570 = inttoptr i64 %721 to double*
  %571 = load double, double* %570
  %572 = fadd double %569, %571
  store double %572, double* %718, align 1, !tbaa !1244
  store i64 0, i64* %719, align 1, !tbaa !1244
  %573 = load double, double* %712, align 1
  %574 = fmul double %573, %572
  %575 = fadd double %557, %574
  %576 = add i64 %707, %559
  %577 = inttoptr i64 %576 to double*
  %578 = load double, double* %577
  %579 = add nsw i64 %565, -2192
  %580 = add i64 %579, %341
  %581 = inttoptr i64 %580 to double*
  %582 = load double, double* %581
  %583 = fadd double %578, %582
  %584 = inttoptr i64 %720 to double*
  %585 = load double, double* %584
  %586 = fadd double %583, %585
  store double %586, double* %712, align 1, !tbaa !1244
  store i64 0, i64* %713, align 1, !tbaa !1244
  %587 = load double, double* %709, align 1
  %588 = fmul double %587, %586
  %589 = fadd double %575, %588
  %590 = add i64 %708, %559
  %591 = inttoptr i64 %590 to double*
  %592 = load double, double* %591
  %593 = add nsw i64 %565, -4272
  %594 = add i64 %593, %341
  %595 = inttoptr i64 %594 to double*
  %596 = load double, double* %595
  %597 = fadd double %592, %596
  store double %597, double* %709, align 1, !tbaa !1244
  store i64 0, i64* %710, align 1, !tbaa !1244
  %598 = load double, double* %704, align 1
  %599 = fmul double %598, %597
  store double %599, double* %704, align 1, !tbaa !1244
  %600 = fadd double %589, %599
  store double %600, double* %715, align 1, !tbaa !1244
  %601 = inttoptr i64 %722 to i64*
  %602 = load i64, i64* %601
  %603 = inttoptr i64 %690 to i32*
  %604 = load i32, i32* %603
  %605 = sext i32 %604 to i64
  %606 = inttoptr i64 %723 to i64*
  %607 = load i64, i64* %606
  %608 = inttoptr i64 %724 to i64*
  %609 = load i64, i64* %608
  store i64 %609, i64* %26, align 8, !tbaa !1240
  %610 = mul i64 %609, %607
  %611 = mul i64 %610, %605
  %612 = shl i64 %611, 3
  %613 = add i64 %612, %602
  %614 = inttoptr i64 %695 to i32*
  %615 = load i32, i32* %614
  %616 = sext i32 %615 to i64
  %617 = mul i64 %609, %616
  %618 = shl i64 %617, 3
  %619 = add i64 %618, %613
  %620 = inttoptr i64 %698 to i32*
  %621 = load i32, i32* %620
  %622 = sext i32 %621 to i64
  store i64 %622, i64* %21, align 8, !tbaa !1240
  %623 = shl nsw i64 %622, 3
  %624 = add i64 %623, %619
  %625 = inttoptr i64 %624 to double*
  store double %600, double* %625
  %626 = inttoptr i64 %698 to i32*
  %627 = load i32, i32* %626
  %628 = add i32 %627, 1
  %629 = inttoptr i64 %698 to i32*
  store i32 %628, i32* %629
  %630 = add i64 %803, -17
  br label %block_404204

block_404611:                                     ; preds = %block_404603
  store i64 6, i64* %23, align 8, !tbaa !1240
  %631 = add i64 %842, -14705
  %632 = add i64 %842, 10
  %633 = load i64, i64* %24, align 8, !tbaa !1240
  %634 = add i64 %633, -8
  %635 = inttoptr i64 %634 to i64*
  store i64 %632, i64* %635
  store i64 %634, i64* %24, align 8, !tbaa !1240
  %636 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %631, %struct.Memory* %670)
  %637 = load i64, i64* %3, align 8
  br label %block_40461b

block_403f24:                                     ; preds = %block_403e90
  store i64 6, i64* %23, align 8, !tbaa !1240
  %638 = add i64 %134, -13012
  %639 = add i64 %134, 10
  %640 = load i64, i64* %24, align 8, !tbaa !1240
  %641 = add i64 %640, -8
  %642 = inttoptr i64 %641 to i64*
  store i64 %639, i64* %642
  store i64 %641, i64* %24, align 8, !tbaa !1240
  %643 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %638, %struct.Memory* %2)
  %644 = load i64, i64* %25, align 8
  %645 = load i64, i64* %3, align 8
  br label %block_403f2e

block_403f55:                                     ; preds = %block_403f4b
  %646 = inttoptr i64 %311 to i32*
  store i32 2, i32* %646
  %647 = add i64 %310, 19
  br label %block_403f68

block_40468f:                                     ; preds = %block_40467f
  %648 = add i64 %729, -80
  %649 = inttoptr i64 %648 to i64*
  %650 = load i64, i64* %649
  %651 = add i64 %729, -60
  %652 = inttoptr i64 %651 to i32*
  %653 = load i32, i32* %652
  %654 = zext i32 %653 to i64
  store i64 %654, i64* %22, align 8, !tbaa !1240
  %655 = add i64 %729, 16
  %656 = inttoptr i64 %655 to i32*
  %657 = load i32, i32* %656
  %658 = zext i32 %657 to i64
  store i64 %658, i64* %21, align 8, !tbaa !1240
  %659 = add i64 %729, 24
  %660 = inttoptr i64 %659 to i32*
  %661 = load i32, i32* %660
  %662 = zext i32 %661 to i64
  store i64 %662, i64* %20, align 8, !tbaa !1240
  store i64 %650, i64* %23, align 8, !tbaa !1240
  %663 = add i64 %745, 9281
  %664 = add i64 %745, 21
  %665 = load i64, i64* %24, align 8, !tbaa !1240
  %666 = add i64 %665, -8
  %667 = inttoptr i64 %666 to i64*
  store i64 %664, i64* %667
  store i64 %666, i64* %24, align 8, !tbaa !1240
  %668 = tail call %struct.Memory* @sub_406ad0_showall(%struct.State* nonnull %0, i64 %663, %struct.Memory* %726)
  br label %block_4046a4

block_403f8c:                                     ; preds = %block_403f85, %block_4045f0
  %669 = phi i64 [ %691, %block_403f85 ], [ %144, %block_4045f0 ]
  %670 = phi %struct.Memory* [ %689, %block_403f85 ], [ %322, %block_4045f0 ]
  %671 = inttoptr i64 %690 to i32*
  %672 = load i32, i32* %671
  %673 = inttoptr i64 %693 to i32*
  %674 = load i32, i32* %673
  %675 = add i32 %674, -1
  %676 = sub i32 %672, %675
  %677 = lshr i32 %676, 31
  %678 = lshr i32 %672, 31
  %679 = lshr i32 %675, 31
  %680 = xor i32 %679, %678
  %681 = xor i32 %677, %678
  %682 = add nuw nsw i32 %681, %680
  %683 = icmp eq i32 %682, 2
  %684 = icmp ne i32 %677, 0
  %685 = xor i1 %684, %683
  %686 = select i1 %685, i64 17, i64 1655
  %687 = add i64 %669, %686
  br i1 %685, label %block_403f9d, label %block_404603

block_403f85:                                     ; preds = %block_403f72, %block_403f7e
  %688 = phi i64 [ %155, %block_403f7e ], [ %139, %block_403f72 ]
  %689 = phi %struct.Memory* [ %146, %block_403f7e ], [ %146, %block_403f72 ]
  %690 = add i64 %341, -84
  %691 = add i64 %688, 7
  %692 = inttoptr i64 %690 to i32*
  store i32 1, i32* %692
  %693 = add i64 %341, 24
  %694 = add i64 %341, -96
  %695 = add i64 %341, -88
  %696 = add i64 %341, 16
  %697 = add i64 %341, -100
  %698 = add i64 %341, -92
  %699 = add i64 %341, -60
  %700 = add i64 %341, -104
  %701 = add i64 %341, -72
  %702 = add i64 %341, -4312
  %703 = add i64 %341, -4320
  %704 = bitcast [32 x %union.VectorReg]* %29 to double*
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %706 = bitcast i64* %705 to double*
  %707 = add i64 %341, -2192
  %708 = add i64 %341, -4272
  %709 = bitcast %union.VectorReg* %30 to double*
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %711 = bitcast i64* %710 to double*
  %712 = bitcast %union.VectorReg* %31 to double*
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %714 = bitcast i64* %713 to double*
  %715 = bitcast %union.VectorReg* %32 to double*
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %717 = bitcast i64* %716 to double*
  %718 = bitcast %union.VectorReg* %33 to double*
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %720 = add i64 %341, -4288
  %721 = add i64 %341, -4280
  %722 = add i64 %341, -80
  %723 = add i64 %341, -4328
  %724 = add i64 %341, -4336
  br label %block_403f8c

block_40467f:                                     ; preds = %block_40464d, %block_40461b
  %725 = phi i64 [ %404, %block_40461b ], [ %836, %block_40464d ]
  %726 = phi %struct.Memory* [ %391, %block_40461b ], [ %835, %block_40464d ]
  %727 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1216) to i32*)
  %728 = zext i32 %727 to i64
  store i64 %728, i64* %18, align 8, !tbaa !1240
  %729 = load i64, i64* %25, align 8
  %730 = add i64 %729, 32
  %731 = inttoptr i64 %730 to i32*
  %732 = load i32, i32* %731
  %733 = sub i32 %727, %732
  %734 = lshr i32 %733, 31
  %735 = trunc i32 %734 to i8
  %736 = lshr i32 %727, 31
  %737 = lshr i32 %732, 31
  %738 = xor i32 %737, %736
  %739 = xor i32 %734, %736
  %740 = add nuw nsw i32 %739, %738
  %741 = icmp eq i32 %740, 2
  %742 = icmp ne i8 %735, 0
  %743 = xor i1 %742, %741
  %744 = select i1 %743, i64 37, i64 16
  %745 = add i64 %725, %744
  br i1 %743, label %block_4046a4, label %block_40468f

block_4046a4:                                     ; preds = %block_40467f, %block_40468f
  %746 = phi %struct.Memory* [ %726, %block_40467f ], [ %668, %block_40468f ]
  %747 = load i64, i64* %24, align 8
  %748 = add i64 %747, 4328
  %749 = icmp ugt i64 %747, -4329
  %750 = zext i1 %749 to i8
  store i8 %750, i8* %48, align 1, !tbaa !1246
  %751 = trunc i64 %748 to i32
  %752 = and i32 %751, 255
  %753 = tail call i32 @llvm.ctpop.i32(i32 %752) #11
  %754 = trunc i32 %753 to i8
  %755 = and i8 %754, 1
  %756 = xor i8 %755, 1
  store i8 %756, i8* %49, align 1, !tbaa !1260
  %757 = xor i64 %748, %747
  %758 = lshr i64 %757, 4
  %759 = trunc i64 %758 to i8
  %760 = and i8 %759, 1
  store i8 %760, i8* %50, align 1, !tbaa !1261
  %761 = icmp eq i64 %748, 0
  %762 = zext i1 %761 to i8
  store i8 %762, i8* %51, align 1, !tbaa !1262
  %763 = lshr i64 %748, 63
  %764 = trunc i64 %763 to i8
  store i8 %764, i8* %52, align 1, !tbaa !1263
  %765 = lshr i64 %747, 63
  %766 = xor i64 %763, %765
  %767 = add nuw nsw i64 %766, %763
  %768 = icmp eq i64 %767, 2
  %769 = zext i1 %768 to i8
  store i8 %769, i8* %53, align 1, !tbaa !1264
  %770 = add i64 %747, 4336
  %771 = inttoptr i64 %748 to i64*
  %772 = load i64, i64* %771
  store i64 %772, i64* %19, align 8, !tbaa !1240
  %773 = add i64 %747, 4344
  %774 = inttoptr i64 %770 to i64*
  %775 = load i64, i64* %774
  store i64 %775, i64* %27, align 8, !tbaa !1240
  %776 = add i64 %747, 4352
  %777 = inttoptr i64 %773 to i64*
  %778 = load i64, i64* %777
  store i64 %778, i64* %28, align 8, !tbaa !1240
  %779 = add i64 %747, 4360
  %780 = inttoptr i64 %776 to i64*
  %781 = load i64, i64* %780
  store i64 %781, i64* %25, align 8, !tbaa !1240
  %782 = inttoptr i64 %779 to i64*
  %783 = load i64, i64* %782
  store i64 %783, i64* %3, align 8, !tbaa !1240
  %784 = add i64 %747, 4368
  store i64 %784, i64* %24, align 8, !tbaa !1240
  ret %struct.Memory* %746

block_404204:                                     ; preds = %block_404215, %block_4041fd
  %785 = phi i64 [ %136, %block_4041fd ], [ %630, %block_404215 ]
  %786 = phi %struct.Memory* [ %285, %block_4041fd ], [ %786, %block_404215 ]
  %787 = inttoptr i64 %698 to i32*
  %788 = load i32, i32* %787
  %789 = inttoptr i64 %699 to i32*
  %790 = load i32, i32* %789
  %791 = add i32 %790, -1
  %792 = sub i32 %788, %791
  %793 = lshr i32 %792, 31
  %794 = lshr i32 %788, 31
  %795 = lshr i32 %791, 31
  %796 = xor i32 %795, %794
  %797 = xor i32 %793, %794
  %798 = add nuw nsw i32 %797, %796
  %799 = icmp eq i32 %798, 2
  %800 = icmp ne i32 %793, 0
  %801 = xor i1 %800, %799
  %802 = select i1 %801, i64 17, i64 985
  %803 = add i64 %785, %802
  br i1 %801, label %block_404215, label %block_4045dd

block_40464d:                                     ; preds = %block_40461b
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1920), i64* %26, align 8, !tbaa !1240
  %804 = load i64, i64* %25, align 8
  %805 = add i64 %804, -80
  %806 = inttoptr i64 %805 to i64*
  %807 = load i64, i64* %806
  %808 = add i64 %804, -60
  %809 = inttoptr i64 %808 to i32*
  %810 = load i32, i32* %809
  %811 = zext i32 %810 to i64
  store i64 %811, i64* %22, align 8, !tbaa !1240
  %812 = add i64 %804, 16
  %813 = inttoptr i64 %812 to i32*
  %814 = load i32, i32* %813
  %815 = zext i32 %814 to i64
  store i64 %815, i64* %21, align 8, !tbaa !1240
  %816 = add i64 %804, 24
  %817 = inttoptr i64 %816 to i32*
  %818 = load i32, i32* %817
  %819 = zext i32 %818 to i64
  store i64 %819, i64* %20, align 8, !tbaa !1240
  %820 = add i64 %804, 32
  %821 = inttoptr i64 %820 to i32*
  %822 = load i32, i32* %821
  %823 = add i32 %822, -1
  %824 = add i64 %804, -4340
  %825 = inttoptr i64 %824 to i32*
  store i32 %823, i32* %825
  store i64 %807, i64* %23, align 8, !tbaa !1240
  %826 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %827 = inttoptr i64 %824 to i32*
  %828 = load i32, i32* %827
  %829 = zext i32 %828 to i64
  store i64 %829, i64* %826, align 8, !tbaa !1240
  %830 = add i64 %404, 9171
  %831 = add i64 %404, 50
  %832 = load i64, i64* %24, align 8, !tbaa !1240
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %831, i64* %834
  store i64 %833, i64* %24, align 8, !tbaa !1240
  %835 = tail call %struct.Memory* @sub_406a20_rep_nrm(%struct.State* nonnull %0, i64 %830, %struct.Memory* %391)
  %836 = load i64, i64* %3, align 8
  br label %block_40467f

block_403f38:                                     ; preds = %block_403f2e
  %837 = inttoptr i64 %350 to i32*
  store i32 2, i32* %837
  %838 = add i64 %349, 19
  br label %block_403f4b

block_404603:                                     ; preds = %block_403f8c
  %839 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %840 = icmp eq i32 %839, 0
  %841 = select i1 %840, i64 24, i64 14
  %842 = add i64 %687, %841
  br i1 %840, label %block_40461b, label %block_404611
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402780_zero3(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402780:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %19 = load i64, i64* %16, align 8
  %20 = load i64, i64* %15, align 8, !tbaa !1240
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22
  %23 = add i64 %20, -16
  %24 = load i64, i64* %14, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %20, -20
  %27 = load i32, i32* %9, align 4
  %28 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %28
  %29 = add i64 %20, -24
  %30 = load i32, i32* %7, align 4
  %31 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %31
  %32 = add i64 %20, -28
  %33 = load i32, i32* %5, align 4
  %34 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %34
  %35 = inttoptr i64 %29 to i32*
  %36 = load i32, i32* %35
  %37 = zext i32 %36 to i64
  store i64 %37, i64* %14, align 8, !tbaa !1240
  %38 = add i64 %20, -20
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39
  %41 = zext i32 %40 to i64
  store i64 %41, i64* %11, align 8, !tbaa !1240
  %42 = add i64 %20, -16
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %17, align 8, !tbaa !1240
  %45 = add i64 %20, -40
  %46 = inttoptr i64 %45 to i64*
  store i64 %44, i64* %46
  %47 = add i64 %20, -52
  %48 = inttoptr i64 %47 to i32*
  store i32 0, i32* %48
  %49 = add i64 %20, -64
  %50 = inttoptr i64 %49 to i64*
  store i64 %37, i64* %50
  %51 = add i64 %20, -72
  %52 = inttoptr i64 %51 to i64*
  store i64 %41, i64* %52
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %56 = add i64 %20, -48
  %57 = add i64 %20, -44
  %58 = bitcast %union.VectorReg* %18 to i8*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %60 = bitcast %union.VectorReg* %18 to i32*
  %61 = getelementptr inbounds i8, i8* %58, i64 4
  %62 = bitcast i8* %61 to i32*
  %63 = bitcast i64* %59 to i32*
  %64 = getelementptr inbounds i8, i8* %58, i64 12
  %65 = bitcast i8* %64 to i32*
  %66 = bitcast %union.VectorReg* %18 to double*
  br label %block_4027b2

block_40283f:                                     ; preds = %block_4027c5
  %67 = inttoptr i64 %47 to i32*
  %68 = load i32, i32* %67
  %69 = add i32 %68, 1
  %70 = inttoptr i64 %47 to i32*
  store i32 %69, i32* %70
  br label %block_4027b2

block_4027be:                                     ; preds = %block_4027b2
  %71 = inttoptr i64 %56 to i32*
  store i32 0, i32* %71
  br label %block_4027c5

block_4027d8:                                     ; preds = %block_4027e4, %block_4027d1
  %72 = phi %struct.Memory* [ %132, %block_4027d1 ], [ %72, %block_4027e4 ]
  %73 = inttoptr i64 %57 to i32*
  %74 = load i32, i32* %73
  %75 = inttoptr i64 %38 to i32*
  %76 = load i32, i32* %75
  %77 = sub i32 %74, %76
  %78 = lshr i32 %77, 31
  %79 = lshr i32 %74, 31
  %80 = lshr i32 %76, 31
  %81 = xor i32 %80, %79
  %82 = xor i32 %78, %79
  %83 = add nuw nsw i32 %82, %81
  %84 = icmp eq i32 %83, 2
  %85 = icmp ne i32 %78, 0
  %86 = xor i1 %85, %84
  br i1 %86, label %block_4027e4, label %block_40282c

block_402852:                                     ; preds = %block_4027b2
  %87 = zext i32 %113 to i64
  store i64 %87, i64* %10, align 8, !tbaa !1240
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %91 = icmp ult i32 %113, %115
  %92 = zext i1 %91 to i8
  %93 = and i32 %116, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #11
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  %98 = xor i32 %115, %113
  %99 = xor i32 %98, %116
  %100 = lshr i32 %99, 4
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = icmp eq i32 %116, 0
  %104 = zext i1 %103 to i8
  %105 = zext i1 %124 to i8
  store i8 %92, i8* %53, align 1, !tbaa !1494
  store i8 %97, i8* %88, align 1, !tbaa !1494
  store i8 %102, i8* %54, align 1, !tbaa !1494
  store i8 %104, i8* %89, align 1, !tbaa !1494
  store i8 %118, i8* %55, align 1, !tbaa !1494
  store i8 %105, i8* %90, align 1, !tbaa !1494
  %106 = inttoptr i64 %21 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %16, align 8, !tbaa !1240
  %108 = inttoptr i64 %20 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %3, align 8, !tbaa !1240
  %110 = add i64 %20, 8
  store i64 %110, i64* %15, align 8, !tbaa !1240
  ret %struct.Memory* %111

block_4027b2:                                     ; preds = %block_40283f, %block_402780
  %111 = phi %struct.Memory* [ %2, %block_402780 ], [ %132, %block_40283f ]
  %112 = inttoptr i64 %47 to i32*
  %113 = load i32, i32* %112
  %114 = inttoptr i64 %32 to i32*
  %115 = load i32, i32* %114
  %116 = sub i32 %113, %115
  %117 = lshr i32 %116, 31
  %118 = trunc i32 %117 to i8
  %119 = lshr i32 %113, 31
  %120 = lshr i32 %115, 31
  %121 = xor i32 %120, %119
  %122 = xor i32 %117, %119
  %123 = add nuw nsw i32 %122, %121
  %124 = icmp eq i32 %123, 2
  %125 = icmp ne i8 %118, 0
  %126 = xor i1 %125, %124
  br i1 %126, label %block_4027be, label %block_402852

block_40282c:                                     ; preds = %block_4027d8
  %127 = inttoptr i64 %56 to i32*
  %128 = load i32, i32* %127
  %129 = add i32 %128, 1
  %130 = inttoptr i64 %56 to i32*
  store i32 %129, i32* %130
  br label %block_4027c5

block_4027d1:                                     ; preds = %block_4027c5
  %131 = inttoptr i64 %57 to i32*
  store i32 0, i32* %131
  br label %block_4027d8

block_4027c5:                                     ; preds = %block_40282c, %block_4027be
  %132 = phi %struct.Memory* [ %111, %block_4027be ], [ %72, %block_40282c ]
  %133 = inttoptr i64 %56 to i32*
  %134 = load i32, i32* %133
  %135 = inttoptr i64 %29 to i32*
  %136 = load i32, i32* %135
  %137 = sub i32 %134, %136
  %138 = lshr i32 %137, 31
  %139 = lshr i32 %134, 31
  %140 = lshr i32 %136, 31
  %141 = xor i32 %140, %139
  %142 = xor i32 %138, %139
  %143 = add nuw nsw i32 %142, %141
  %144 = icmp eq i32 %143, 2
  %145 = icmp ne i32 %138, 0
  %146 = xor i1 %145, %144
  br i1 %146, label %block_4027d1, label %block_40283f

block_4027e4:                                     ; preds = %block_4027d8
  store i32 0, i32* %60, align 1, !tbaa !1481
  store i32 0, i32* %62, align 1, !tbaa !1481
  store i32 0, i32* %63, align 1, !tbaa !1481
  store i32 0, i32* %65, align 1, !tbaa !1481
  %147 = inttoptr i64 %45 to i64*
  %148 = load i64, i64* %147
  %149 = inttoptr i64 %47 to i32*
  %150 = load i32, i32* %149
  %151 = sext i32 %150 to i64
  %152 = inttoptr i64 %49 to i64*
  %153 = load i64, i64* %152
  %154 = inttoptr i64 %51 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %13, align 8, !tbaa !1240
  %156 = mul i64 %155, %153
  store i64 %156, i64* %12, align 8, !tbaa !1240
  %157 = mul i64 %156, %151
  %158 = shl i64 %157, 3
  %159 = add i64 %158, %148
  %160 = inttoptr i64 %56 to i32*
  %161 = load i32, i32* %160
  %162 = sext i32 %161 to i64
  %163 = mul i64 %155, %162
  %164 = shl i64 %163, 3
  %165 = add i64 %164, %159
  %166 = sext i32 %74 to i64
  store i64 %166, i64* %11, align 8, !tbaa !1240
  %167 = shl nsw i64 %166, 3
  %168 = add i64 %167, %165
  %169 = load double, double* %66, align 1
  %170 = inttoptr i64 %168 to double*
  store double %169, double* %170
  %171 = inttoptr i64 %57 to i32*
  %172 = load i32, i32* %171
  %173 = add i32 %172, 1
  %174 = inttoptr i64 %57 to i32*
  store i32 %173, i32* %174
  br label %block_4027d8
}

; Function Attrs: noinline
define %struct.Memory* @sub_406a20_rep_nrm(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_406a20:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %20 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %24 = load i64, i64* %18, align 8
  %25 = load i64, i64* %17, align 8, !tbaa !1240
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27
  store i64 %26, i64* %18, align 8, !tbaa !1240
  %28 = load i64, i64* %21, align 8
  %29 = add i64 %25, -16
  %30 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %30
  %31 = load i64, i64* %12, align 8
  %32 = add i64 %25, -24
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  %34 = add i64 %25, -120
  store i64 %34, i64* %17, align 8, !tbaa !1240
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %41 = add i64 %25, -72
  %42 = add i64 %25, -80
  %43 = add i64 %25, -32
  %44 = load i64, i64* %16, align 8
  %45 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %45
  %46 = add i64 %25, -36
  %47 = load i32, i32* %9, align 4
  %48 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %48
  %49 = add i64 %25, -40
  %50 = load i32, i32* %7, align 4
  %51 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %51
  %52 = add i64 %25, -44
  %53 = load i32, i32* %5, align 4
  %54 = inttoptr i64 %52 to i32*
  store i32 %53, i32* %54
  %55 = add i64 %25, -56
  %56 = load i64, i64* %19, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %57
  %58 = add i64 %25, -60
  %59 = load i32, i32* %11, align 4
  %60 = inttoptr i64 %58 to i32*
  store i32 %59, i32* %60
  %61 = inttoptr i64 %43 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %16, align 8, !tbaa !1240
  %63 = inttoptr i64 %46 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %15, align 8, !tbaa !1240
  %66 = inttoptr i64 %49 to i32*
  %67 = load i32, i32* %66
  %68 = zext i32 %67 to i64
  store i64 %68, i64* %14, align 8, !tbaa !1240
  %69 = load i64, i64* %18, align 8
  %70 = add i64 %69, -36
  %71 = inttoptr i64 %70 to i32*
  %72 = load i32, i32* %71
  %73 = zext i32 %72 to i64
  store i64 %73, i64* %13, align 8, !tbaa !1240
  %74 = add i64 %69, -52
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75
  %77 = sext i32 %76 to i64
  %78 = shl nsw i64 %77, 2
  %79 = add i64 %78, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1056)
  %80 = inttoptr i64 %79 to i32*
  %81 = load i32, i32* %80
  %82 = add i64 %78, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1104)
  %83 = inttoptr i64 %82 to i32*
  %84 = load i32, i32* %83
  %85 = add i64 %78, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1152)
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86
  %88 = zext i32 %87 to i64
  store i64 %88, i64* %12, align 8, !tbaa !1240
  store i64 %41, i64* %19, align 8, !tbaa !1240
  %89 = add i64 %69, -76
  %90 = inttoptr i64 %89 to i32*
  store i32 %81, i32* %90
  store i64 %42, i64* %20, align 8, !tbaa !1240
  %91 = inttoptr i64 %89 to i32*
  %92 = load i32, i32* %91
  %93 = zext i32 %92 to i64
  store i64 %93, i64* %21, align 8, !tbaa !1240
  %94 = load i64, i64* %17, align 8
  %95 = inttoptr i64 %94 to i32*
  store i32 %92, i32* %95
  %96 = add i64 %94, 8
  %97 = inttoptr i64 %96 to i32*
  store i32 %84, i32* %97
  %98 = add i64 %94, 16
  %99 = inttoptr i64 %98 to i32*
  store i32 %87, i32* %99
  %100 = add i64 %1, -14320
  %101 = add i64 %1, 121
  %102 = add i64 %94, -8
  %103 = inttoptr i64 %102 to i64*
  store i64 %101, i64* %103
  store i64 %102, i64* %17, align 8, !tbaa !1240
  %104 = tail call %struct.Memory* @sub_403230_norm2u3(%struct.State* nonnull %0, i64 %100, %struct.Memory* %2)
  %105 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1929), i64* %16, align 8, !tbaa !1240
  %106 = load i64, i64* %18, align 8
  %107 = add i64 %106, -52
  %108 = inttoptr i64 %107 to i32*
  %109 = load i32, i32* %108
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %15, align 8, !tbaa !1240
  %111 = add i64 %106, -48
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  store i64 %113, i64* %14, align 8, !tbaa !1240
  %114 = add i64 %106, -64
  %115 = inttoptr i64 %114 to double*
  %116 = load double, double* %115
  %117 = bitcast [32 x %union.VectorReg]* %22 to double*
  store double %116, double* %117, align 1, !tbaa !1244
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %119 = bitcast i64* %118 to double*
  store double 0.000000e+00, double* %119, align 1, !tbaa !1244
  %120 = add i64 %106, -72
  %121 = inttoptr i64 %120 to double*
  %122 = load double, double* %121
  %123 = bitcast %union.VectorReg* %23 to double*
  store double %122, double* %123, align 1, !tbaa !1244
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %125 = bitcast i64* %124 to double*
  store double 0.000000e+00, double* %125, align 1, !tbaa !1244
  %126 = add i64 %105, 34
  %127 = load i64, i64* %17, align 8, !tbaa !1240
  %128 = add i64 %127, -8
  %129 = inttoptr i64 %128 to i64*
  store i64 %126, i64* %129
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %133 = load i64, i64* %131, align 8, !alias.scope !1755, !noalias !1758
  %134 = load i64, i64* %19, align 8, !alias.scope !1755, !noalias !1758
  %135 = load i64, i64* %132, align 8, !alias.scope !1755, !noalias !1758
  %136 = inttoptr i64 %127 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %127, 8
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139
  %141 = add i64 %127, 16
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  %144 = add i64 %127, 24
  %145 = inttoptr i64 %144 to i64*
  %146 = load i64, i64* %145
  %147 = add i64 %127, 32
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148
  %150 = add i64 %127, 40
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151
  %153 = add i64 %127, 48
  %154 = inttoptr i64 %153 to i64*
  %155 = load i64, i64* %154
  %156 = add i64 %127, 56
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %127, 64
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160
  %162 = add i64 %127, 72
  %163 = inttoptr i64 %162 to i64*
  %164 = load i64, i64* %163
  store i64 %127, i64* %17, align 8, !alias.scope !1755, !noalias !1758
  %165 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1929), i64 %110, i64 %113, i64 %133, i64 %134, i64 %135, i64 %137, i64 %140, i64 %143, i64 %146, i64 %149, i64 %152, i64 %155, i64 %158, i64 %161, i64 %164), !noalias !1755
  store i64 %165, i64* %130, align 8, !alias.scope !1755, !noalias !1758
  %166 = load i64, i64* %18, align 8
  %167 = add i64 %166, -80
  %168 = trunc i64 %165 to i32
  %169 = inttoptr i64 %167 to i32*
  store i32 %168, i32* %169
  %170 = load i64, i64* %17, align 8
  %171 = add i64 %170, 96
  %172 = icmp ugt i64 %170, -97
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %35, align 1, !tbaa !1246
  %174 = trunc i64 %171 to i32
  %175 = and i32 %174, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #11
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %36, align 1, !tbaa !1260
  %180 = xor i64 %171, %170
  %181 = lshr i64 %180, 4
  %182 = trunc i64 %181 to i8
  %183 = and i8 %182, 1
  store i8 %183, i8* %37, align 1, !tbaa !1261
  %184 = icmp eq i64 %171, 0
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %38, align 1, !tbaa !1262
  %186 = lshr i64 %171, 63
  %187 = trunc i64 %186 to i8
  store i8 %187, i8* %39, align 1, !tbaa !1263
  %188 = lshr i64 %170, 63
  %189 = xor i64 %186, %188
  %190 = add nuw nsw i64 %189, %186
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %40, align 1, !tbaa !1264
  %193 = add i64 %170, 104
  %194 = inttoptr i64 %171 to i64*
  %195 = load i64, i64* %194
  store i64 %195, i64* %12, align 8, !tbaa !1240
  %196 = add i64 %170, 112
  %197 = inttoptr i64 %193 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %21, align 8, !tbaa !1240
  %199 = add i64 %170, 120
  %200 = inttoptr i64 %196 to i64*
  %201 = load i64, i64* %200
  store i64 %201, i64* %18, align 8, !tbaa !1240
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %3, align 8, !tbaa !1240
  %204 = add i64 %170, 128
  store i64 %204, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %104
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007c0__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
block_4007c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400cf0_timer_read(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400cf0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = add i64 %11, -12
  %15 = load i32, i32* %5, align 4
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17
  %19 = sext i32 %18 to i64
  store i64 %19, i64* %6, align 8, !tbaa !1240
  %20 = shl nsw i64 %19, 3
  %21 = add i64 %20, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 16)
  %22 = inttoptr i64 %21 to double*
  %23 = load double, double* %22
  %24 = bitcast %union.VectorReg* %9 to double*
  store double %23, double* %24, align 1, !tbaa !1244
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast i64* %25 to double*
  store double 0.000000e+00, double* %26, align 1, !tbaa !1244
  %27 = inttoptr i64 %12 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %8, align 8, !tbaa !1240
  %29 = inttoptr i64 %11 to i64*
  %30 = load i64, i64* %29
  store i64 %30, i64* %3, align 8, !tbaa !1240
  %31 = add i64 %11, 8
  store i64 %31, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406660_comm3(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_406660:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %21 = load i64, i64* %18, align 8
  %22 = load i64, i64* %17, align 8, !tbaa !1240
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24
  store i64 %23, i64* %18, align 8, !tbaa !1240
  %25 = add i64 %22, -72
  store i64 %25, i64* %17, align 8, !tbaa !1240
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %32 = add i64 %22, -16
  %33 = load i64, i64* %16, align 8
  %34 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %34
  %35 = add i64 %22, -20
  %36 = load i32, i32* %9, align 4
  %37 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %37
  %38 = add i64 %22, -24
  %39 = load i32, i32* %7, align 4
  %40 = inttoptr i64 %38 to i32*
  store i32 %39, i32* %40
  %41 = add i64 %22, -28
  %42 = load i32, i32* %5, align 4
  %43 = inttoptr i64 %41 to i32*
  store i32 %42, i32* %43
  %44 = add i64 %22, -32
  %45 = load i32, i32* %11, align 4
  %46 = inttoptr i64 %44 to i32*
  store i32 %45, i32* %46
  %47 = inttoptr i64 %38 to i32*
  %48 = load i32, i32* %47
  %49 = zext i32 %48 to i64
  store i64 %49, i64* %16, align 8, !tbaa !1240
  %50 = inttoptr i64 %35 to i32*
  %51 = load i32, i32* %50
  %52 = zext i32 %51 to i64
  %53 = inttoptr i64 %32 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %19, align 8, !tbaa !1240
  %55 = add i64 %22, -40
  %56 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %56
  %57 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %58 = icmp eq i32 %57, 0
  %59 = load i64, i64* %18, align 8
  %60 = add i64 %59, -56
  %61 = inttoptr i64 %60 to i64*
  store i64 %49, i64* %61
  %62 = add i64 %59, -64
  %63 = inttoptr i64 %62 to i64*
  store i64 %52, i64* %63
  %64 = select i1 %58, i64 75, i64 65
  %65 = add i64 %64, %1
  br i1 %58, label %block_4066ab, label %block_4066a1

block_4068fd:                                     ; preds = %block_406909, %block_4068f6
  %66 = phi i64 [ %247, %block_4068f6 ], [ %480, %block_406909 ]
  %67 = phi %struct.Memory* [ %184, %block_4068f6 ], [ %67, %block_406909 ]
  %68 = inttoptr i64 %230 to i32*
  %69 = load i32, i32* %68
  %70 = inttoptr i64 %231 to i32*
  %71 = load i32, i32* %70
  %72 = sub i32 %69, %71
  %73 = lshr i32 %72, 31
  %74 = lshr i32 %69, 31
  %75 = lshr i32 %71, 31
  %76 = xor i32 %75, %74
  %77 = xor i32 %73, %74
  %78 = add nuw nsw i32 %77, %76
  %79 = icmp eq i32 %78, 2
  %80 = icmp ne i32 %73, 0
  %81 = xor i1 %80, %79
  %82 = select i1 %81, i64 12, i64 236
  %83 = add i64 %66, %82
  br i1 %81, label %block_406909, label %block_4069e9

block_4069fc:                                     ; preds = %block_4068ea
  %84 = zext i32 %186 to i64
  store i64 %84, i64* %12, align 8, !tbaa !1240
  %85 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1040) to i32*)
  %86 = icmp eq i32 %85, 0
  %87 = select i1 %86, i64 24, i64 14
  %88 = add i64 %200, %87
  br i1 %86, label %block_406a14, label %block_406a0a

block_4069e9:                                     ; preds = %block_4068fd
  %89 = inttoptr i64 %228 to i32*
  %90 = load i32, i32* %89
  %91 = add i32 %90, 1
  %92 = inttoptr i64 %228 to i32*
  store i32 %91, i32* %92
  %93 = add i64 %83, -255
  br label %block_4068ea

block_4067d9:                                     ; preds = %block_4067c8
  %94 = add i64 %220, 7
  %95 = inttoptr i64 %241 to i32*
  store i32 0, i32* %95
  br label %block_4067e0

block_4067ec:                                     ; preds = %block_4067e0
  %96 = inttoptr i64 %243 to i64*
  %97 = load i64, i64* %96
  %98 = inttoptr i64 %239 to i32*
  %99 = load i32, i32* %98
  %100 = sext i32 %99 to i64
  %101 = inttoptr i64 %244 to i64*
  %102 = load i64, i64* %101
  %103 = inttoptr i64 %245 to i64*
  %104 = load i64, i64* %103
  %105 = mul i64 %104, %102
  %106 = mul i64 %105, %100
  %107 = shl i64 %106, 3
  %108 = add i64 %107, %97
  %109 = inttoptr i64 %246 to i32*
  %110 = load i32, i32* %109
  %111 = add i32 %110, -2
  %112 = sext i32 %111 to i64
  %113 = mul i64 %104, %112
  %114 = shl i64 %113, 3
  %115 = add i64 %114, %108
  %116 = sext i32 %298 to i64
  %117 = shl nsw i64 %116, 3
  %118 = add i64 %117, %115
  %119 = inttoptr i64 %118 to double*
  %120 = load double, double* %119
  %121 = add i64 %117, %108
  %122 = inttoptr i64 %121 to double*
  store double %120, double* %122
  %123 = inttoptr i64 %243 to i64*
  %124 = load i64, i64* %123
  %125 = inttoptr i64 %239 to i32*
  %126 = load i32, i32* %125
  %127 = sext i32 %126 to i64
  %128 = inttoptr i64 %244 to i64*
  %129 = load i64, i64* %128
  %130 = mul i64 %104, %129
  %131 = mul i64 %130, %127
  %132 = shl i64 %131, 3
  %133 = add i64 %132, %124
  %134 = shl i64 %104, 3
  %135 = add i64 %134, %133
  %136 = inttoptr i64 %241 to i32*
  %137 = load i32, i32* %136
  %138 = sext i32 %137 to i64
  %139 = shl nsw i64 %138, 3
  %140 = add i64 %139, %135
  %141 = inttoptr i64 %140 to double*
  %142 = load double, double* %141
  store double %142, double* %292, align 1, !tbaa !1244
  store double 0.000000e+00, double* %294, align 1, !tbaa !1244
  %143 = inttoptr i64 %245 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %15, align 8, !tbaa !1240
  %145 = mul i64 %144, %129
  store i64 %145, i64* %14, align 8, !tbaa !1240
  %146 = mul i64 %145, %127
  %147 = shl i64 %146, 3
  %148 = add i64 %147, %124
  %149 = inttoptr i64 %246 to i32*
  %150 = load i32, i32* %149
  %151 = add i32 %150, -1
  %152 = zext i32 %151 to i64
  store i64 %152, i64* %16, align 8, !tbaa !1240
  %153 = sext i32 %151 to i64
  %154 = mul i64 %144, %153
  %155 = shl i64 %154, 3
  %156 = add i64 %155, %148
  %157 = add i64 %139, %156
  %158 = inttoptr i64 %157 to double*
  store double %142, double* %158
  %159 = inttoptr i64 %241 to i32*
  %160 = load i32, i32* %159
  %161 = add i32 %160, 1
  %162 = inttoptr i64 %241 to i32*
  store i32 %161, i32* %162
  %163 = add i64 %312, -12
  br label %block_4067e0

block_4066ca:                                     ; preds = %block_4066db, %block_4066c3
  %164 = phi i64 [ %221, %block_4066c3 ], [ %372, %block_4066db ]
  %165 = phi %struct.Memory* [ %250, %block_4066c3 ], [ %165, %block_4066db ]
  %166 = inttoptr i64 %286 to i32*
  %167 = load i32, i32* %166
  %168 = inttoptr i64 %287 to i32*
  %169 = load i32, i32* %168
  %170 = add i32 %169, -1
  %171 = sub i32 %167, %170
  %172 = lshr i32 %171, 31
  %173 = lshr i32 %167, 31
  %174 = lshr i32 %170, 31
  %175 = xor i32 %174, %173
  %176 = xor i32 %172, %173
  %177 = add nuw nsw i32 %176, %175
  %178 = icmp eq i32 %177, 2
  %179 = icmp ne i32 %172, 0
  %180 = xor i1 %179, %178
  %181 = select i1 %180, i64 17, i64 228
  %182 = add i64 %164, %181
  br i1 %180, label %block_4066db, label %block_4067ae

block_4068ea:                                     ; preds = %block_4068e3, %block_4069e9
  %183 = phi i64 [ %225, %block_4068e3 ], [ %93, %block_4069e9 ]
  %184 = phi %struct.Memory* [ %202, %block_4068e3 ], [ %67, %block_4069e9 ]
  %185 = inttoptr i64 %228 to i32*
  %186 = load i32, i32* %185
  %187 = inttoptr i64 %229 to i32*
  %188 = load i32, i32* %187
  %189 = sub i32 %186, %188
  %190 = lshr i32 %189, 31
  %191 = lshr i32 %186, 31
  %192 = lshr i32 %188, 31
  %193 = xor i32 %192, %191
  %194 = xor i32 %190, %191
  %195 = add nuw nsw i32 %194, %193
  %196 = icmp eq i32 %195, 2
  %197 = icmp ne i32 %190, 0
  %198 = xor i1 %197, %196
  %199 = select i1 %198, i64 12, i64 274
  %200 = add i64 %183, %199
  br i1 %198, label %block_4068f6, label %block_4069fc

block_4067c8:                                     ; preds = %block_4068d0, %block_4067c1
  %201 = phi i64 [ %236, %block_4067c1 ], [ %273, %block_4068d0 ]
  %202 = phi %struct.Memory* [ %250, %block_4067c1 ], [ %296, %block_4068d0 ]
  %203 = inttoptr i64 %239 to i32*
  %204 = load i32, i32* %203
  %205 = inttoptr i64 %240 to i32*
  %206 = load i32, i32* %205
  %207 = add i32 %206, -1
  %208 = sub i32 %204, %207
  %209 = lshr i32 %208, 31
  %210 = trunc i32 %209 to i8
  %211 = lshr i32 %204, 31
  %212 = lshr i32 %207, 31
  %213 = xor i32 %212, %211
  %214 = xor i32 %209, %211
  %215 = add nuw nsw i32 %214, %213
  %216 = icmp eq i32 %215, 2
  %217 = icmp ne i8 %210, 0
  %218 = xor i1 %217, %216
  %219 = select i1 %218, i64 17, i64 283
  %220 = add i64 %201, %219
  br i1 %218, label %block_4067d9, label %block_4068e3

block_4066c3:                                     ; preds = %block_4066b2
  %221 = add i64 %268, 7
  %222 = inttoptr i64 %286 to i32*
  store i32 1, i32* %222
  br label %block_4066ca

block_4068e3:                                     ; preds = %block_4067c8
  %223 = zext i32 %207 to i64
  store i64 %223, i64* %13, align 8, !tbaa !1240
  %224 = add i64 %238, -40
  %225 = add i64 %220, 7
  %226 = inttoptr i64 %224 to i32*
  store i32 0, i32* %226
  %227 = load i64, i64* %18, align 8
  %228 = add i64 %227, -40
  %229 = add i64 %227, -16
  %230 = add i64 %227, -36
  %231 = add i64 %227, -12
  %232 = add i64 %227, -32
  %233 = add i64 %227, -20
  %234 = add i64 %227, -56
  %235 = add i64 %227, -64
  br label %block_4068ea

block_4067c1:                                     ; preds = %block_4066b2
  %236 = add i64 %268, 7
  %237 = inttoptr i64 %282 to i32*
  store i32 1, i32* %237
  %238 = load i64, i64* %18, align 8
  %239 = add i64 %238, -44
  %240 = add i64 %238, -20
  %241 = add i64 %238, -36
  %242 = add i64 %238, -12
  %243 = add i64 %238, -32
  %244 = add i64 %238, -56
  %245 = add i64 %238, -64
  %246 = add i64 %238, -16
  br label %block_4067c8

block_4068f6:                                     ; preds = %block_4068ea
  %247 = add i64 %200, 7
  %248 = inttoptr i64 %230 to i32*
  store i32 0, i32* %248
  br label %block_4068fd

block_4066b2:                                     ; preds = %block_4066ab, %block_4067ae
  %249 = phi i64 [ %283, %block_4066ab ], [ %278, %block_4067ae ]
  %250 = phi %struct.Memory* [ %281, %block_4066ab ], [ %165, %block_4067ae ]
  %251 = inttoptr i64 %282 to i32*
  %252 = load i32, i32* %251
  %253 = inttoptr i64 %285 to i32*
  %254 = load i32, i32* %253
  %255 = add i32 %254, -1
  %256 = sub i32 %252, %255
  %257 = lshr i32 %256, 31
  %258 = trunc i32 %257 to i8
  %259 = lshr i32 %252, 31
  %260 = lshr i32 %255, 31
  %261 = xor i32 %260, %259
  %262 = xor i32 %257, %259
  %263 = add nuw nsw i32 %262, %261
  %264 = icmp eq i32 %263, 2
  %265 = icmp ne i8 %258, 0
  %266 = xor i1 %265, %264
  %267 = select i1 %266, i64 17, i64 271
  %268 = add i64 %249, %267
  br i1 %266, label %block_4066c3, label %block_4067c1

block_4068d0:                                     ; preds = %block_4067e0
  %269 = inttoptr i64 %239 to i32*
  %270 = load i32, i32* %269
  %271 = add i32 %270, 1
  %272 = inttoptr i64 %239 to i32*
  store i32 %271, i32* %272
  %273 = add i64 %312, -264
  br label %block_4067c8

block_4067ae:                                     ; preds = %block_4066ca
  %274 = inttoptr i64 %282 to i32*
  %275 = load i32, i32* %274
  %276 = add i32 %275, 1
  %277 = inttoptr i64 %282 to i32*
  store i32 %276, i32* %277
  %278 = add i64 %182, -252
  br label %block_4066b2

block_4066ab:                                     ; preds = %block_4066a1, %block_406660
  %279 = phi i64 [ %65, %block_406660 ], [ %380, %block_4066a1 ]
  %280 = phi i64 [ %59, %block_406660 ], [ %379, %block_4066a1 ]
  %281 = phi %struct.Memory* [ %2, %block_406660 ], [ %378, %block_4066a1 ]
  %282 = add i64 %280, -44
  %283 = add i64 %279, 7
  %284 = inttoptr i64 %282 to i32*
  store i32 1, i32* %284
  %285 = add i64 %280, -20
  %286 = add i64 %280, -40
  %287 = add i64 %280, -16
  %288 = add i64 %280, -32
  %289 = add i64 %280, -56
  %290 = add i64 %280, -64
  %291 = add i64 %280, -12
  %292 = bitcast %union.VectorReg* %20 to double*
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %294 = bitcast i64* %293 to double*
  br label %block_4066b2

block_4067e0:                                     ; preds = %block_4067ec, %block_4067d9
  %295 = phi i64 [ %94, %block_4067d9 ], [ %163, %block_4067ec ]
  %296 = phi %struct.Memory* [ %202, %block_4067d9 ], [ %296, %block_4067ec ]
  %297 = inttoptr i64 %241 to i32*
  %298 = load i32, i32* %297
  %299 = inttoptr i64 %242 to i32*
  %300 = load i32, i32* %299
  %301 = sub i32 %298, %300
  %302 = lshr i32 %301, 31
  %303 = lshr i32 %298, 31
  %304 = lshr i32 %300, 31
  %305 = xor i32 %304, %303
  %306 = xor i32 %302, %303
  %307 = add nuw nsw i32 %306, %305
  %308 = icmp eq i32 %307, 2
  %309 = icmp ne i32 %302, 0
  %310 = xor i1 %309, %308
  %311 = select i1 %310, i64 12, i64 240
  %312 = add i64 %295, %311
  br i1 %310, label %block_4067ec, label %block_4068d0

block_4066db:                                     ; preds = %block_4066ca
  %313 = inttoptr i64 %288 to i64*
  %314 = load i64, i64* %313
  %315 = inttoptr i64 %282 to i32*
  %316 = load i32, i32* %315
  %317 = sext i32 %316 to i64
  %318 = inttoptr i64 %289 to i64*
  %319 = load i64, i64* %318
  %320 = inttoptr i64 %290 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %15, align 8, !tbaa !1240
  %322 = mul i64 %321, %319
  %323 = mul i64 %322, %317
  %324 = shl i64 %323, 3
  %325 = add i64 %324, %314
  %326 = sext i32 %167 to i64
  %327 = mul i64 %321, %326
  %328 = shl i64 %327, 3
  %329 = add i64 %328, %325
  %330 = inttoptr i64 %291 to i32*
  %331 = load i32, i32* %330
  %332 = add i32 %331, -2
  %333 = sext i32 %332 to i64
  %334 = shl nsw i64 %333, 3
  %335 = add i64 %329, %334
  %336 = inttoptr i64 %335 to double*
  %337 = load double, double* %336
  %338 = inttoptr i64 %329 to double*
  store double %337, double* %338
  %339 = inttoptr i64 %288 to i64*
  %340 = load i64, i64* %339
  %341 = inttoptr i64 %282 to i32*
  %342 = load i32, i32* %341
  %343 = sext i32 %342 to i64
  %344 = inttoptr i64 %289 to i64*
  %345 = load i64, i64* %344
  %346 = mul i64 %321, %345
  %347 = mul i64 %346, %343
  %348 = shl i64 %347, 3
  %349 = add i64 %348, %340
  %350 = inttoptr i64 %286 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  %353 = mul i64 %321, %352
  %354 = shl i64 %353, 3
  %355 = add i64 %349, 8
  %356 = add i64 %355, %354
  %357 = inttoptr i64 %356 to double*
  %358 = load double, double* %357
  store double %358, double* %292, align 1, !tbaa !1244
  store double 0.000000e+00, double* %294, align 1, !tbaa !1244
  store i64 %346, i64* %14, align 8, !tbaa !1240
  %359 = add i64 %354, %349
  %360 = inttoptr i64 %291 to i32*
  %361 = load i32, i32* %360
  %362 = add i32 %361, -1
  %363 = zext i32 %362 to i64
  store i64 %363, i64* %16, align 8, !tbaa !1240
  %364 = sext i32 %362 to i64
  %365 = shl nsw i64 %364, 3
  %366 = add i64 %359, %365
  %367 = inttoptr i64 %366 to double*
  store double %358, double* %367
  %368 = inttoptr i64 %286 to i32*
  %369 = load i32, i32* %368
  %370 = add i32 %369, 1
  %371 = inttoptr i64 %286 to i32*
  store i32 %370, i32* %371
  %372 = add i64 %182, -17
  br label %block_4066ca

block_4066a1:                                     ; preds = %block_406660
  store i64 9, i64* %16, align 8, !tbaa !1240
  %373 = add i64 %65, -23121
  %374 = add i64 %65, 10
  %375 = load i64, i64* %17, align 8, !tbaa !1240
  %376 = add i64 %375, -8
  %377 = inttoptr i64 %376 to i64*
  store i64 %374, i64* %377
  store i64 %376, i64* %17, align 8, !tbaa !1240
  %378 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull %0, i64 %373, %struct.Memory* %2)
  %379 = load i64, i64* %18, align 8
  %380 = load i64, i64* %3, align 8
  br label %block_4066ab

block_406a14:                                     ; preds = %block_406a0a, %block_4069fc
  %381 = phi %struct.Memory* [ %184, %block_4069fc ], [ %416, %block_406a0a ]
  %382 = load i64, i64* %17, align 8
  %383 = add i64 %382, 64
  %384 = icmp ugt i64 %382, -65
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %26, align 1, !tbaa !1246
  %386 = trunc i64 %383 to i32
  %387 = and i32 %386, 255
  %388 = tail call i32 @llvm.ctpop.i32(i32 %387) #11
  %389 = trunc i32 %388 to i8
  %390 = and i8 %389, 1
  %391 = xor i8 %390, 1
  store i8 %391, i8* %27, align 1, !tbaa !1260
  %392 = xor i64 %383, %382
  %393 = lshr i64 %392, 4
  %394 = trunc i64 %393 to i8
  %395 = and i8 %394, 1
  store i8 %395, i8* %28, align 1, !tbaa !1261
  %396 = icmp eq i64 %383, 0
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %29, align 1, !tbaa !1262
  %398 = lshr i64 %383, 63
  %399 = trunc i64 %398 to i8
  store i8 %399, i8* %30, align 1, !tbaa !1263
  %400 = lshr i64 %382, 63
  %401 = xor i64 %398, %400
  %402 = add nuw nsw i64 %401, %398
  %403 = icmp eq i64 %402, 2
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %31, align 1, !tbaa !1264
  %405 = add i64 %382, 72
  %406 = inttoptr i64 %383 to i64*
  %407 = load i64, i64* %406
  store i64 %407, i64* %18, align 8, !tbaa !1240
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %3, align 8, !tbaa !1240
  %410 = add i64 %382, 80
  store i64 %410, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %381

block_406a0a:                                     ; preds = %block_4069fc
  store i64 9, i64* %16, align 8, !tbaa !1240
  %411 = add i64 %88, -23914
  %412 = add i64 %88, 10
  %413 = load i64, i64* %17, align 8, !tbaa !1240
  %414 = add i64 %413, -8
  %415 = inttoptr i64 %414 to i64*
  store i64 %412, i64* %415
  store i64 %414, i64* %17, align 8, !tbaa !1240
  %416 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull %0, i64 %411, %struct.Memory* %184)
  br label %block_406a14

block_406909:                                     ; preds = %block_4068fd
  %417 = inttoptr i64 %232 to i64*
  %418 = load i64, i64* %417
  %419 = inttoptr i64 %233 to i32*
  %420 = load i32, i32* %419
  %421 = add i32 %420, -2
  %422 = sext i32 %421 to i64
  %423 = inttoptr i64 %234 to i64*
  %424 = load i64, i64* %423
  %425 = inttoptr i64 %235 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %16, align 8, !tbaa !1240
  %427 = mul i64 %426, %424
  %428 = mul i64 %427, %422
  %429 = shl i64 %428, 3
  %430 = add i64 %429, %418
  %431 = inttoptr i64 %228 to i32*
  %432 = load i32, i32* %431
  %433 = sext i32 %432 to i64
  %434 = mul i64 %426, %433
  %435 = shl i64 %434, 3
  %436 = add i64 %435, %430
  %437 = sext i32 %69 to i64
  %438 = shl nsw i64 %437, 3
  %439 = add i64 %438, %436
  %440 = inttoptr i64 %439 to double*
  %441 = load double, double* %440
  %442 = add i64 %435, %418
  %443 = add i64 %438, %442
  %444 = inttoptr i64 %443 to double*
  store double %441, double* %444
  %445 = inttoptr i64 %232 to i64*
  %446 = load i64, i64* %445
  %447 = inttoptr i64 %234 to i64*
  %448 = load i64, i64* %447
  %449 = mul i64 %426, %448
  %450 = shl i64 %449, 3
  %451 = add i64 %450, %446
  %452 = inttoptr i64 %228 to i32*
  %453 = load i32, i32* %452
  %454 = sext i32 %453 to i64
  %455 = mul i64 %426, %454
  %456 = shl i64 %455, 3
  %457 = add i64 %456, %451
  %458 = inttoptr i64 %230 to i32*
  %459 = load i32, i32* %458
  %460 = sext i32 %459 to i64
  %461 = shl nsw i64 %460, 3
  %462 = add i64 %461, %457
  %463 = inttoptr i64 %462 to double*
  %464 = load double, double* %463
  store double %464, double* %292, align 1, !tbaa !1244
  store double 0.000000e+00, double* %294, align 1, !tbaa !1244
  %465 = inttoptr i64 %233 to i32*
  %466 = load i32, i32* %465
  %467 = add i32 %466, -1
  %468 = zext i32 %467 to i64
  store i64 %468, i64* %13, align 8, !tbaa !1240
  %469 = sext i32 %467 to i64
  store i64 %449, i64* %15, align 8, !tbaa !1240
  %470 = mul i64 %449, %469
  %471 = shl i64 %470, 3
  %472 = add i64 %471, %446
  %473 = add i64 %456, %472
  store i64 %460, i64* %14, align 8, !tbaa !1240
  %474 = add i64 %461, %473
  %475 = inttoptr i64 %474 to double*
  store double %464, double* %475
  %476 = inttoptr i64 %230 to i32*
  %477 = load i32, i32* %476
  %478 = add i32 %477, 1
  %479 = inttoptr i64 %230 to i32*
  store i32 %478, i32* %479
  %480 = add i64 %83, -12
  br label %block_4068fd
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007d0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4007f8:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %5, align 8, !tbaa !1240
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %7, i64* %10
  store i64 6328464, i64* %4, align 8, !tbaa !1240
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1, !tbaa !1246
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 1, !tbaa !1260
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !1261
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %14, align 1, !tbaa !1262
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1, !tbaa !1263
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1, !tbaa !1264
  %17 = inttoptr i64 %9 to i64*
  %18 = load i64, i64* %17
  store i64 %18, i64* %6, align 8, !tbaa !1240
  %19 = inttoptr i64 %8 to i64*
  %20 = load i64, i64* %19
  store i64 %20, i64* %3, align 8, !tbaa !1240
  %21 = add i64 %8, 8
  store i64 %21, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402860_zran3(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_402860:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %18 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %22 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %28 = load i64, i64* %21, align 8
  %29 = load i64, i64* %20, align 8, !tbaa !1240
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %28, i64* %31
  store i64 %30, i64* %21, align 8, !tbaa !1240
  %32 = load i64, i64* %25, align 8
  %33 = add i64 %29, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %15, align 8
  %36 = add i64 %29, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = add i64 %29, -952
  store i64 %38, i64* %20, align 8, !tbaa !1240
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %45 = add i64 %29, 8
  %46 = inttoptr i64 %45 to i32*
  %47 = load i32, i32* %46
  %48 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 984) to double*)
  %49 = bitcast [32 x %union.VectorReg]* %26 to double*
  store double %48, double* %49, align 1, !tbaa !1244
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %51 = bitcast i64* %50 to double*
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %52 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 992) to double*)
  %53 = bitcast %union.VectorReg* %27 to double*
  store double %52, double* %53, align 1, !tbaa !1244
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %55 = bitcast i64* %54 to double*
  store double 0.000000e+00, double* %55, align 1, !tbaa !1244
  %56 = add i64 %29, -32
  %57 = load i64, i64* %19, align 8
  %58 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %58
  %59 = add i64 %29, -36
  %60 = load i32, i32* %9, align 4
  %61 = inttoptr i64 %59 to i32*
  store i32 %60, i32* %61
  %62 = add i64 %29, -40
  %63 = load i32, i32* %7, align 4
  %64 = inttoptr i64 %62 to i32*
  store i32 %63, i32* %64
  %65 = add i64 %29, -44
  %66 = load i32, i32* %5, align 4
  %67 = inttoptr i64 %65 to i32*
  store i32 %66, i32* %67
  %68 = add i64 %29, -48
  %69 = load i32, i32* %11, align 4
  %70 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %70
  %71 = add i64 %29, -52
  %72 = load i32, i32* %13, align 4
  %73 = inttoptr i64 %71 to i32*
  store i32 %72, i32* %73
  %74 = inttoptr i64 %62 to i32*
  %75 = load i32, i32* %74
  %76 = zext i32 %75 to i64
  %77 = load i64, i64* %21, align 8
  %78 = add i64 %77, -28
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %16, align 8, !tbaa !1240
  store i64 %81, i64* %23, align 8, !tbaa !1240
  %82 = add i64 %77, -24
  %83 = inttoptr i64 %82 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %24, align 8, !tbaa !1240
  %85 = add i64 %77, -56
  %86 = inttoptr i64 %85 to i64*
  store i64 %84, i64* %86
  %87 = add i64 %77, -148
  %88 = inttoptr i64 %87 to i32*
  store i32 10, i32* %88
  %89 = add i64 %77, -924
  %90 = inttoptr i64 %89 to i32*
  store i32 %47, i32* %90
  %91 = add i64 %77, -936
  %92 = inttoptr i64 %91 to i64*
  store i64 %81, i64* %92
  %93 = add i64 %77, -944
  %94 = inttoptr i64 %93 to i64*
  store i64 %76, i64* %94
  %95 = add i64 %1, 108
  %96 = load i64, i64* %20, align 8, !tbaa !1240
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %95, i64* %98
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %101 = load i64, i64* %100, align 8, !alias.scope !1760, !noalias !1763
  %102 = inttoptr i64 %97 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %3, align 8, !alias.scope !1760, !noalias !1763
  store i64 %96, i64* %20, align 8, !alias.scope !1760, !noalias !1763
  %104 = tail call i64 @pow(i64 %76, i64 %101), !noalias !1760
  store i64 %104, i64* %99, align 8, !alias.scope !1760, !noalias !1763
  %105 = load i64, i64* %3, align 8
  %106 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 976) to double*)
  store double %106, double* %53, align 1, !tbaa !1244
  store double 0.000000e+00, double* %55, align 1, !tbaa !1244
  %107 = load i64, i64* %21, align 8
  %108 = add i64 %107, -160
  %109 = load double, double* %49, align 1
  %110 = inttoptr i64 %108 to double*
  store double %109, double* %110
  %111 = add i64 %107, -168
  %112 = inttoptr i64 %111 to double*
  store double %106, double* %112
  %113 = inttoptr i64 %108 to double*
  %114 = load double, double* %113
  store double %114, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %115 = add i64 %107, -40
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116
  %118 = zext i32 %117 to i64
  store i64 %118, i64* %19, align 8, !tbaa !1240
  %119 = add i64 %105, 17332
  %120 = add i64 %105, 40
  %121 = load i64, i64* %20, align 8, !tbaa !1240
  %122 = add i64 %121, -8
  %123 = inttoptr i64 %122 to i64*
  store i64 %120, i64* %123
  store i64 %122, i64* %20, align 8, !tbaa !1240
  %124 = tail call %struct.Memory* @sub_406c80_power(%struct.State* nonnull %0, i64 %119, %struct.Memory* %2)
  %125 = load i64, i64* %21, align 8
  %126 = add i64 %125, -128
  %127 = load i64, i64* %3, align 8
  %128 = load double, double* %49, align 1
  %129 = inttoptr i64 %126 to double*
  store double %128, double* %129
  %130 = add i64 %125, -160
  %131 = inttoptr i64 %130 to double*
  %132 = load double, double* %131
  store double %132, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %133 = add i64 %125, -40
  %134 = inttoptr i64 %133 to i32*
  %135 = load i32, i32* %134
  %136 = add i64 %125, -44
  %137 = inttoptr i64 %136 to i32*
  %138 = load i32, i32* %137
  %139 = sext i32 %135 to i64
  %140 = sext i32 %138 to i64
  %141 = mul nsw i64 %140, %139
  %142 = and i64 %141, 4294967295
  store i64 %142, i64* %14, align 8, !tbaa !1240
  %143 = and i64 %141, 4294967295
  store i64 %143, i64* %19, align 8, !tbaa !1240
  %144 = add i64 %127, 17292
  %145 = add i64 %127, 27
  %146 = load i64, i64* %20, align 8, !tbaa !1240
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %145, i64* %148
  store i64 %147, i64* %20, align 8, !tbaa !1240
  %149 = tail call %struct.Memory* @sub_406c80_power(%struct.State* nonnull %0, i64 %144, %struct.Memory* %124)
  %150 = load i64, i64* %21, align 8
  %151 = add i64 %150, -136
  %152 = load i64, i64* %3, align 8
  %153 = load double, double* %49, align 1
  %154 = inttoptr i64 %151 to double*
  store double %153, double* %154
  %155 = add i64 %150, -56
  %156 = inttoptr i64 %155 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %23, align 8, !tbaa !1240
  %158 = add i64 %150, -28
  %159 = inttoptr i64 %158 to i32*
  %160 = load i32, i32* %159
  %161 = zext i32 %160 to i64
  store i64 %161, i64* %18, align 8, !tbaa !1240
  %162 = add i64 %150, -32
  %163 = inttoptr i64 %162 to i32*
  %164 = load i32, i32* %163
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %17, align 8, !tbaa !1240
  %166 = add i64 %150, -36
  %167 = inttoptr i64 %166 to i32*
  %168 = load i32, i32* %167
  %169 = zext i32 %168 to i64
  store i64 %169, i64* %16, align 8, !tbaa !1240
  store i64 %157, i64* %19, align 8, !tbaa !1240
  %170 = add i64 %152, -399
  %171 = add i64 %152, 29
  %172 = load i64, i64* %20, align 8, !tbaa !1240
  %173 = add i64 %172, -8
  %174 = inttoptr i64 %173 to i64*
  store i64 %171, i64* %174
  store i64 %173, i64* %20, align 8, !tbaa !1240
  %175 = tail call %struct.Memory* @sub_402780_zero3(%struct.State* nonnull %0, i64 %170, %struct.Memory* %149)
  %176 = load i64, i64* %3, align 8
  %177 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1400) to i32*)
  %178 = add i32 %177, -2
  %179 = zext i32 %178 to i64
  store i64 %179, i64* %14, align 8, !tbaa !1240
  %180 = load i64, i64* %21, align 8
  %181 = add i64 %180, -40
  %182 = inttoptr i64 %181 to i32*
  %183 = load i32, i32* %182
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %16, align 8, !tbaa !1240
  %185 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1408) to i32*)
  %186 = add i32 %185, -2
  %187 = add i64 %180, -44
  %188 = inttoptr i64 %187 to i32*
  %189 = load i32, i32* %188
  %190 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1416) to i32*)
  %191 = add i32 %190, -2
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %22, align 8, !tbaa !1240
  %193 = sext i32 %189 to i64
  %194 = sext i32 %191 to i64
  %195 = mul nsw i64 %194, %193
  %196 = and i64 %195, 4294967295
  store i64 %196, i64* %18, align 8, !tbaa !1240
  %197 = trunc i64 %195 to i32
  %198 = add i32 %197, %186
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %17, align 8, !tbaa !1240
  %200 = load i64, i64* %16, align 8
  %201 = shl i64 %200, 32
  %202 = ashr exact i64 %201, 32
  %203 = sext i32 %198 to i64
  %204 = mul nsw i64 %203, %202
  %205 = and i64 %204, 4294967295
  store i64 %205, i64* %16, align 8, !tbaa !1240
  %206 = load i64, i64* %14, align 8
  %207 = trunc i64 %204 to i32
  %208 = trunc i64 %206 to i32
  %209 = add i32 %207, %208
  %210 = zext i32 %209 to i64
  store i64 %210, i64* %14, align 8, !tbaa !1240
  %211 = load i64, i64* %21, align 8
  %212 = add i64 %211, -348
  %213 = inttoptr i64 %212 to i32*
  store i32 %209, i32* %213
  %214 = add i64 %211, -160
  %215 = inttoptr i64 %214 to double*
  %216 = load double, double* %215
  store double %216, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %217 = inttoptr i64 %212 to i32*
  %218 = load i32, i32* %217
  %219 = zext i32 %218 to i64
  store i64 %219, i64* %19, align 8, !tbaa !1240
  %220 = add i64 %176, 17236
  %221 = add i64 %176, 74
  %222 = load i64, i64* %20, align 8, !tbaa !1240
  %223 = add i64 %222, -8
  %224 = inttoptr i64 %223 to i64*
  store i64 %221, i64* %224
  store i64 %223, i64* %20, align 8, !tbaa !1240
  %225 = tail call %struct.Memory* @sub_406c80_power(%struct.State* nonnull %0, i64 %220, %struct.Memory* %175)
  %226 = load i64, i64* %21, align 8
  %227 = add i64 %226, -112
  %228 = load i64, i64* %3, align 8
  store i64 %227, i64* %19, align 8, !tbaa !1240
  %229 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 976) to double*)
  store double %229, double* %53, align 1, !tbaa !1244
  store double 0.000000e+00, double* %55, align 1, !tbaa !1244
  %230 = add i64 %226, -144
  %231 = load double, double* %49, align 1
  %232 = inttoptr i64 %230 to double*
  store double %231, double* %232
  %233 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1404) to i32*)
  %234 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1400) to i32*)
  %235 = sub i32 %233, %234
  %236 = add i32 %235, 1
  %237 = add i64 %226, -84
  %238 = inttoptr i64 %237 to i32*
  store i32 %236, i32* %238
  %239 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1404) to i32*)
  %240 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1400) to i32*)
  %241 = sub i32 %239, %240
  %242 = add i32 %241, 2
  %243 = load i64, i64* %21, align 8
  %244 = add i64 %243, -88
  %245 = inttoptr i64 %244 to i32*
  store i32 %242, i32* %245
  %246 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1412) to i32*)
  %247 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1408) to i32*)
  %248 = sub i32 %246, %247
  %249 = add i32 %248, 2
  %250 = add i64 %243, -92
  %251 = inttoptr i64 %250 to i32*
  store i32 %249, i32* %251
  %252 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1420) to i32*)
  %253 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1416) to i32*)
  %254 = sub i32 %252, %253
  %255 = lshr i32 %254, 31
  %256 = add i32 %254, 2
  %257 = icmp ugt i32 %254, -3
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %39, align 1, !tbaa !1246
  %259 = and i32 %256, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #11
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %40, align 1, !tbaa !1260
  %264 = xor i32 %256, %254
  %265 = lshr i32 %264, 4
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %41, align 1, !tbaa !1261
  %268 = icmp eq i32 %256, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %42, align 1, !tbaa !1262
  %270 = lshr i32 %256, 31
  %271 = trunc i32 %270 to i8
  store i8 %271, i8* %43, align 1, !tbaa !1263
  %272 = xor i32 %270, %255
  %273 = add nuw nsw i32 %272, %270
  %274 = icmp eq i32 %273, 2
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %44, align 1, !tbaa !1264
  %276 = load i64, i64* %21, align 8
  %277 = add i64 %276, -96
  %278 = inttoptr i64 %277 to i32*
  store i32 %256, i32* %278
  %279 = add i64 %276, -112
  %280 = load double, double* %53, align 1
  %281 = inttoptr i64 %279 to double*
  store double %280, double* %281
  %282 = add i64 %276, -144
  %283 = inttoptr i64 %282 to double*
  %284 = load double, double* %283
  store double %284, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %285 = add i64 %228, 19466
  %286 = add i64 %228, 118
  %287 = load i64, i64* %20, align 8, !tbaa !1240
  %288 = add i64 %287, -8
  %289 = inttoptr i64 %288 to i64*
  store i64 %286, i64* %289
  store i64 %288, i64* %20, align 8, !tbaa !1240
  %290 = tail call %struct.Memory* @sub_407580_randlc(%struct.State* nonnull %0, i64 %285, %struct.Memory* %225)
  %291 = load i64, i64* %21, align 8
  %292 = add i64 %291, -920
  %293 = load i64, i64* %3, align 8
  %294 = load double, double* %49, align 1
  %295 = inttoptr i64 %292 to double*
  store double %294, double* %295
  %296 = add i64 %291, -80
  %297 = add i64 %293, 15
  %298 = inttoptr i64 %296 to i32*
  store i32 1, i32* %298
  br label %block_4029fb

block_402dfe:                                     ; preds = %block_402df1
  %299 = add i64 %454, -336
  store i32 0, i32* %560, align 1, !tbaa !1481
  store i32 0, i32* %562, align 1, !tbaa !1481
  %300 = add i64 %454, -344
  %301 = load double, double* %49, align 1
  %302 = inttoptr i64 %300 to double*
  store double %301, double* %302
  %303 = inttoptr i64 %300 to double*
  %304 = load double, double* %303
  store double %304, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %305 = add i64 %454, -72
  %306 = inttoptr i64 %305 to i32*
  %307 = load i32, i32* %306
  %308 = sext i32 %307 to i64
  %309 = shl nsw i64 %308, 4
  store i64 %309, i64* %16, align 8, !tbaa !1240
  %310 = add i64 %309, %299
  store i64 %310, i64* %14, align 8, !tbaa !1240
  %311 = icmp ult i64 %310, %299
  %312 = icmp ult i64 %310, %309
  %313 = or i1 %311, %312
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %39, align 1, !tbaa !1246
  %315 = trunc i64 %310 to i32
  %316 = and i32 %315, 255
  %317 = tail call i32 @llvm.ctpop.i32(i32 %316) #11
  %318 = trunc i32 %317 to i8
  %319 = and i8 %318, 1
  %320 = xor i8 %319, 1
  store i8 %320, i8* %40, align 1, !tbaa !1260
  %321 = xor i64 %309, %299
  %322 = xor i64 %321, %310
  %323 = lshr i64 %322, 4
  %324 = trunc i64 %323 to i8
  %325 = and i8 %324, 1
  store i8 %325, i8* %41, align 1, !tbaa !1261
  %326 = icmp eq i64 %310, 0
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %42, align 1, !tbaa !1262
  %328 = lshr i64 %310, 63
  %329 = trunc i64 %328 to i8
  store i8 %329, i8* %43, align 1, !tbaa !1263
  %330 = lshr i64 %299, 63
  %331 = lshr i64 %308, 59
  %332 = and i64 %331, 1
  %333 = xor i64 %328, %330
  %334 = xor i64 %328, %332
  %335 = add nuw nsw i64 %333, %334
  %336 = icmp eq i64 %335, 2
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %44, align 1, !tbaa !1264
  %338 = add i64 %310, 8
  %339 = inttoptr i64 %338 to double*
  %340 = load double, double* %339
  store double %340, double* %53, align 1, !tbaa !1244
  store double 0.000000e+00, double* %55, align 1, !tbaa !1244
  %341 = add i64 %464, 46
  store i64 %341, i64* %3, align 8
  %342 = fcmp uno double %340, %304
  br i1 %342, label %343, label %357

; <label>:343:                                    ; preds = %block_402dfe
  %344 = fadd double %340, %304
  %345 = bitcast double %344 to i64
  %346 = and i64 %345, 9221120237041090560
  %347 = icmp eq i64 %346, 9218868437227405312
  %348 = and i64 %345, 2251799813685247
  %349 = icmp ne i64 %348, 0
  %350 = and i1 %347, %349
  br i1 %350, label %351, label %363

; <label>:351:                                    ; preds = %343
  %352 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %341, %struct.Memory* %455) #14
  %353 = load i64, i64* %3, align 8
  %354 = load i8, i8* %39, align 1, !tbaa !1246
  %355 = load i8, i8* %42, align 1, !tbaa !1262
  %356 = load i64, i64* %21, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:357:                                    ; preds = %block_402dfe
  %358 = fcmp ogt double %340, %304
  br i1 %358, label %363, label %359

; <label>:359:                                    ; preds = %357
  %360 = fcmp olt double %340, %304
  br i1 %360, label %363, label %361

; <label>:361:                                    ; preds = %359
  %362 = fcmp oeq double %340, %304
  br i1 %362, label %363, label %366

; <label>:363:                                    ; preds = %361, %359, %357, %343
  %364 = phi i8 [ 0, %357 ], [ 0, %359 ], [ 1, %361 ], [ 1, %343 ]
  %365 = phi i8 [ 0, %357 ], [ 1, %359 ], [ 0, %361 ], [ 1, %343 ]
  br label %366

; <label>:366:                                    ; preds = %363, %361
  %367 = phi i8 [ %364, %363 ], [ %327, %361 ]
  %368 = phi i8 [ %365, %363 ], [ %314, %361 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %366, %351
  %369 = phi i64 [ %356, %351 ], [ %454, %366 ]
  %370 = phi i8 [ %355, %351 ], [ %367, %366 ]
  %371 = phi i8 [ %354, %351 ], [ %368, %366 ]
  %372 = phi i64 [ %353, %351 ], [ %341, %366 ]
  %373 = phi %struct.Memory* [ %352, %351 ], [ %455, %366 ]
  %374 = or i8 %370, %371
  %375 = icmp ne i8 %374, 0
  %376 = select i1 %375, i64 143, i64 6
  %377 = add i64 %372, %376
  %378 = add i64 %369, -348
  %379 = inttoptr i64 %378 to i32*
  %380 = load i32, i32* %379
  %381 = sext i32 %380 to i64
  %382 = shl nsw i64 %381, 3
  %383 = add i64 %369, -908
  %384 = add i64 %383, %382
  %385 = inttoptr i64 %384 to i32*
  store i32 0, i32* %385
  br i1 %375, label %block_402ebb, label %block_402e32

block_4029fb:                                     ; preds = %block_402aa1, %block_402860
  %386 = phi i64 [ %297, %block_402860 ], [ %1229, %block_402aa1 ]
  %387 = phi i64 [ %291, %block_402860 ], [ %1219, %block_402aa1 ]
  %388 = phi %struct.Memory* [ %290, %block_402860 ], [ %1218, %block_402aa1 ]
  %389 = add i64 %387, -80
  %390 = inttoptr i64 %389 to i32*
  %391 = load i32, i32* %390
  %392 = add i64 %387, -96
  %393 = inttoptr i64 %392 to i32*
  %394 = load i32, i32* %393
  %395 = sub i32 %391, %394
  %396 = lshr i32 %395, 31
  %397 = trunc i32 %396 to i8
  %398 = lshr i32 %391, 31
  %399 = lshr i32 %394, 31
  %400 = xor i32 %399, %398
  %401 = xor i32 %396, %398
  %402 = add nuw nsw i32 %401, %400
  %403 = icmp eq i32 %402, 2
  %404 = icmp ne i8 %397, 0
  %405 = xor i1 %404, %403
  %406 = select i1 %405, i64 12, i64 205
  %407 = add i64 %386, %406
  br i1 %405, label %block_402a07, label %block_402ac8

block_403008:                                     ; preds = %block_402fc0, %block_402f37
  %408 = phi i64 [ %1527, %block_402fc0 ], [ %657, %block_402f37 ]
  %409 = phi i64 [ %881, %block_402fc0 ], [ %671, %block_402f37 ]
  %410 = phi %struct.Memory* [ %1531, %block_402fc0 ], [ %1531, %block_402f37 ]
  %411 = add i64 %408, -348
  %412 = inttoptr i64 %411 to i32*
  %413 = load i32, i32* %412
  %414 = add i32 %413, -1
  %415 = inttoptr i64 %411 to i32*
  store i32 %414, i32* %415
  %416 = add i64 %409, -535
  br label %block_402df1

block_4030f5:                                     ; preds = %block_4030e6
  %417 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 1000) to double*)
  store double %417, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %418 = inttoptr i64 %1086 to i64*
  %419 = load i64, i64* %418
  %420 = sext i32 %1603 to i64
  %421 = shl nsw i64 %420, 3
  %422 = add i64 %550, %421
  %423 = inttoptr i64 %422 to i32*
  %424 = load i32, i32* %423
  %425 = sext i32 %424 to i64
  %426 = inttoptr i64 %1087 to i64*
  %427 = load i64, i64* %426
  %428 = inttoptr i64 %1088 to i64*
  %429 = load i64, i64* %428
  %430 = mul i64 %429, %427
  %431 = mul i64 %430, %425
  %432 = shl i64 %431, 3
  %433 = add i64 %432, %419
  %434 = add i64 %551, %421
  %435 = inttoptr i64 %434 to i32*
  %436 = load i32, i32* %435
  %437 = sext i32 %436 to i64
  %438 = mul i64 %429, %437
  %439 = shl i64 %438, 3
  %440 = add i64 %439, %433
  %441 = add i64 %552, %421
  %442 = inttoptr i64 %441 to i32*
  %443 = load i32, i32* %442
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 3
  %446 = add i64 %445, %440
  %447 = inttoptr i64 %446 to double*
  store double %417, double* %447
  %448 = inttoptr i64 %456 to i32*
  %449 = load i32, i32* %448
  %450 = add i32 %449, -1
  %451 = inttoptr i64 %456 to i32*
  store i32 %450, i32* %451
  %452 = add i64 %1618, -15
  br label %block_4030e6

block_402df1:                                     ; preds = %block_402dd9, %block_403008
  %453 = phi i64 [ %558, %block_402dd9 ], [ %416, %block_403008 ]
  %454 = phi i64 [ %1237, %block_402dd9 ], [ %408, %block_403008 ]
  %455 = phi %struct.Memory* [ %1238, %block_402dd9 ], [ %410, %block_403008 ]
  %456 = add i64 %454, -348
  %457 = add i64 %453, 7
  %458 = inttoptr i64 %456 to i32*
  %459 = load i32, i32* %458
  %460 = lshr i32 %459, 31
  %461 = trunc i32 %460 to i8
  %462 = icmp ne i8 %461, 0
  %463 = select i1 %462, i64 553, i64 6
  %464 = add i64 %457, %463
  br i1 %462, label %block_403021, label %block_402dfe

block_403068:                                     ; preds = %block_40305c
  store i32 0, i32* %560, align 1, !tbaa !1481
  store i32 0, i32* %562, align 1, !tbaa !1481
  store i32 0, i32* %563, align 1, !tbaa !1481
  store i32 0, i32* %565, align 1, !tbaa !1481
  %465 = inttoptr i64 %1086 to i64*
  %466 = load i64, i64* %465
  %467 = inttoptr i64 %1078 to i32*
  %468 = load i32, i32* %467
  %469 = sext i32 %468 to i64
  %470 = inttoptr i64 %1087 to i64*
  %471 = load i64, i64* %470
  %472 = inttoptr i64 %1088 to i64*
  %473 = load i64, i64* %472
  %474 = mul i64 %473, %471
  %475 = mul i64 %474, %469
  %476 = shl i64 %475, 3
  %477 = add i64 %476, %466
  %478 = inttoptr i64 %1082 to i32*
  %479 = load i32, i32* %478
  %480 = sext i32 %479 to i64
  %481 = mul i64 %473, %480
  %482 = shl i64 %481, 3
  %483 = add i64 %482, %477
  %484 = sext i32 %1092 to i64
  %485 = shl nsw i64 %484, 3
  %486 = add i64 %485, %483
  %487 = load double, double* %49, align 1
  %488 = inttoptr i64 %486 to double*
  store double %487, double* %488
  %489 = inttoptr i64 %1084 to i32*
  %490 = load i32, i32* %489
  %491 = add i32 %490, 1
  %492 = inttoptr i64 %1084 to i32*
  store i32 %491, i32* %492
  %493 = add i64 %1106, -12
  br label %block_40305c

block_402adf:                                     ; preds = %block_402ad2
  %494 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 944) to double*)
  store double %494, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  store i32 0, i32* %678, align 1, !tbaa !1481
  store i32 0, i32* %680, align 1, !tbaa !1481
  store i32 0, i32* %681, align 1, !tbaa !1481
  store i32 0, i32* %683, align 1, !tbaa !1481
  %495 = sext i32 %571 to i64
  %496 = shl nsw i64 %495, 4
  %497 = add i64 %496, %677
  store i64 %497, i64* %17, align 8, !tbaa !1240
  %498 = add i64 %497, 8
  %499 = load double, double* %53, align 1
  %500 = inttoptr i64 %498 to double*
  store double %499, double* %500
  %501 = inttoptr i64 %674 to i32*
  %502 = load i32, i32* %501
  %503 = sext i32 %502 to i64
  %504 = shl nsw i64 %503, 3
  %505 = add i64 %684, %504
  %506 = inttoptr i64 %505 to i32*
  store i32 0, i32* %506
  %507 = inttoptr i64 %674 to i32*
  %508 = load i32, i32* %507
  %509 = sext i32 %508 to i64
  %510 = shl nsw i64 %509, 3
  %511 = add i64 %685, %510
  %512 = inttoptr i64 %511 to i32*
  store i32 0, i32* %512
  %513 = inttoptr i64 %674 to i32*
  %514 = load i32, i32* %513
  %515 = sext i32 %514 to i64
  %516 = shl nsw i64 %515, 3
  %517 = add i64 %686, %516
  %518 = inttoptr i64 %517 to i32*
  store i32 0, i32* %518
  %519 = inttoptr i64 %674 to i32*
  %520 = load i32, i32* %519
  %521 = sext i32 %520 to i64
  %522 = shl nsw i64 %521, 4
  %523 = add i64 %522, %677
  %524 = inttoptr i64 %523 to double*
  store double %494, double* %524
  %525 = inttoptr i64 %674 to i32*
  %526 = load i32, i32* %525
  %527 = sext i32 %526 to i64
  %528 = shl nsw i64 %527, 3
  %529 = add i64 %687, %528
  %530 = inttoptr i64 %529 to i32*
  store i32 0, i32* %530
  %531 = inttoptr i64 %674 to i32*
  %532 = load i32, i32* %531
  %533 = sext i32 %532 to i64
  %534 = shl nsw i64 %533, 3
  %535 = add i64 %688, %534
  %536 = inttoptr i64 %535 to i32*
  store i32 0, i32* %536
  %537 = inttoptr i64 %674 to i32*
  %538 = load i32, i32* %537
  %539 = sext i32 %538 to i64
  %540 = shl nsw i64 %539, 3
  %541 = add i64 %689, %540
  %542 = inttoptr i64 %541 to i32*
  store i32 0, i32* %542
  %543 = inttoptr i64 %674 to i32*
  %544 = load i32, i32* %543
  %545 = add i32 %544, 1
  %546 = inttoptr i64 %674 to i32*
  store i32 %545, i32* %546
  %547 = add i64 %582, -13
  br label %block_402ad2

block_4030dc:                                     ; preds = %block_403036
  %548 = add i64 %901, 10
  %549 = inttoptr i64 %456 to i32*
  store i32 9, i32* %549
  %550 = add i64 %454, -672
  %551 = add i64 %454, -752
  %552 = add i64 %454, -832
  br label %block_4030e6

block_402dd9:                                     ; preds = %block_402ba0
  %553 = add i64 %1237, -72
  %554 = inttoptr i64 %553 to i32*
  store i32 9, i32* %554
  %555 = add i64 %1237, -60
  %556 = inttoptr i64 %555 to i32*
  store i32 9, i32* %556
  %557 = add i64 %1237, -348
  %558 = add i64 %1258, 24
  %559 = inttoptr i64 %557 to i32*
  store i32 9, i32* %559
  %560 = bitcast [32 x %union.VectorReg]* %26 to i32*
  %561 = getelementptr inbounds i8, i8* %672, i64 4
  %562 = bitcast i8* %561 to i32*
  %563 = bitcast i64* %50 to i32*
  %564 = getelementptr inbounds i8, i8* %672, i64 12
  %565 = bitcast i8* %564 to i32*
  br label %block_402df1

block_403055:                                     ; preds = %block_403049
  %566 = add i64 %1313, 7
  %567 = inttoptr i64 %1084 to i32*
  store i32 0, i32* %567
  br label %block_40305c

block_402ad2:                                     ; preds = %block_402ac8, %block_402adf
  %568 = phi i64 [ %675, %block_402ac8 ], [ %547, %block_402adf ]
  %569 = phi %struct.Memory* [ %388, %block_402ac8 ], [ %569, %block_402adf ]
  %570 = inttoptr i64 %674 to i32*
  %571 = load i32, i32* %570
  %572 = add i32 %571, -10
  %573 = lshr i32 %572, 31
  %574 = trunc i32 %573 to i8
  %575 = lshr i32 %571, 31
  %576 = xor i32 %573, %575
  %577 = add nuw nsw i32 %576, %575
  %578 = icmp eq i32 %577, 2
  %579 = icmp ne i8 %574, 0
  %580 = xor i1 %579, %578
  %581 = select i1 %580, i64 13, i64 199
  %582 = add i64 %568, %581
  br i1 %580, label %block_402adf, label %block_402b99

block_402bd0:                                     ; preds = %block_402bc9, %block_402da0
  %583 = phi i64 [ %1453, %block_402bc9 ], [ %1208, %block_402da0 ]
  %584 = phi i64 [ %834, %block_402bc9 ], [ %1202, %block_402da0 ]
  %585 = phi %struct.Memory* [ %835, %block_402bc9 ], [ %1201, %block_402da0 ]
  %586 = add i64 %584, -72
  %587 = inttoptr i64 %586 to i32*
  %588 = load i32, i32* %587
  %589 = add i64 %584, -28
  %590 = inttoptr i64 %589 to i32*
  %591 = load i32, i32* %590
  %592 = add i32 %591, -1
  %593 = lshr i32 %592, 31
  %594 = sub i32 %588, %592
  %595 = lshr i32 %594, 31
  %596 = trunc i32 %595 to i8
  %597 = lshr i32 %588, 31
  %598 = xor i32 %593, %597
  %599 = xor i32 %595, %597
  %600 = add nuw nsw i32 %599, %598
  %601 = icmp eq i32 %600, 2
  %602 = icmp ne i8 %596, 0
  %603 = xor i1 %602, %601
  %604 = select i1 %603, i64 17, i64 483
  %605 = add i64 %583, %604
  br i1 %603, label %block_402be1, label %block_402db3

block_402f37:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %606 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1400) to i32*)
  %607 = add i32 %606, -2
  %608 = add i64 %1527, -60
  %609 = inttoptr i64 %608 to i32*
  %610 = load i32, i32* %609
  %611 = sext i32 %610 to i64
  %612 = shl nsw i64 %611, 3
  %613 = add nsw i64 %612, -432
  %614 = add i64 %613, %1527
  %615 = inttoptr i64 %614 to i32*
  %616 = load i32, i32* %615
  %617 = add i32 %616, %607
  %618 = inttoptr i64 %1536 to i32*
  %619 = load i32, i32* %618
  %620 = sext i32 %619 to i64
  %621 = shl nsw i64 %620, 3
  %622 = add i64 %1527, -832
  %623 = add i64 %622, %621
  %624 = inttoptr i64 %623 to i32*
  store i32 %617, i32* %624
  %625 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1408) to i32*)
  %626 = add i32 %625, -2
  %627 = load i64, i64* %21, align 8
  %628 = add i64 %627, -60
  %629 = inttoptr i64 %628 to i32*
  %630 = load i32, i32* %629
  %631 = sext i32 %630 to i64
  %632 = shl nsw i64 %631, 3
  %633 = add nsw i64 %632, -512
  %634 = add i64 %633, %627
  %635 = inttoptr i64 %634 to i32*
  %636 = load i32, i32* %635
  %637 = add i32 %636, %626
  %638 = add i64 %627, -348
  %639 = inttoptr i64 %638 to i32*
  %640 = load i32, i32* %639
  %641 = sext i32 %640 to i64
  %642 = shl nsw i64 %641, 3
  %643 = add i64 %627, -752
  %644 = add i64 %643, %642
  %645 = inttoptr i64 %644 to i32*
  store i32 %637, i32* %645
  %646 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1416) to i32*)
  %647 = add i32 %646, -2
  %648 = inttoptr i64 %628 to i32*
  %649 = load i32, i32* %648
  %650 = sext i32 %649 to i64
  %651 = shl nsw i64 %650, 3
  %652 = add nsw i64 %651, -592
  %653 = add i64 %652, %627
  %654 = inttoptr i64 %653 to i32*
  %655 = load i32, i32* %654
  %656 = add i32 %655, %647
  %657 = load i64, i64* %21, align 8
  %658 = add i64 %657, -348
  %659 = inttoptr i64 %658 to i32*
  %660 = load i32, i32* %659
  %661 = sext i32 %660 to i64
  %662 = shl nsw i64 %661, 3
  %663 = add i64 %657, -672
  %664 = add i64 %663, %662
  %665 = inttoptr i64 %664 to i32*
  store i32 %656, i32* %665
  %666 = add i64 %657, -60
  %667 = inttoptr i64 %666 to i32*
  %668 = load i32, i32* %667
  %669 = add i32 %668, -1
  %670 = inttoptr i64 %666 to i32*
  store i32 %669, i32* %670
  %671 = add i64 %1535, 209
  br label %block_403008

block_402ac8:                                     ; preds = %block_4029fb
  %672 = bitcast [32 x %union.VectorReg]* %26 to i8*
  %673 = bitcast %union.VectorReg* %27 to i8*
  %674 = add i64 %387, -348
  %675 = add i64 %407, 10
  %676 = inttoptr i64 %674 to i32*
  store i32 0, i32* %676
  %677 = add i64 %387, -336
  %678 = bitcast %union.VectorReg* %27 to i32*
  %679 = getelementptr inbounds i8, i8* %673, i64 4
  %680 = bitcast i8* %679 to i32*
  %681 = bitcast i64* %54 to i32*
  %682 = getelementptr inbounds i8, i8* %673, i64 12
  %683 = bitcast i8* %682 to i32*
  %684 = add i64 %387, -428
  %685 = add i64 %387, -508
  %686 = add i64 %387, -588
  %687 = add i64 %387, -432
  %688 = add i64 %387, -512
  %689 = add i64 %387, -592
  br label %block_402ad2

block_402be1:                                     ; preds = %block_402bd0
  %690 = add i64 %584, -56
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  store i64 %692, i64* %14, align 8, !tbaa !1240
  %693 = add i64 %584, -80
  %694 = inttoptr i64 %693 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  %697 = add i64 %584, -944
  %698 = inttoptr i64 %697 to i64*
  %699 = load i64, i64* %698
  %700 = add i64 %584, -936
  %701 = inttoptr i64 %700 to i64*
  %702 = load i64, i64* %701
  store i64 %702, i64* %18, align 8, !tbaa !1240
  %703 = sext i64 %699 to i128
  %704 = and i128 %703, -18446744073709551616
  %705 = sext i64 %702 to i128
  %706 = and i128 %705, -18446744073709551616
  %707 = zext i64 %699 to i128
  %708 = or i128 %704, %707
  %709 = zext i64 %702 to i128
  %710 = or i128 %706, %709
  %711 = mul nsw i128 %710, %708
  %712 = trunc i128 %711 to i64
  store i64 %712, i64* %17, align 8, !tbaa !1240
  %713 = sext i64 %712 to i128
  %714 = sext i32 %695 to i128
  %715 = and i128 %714, -18446744073709551616
  %716 = and i128 %713, -18446744073709551616
  %717 = zext i64 %696 to i128
  %718 = or i128 %715, %717
  %719 = and i128 %711, 18446744073709551615
  %720 = or i128 %716, %719
  %721 = mul nsw i128 %720, %718
  %722 = trunc i128 %721 to i64
  %723 = shl i64 %722, 3
  %724 = load i64, i64* %14, align 8
  %725 = add i64 %723, %724
  %726 = lshr i64 %725, 63
  %727 = load i64, i64* %21, align 8
  %728 = add i64 %727, -76
  %729 = inttoptr i64 %728 to i32*
  %730 = load i32, i32* %729
  %731 = sext i32 %730 to i64
  %732 = load i64, i64* %18, align 8
  %733 = mul i64 %732, %731
  %734 = shl i64 %733, 3
  %735 = add i64 %734, %725
  store i64 %735, i64* %14, align 8, !tbaa !1240
  %736 = icmp ult i64 %735, %725
  %737 = icmp ult i64 %735, %734
  %738 = or i1 %736, %737
  %739 = zext i1 %738 to i8
  store i8 %739, i8* %39, align 1, !tbaa !1246
  %740 = trunc i64 %735 to i32
  %741 = and i32 %740, 255
  %742 = tail call i32 @llvm.ctpop.i32(i32 %741) #11
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  store i8 %745, i8* %40, align 1, !tbaa !1260
  %746 = xor i64 %734, %725
  %747 = xor i64 %746, %735
  %748 = lshr i64 %747, 4
  %749 = trunc i64 %748 to i8
  %750 = and i8 %749, 1
  store i8 %750, i8* %41, align 1, !tbaa !1261
  %751 = icmp eq i64 %735, 0
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %42, align 1, !tbaa !1262
  %753 = lshr i64 %735, 63
  %754 = trunc i64 %753 to i8
  store i8 %754, i8* %43, align 1, !tbaa !1263
  %755 = lshr i64 %733, 60
  %756 = and i64 %755, 1
  %757 = xor i64 %753, %726
  %758 = xor i64 %753, %756
  %759 = add nuw nsw i64 %757, %758
  %760 = icmp eq i64 %759, 2
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %44, align 1, !tbaa !1264
  %762 = add i64 %727, -72
  %763 = inttoptr i64 %762 to i32*
  %764 = load i32, i32* %763
  %765 = sext i32 %764 to i64
  store i64 %765, i64* %16, align 8, !tbaa !1240
  %766 = shl nsw i64 %765, 3
  %767 = add i64 %766, %735
  %768 = inttoptr i64 %767 to double*
  %769 = load double, double* %768
  store double %769, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %770 = load i64, i64* %21, align 8
  %771 = add i64 %770, -328
  %772 = add i64 %605, 69
  store i64 %772, i64* %3, align 8
  %773 = inttoptr i64 %771 to double*
  %774 = load double, double* %773
  %775 = fcmp uno double %769, %774
  br i1 %775, label %776, label %789

; <label>:776:                                    ; preds = %block_402be1
  %777 = fadd double %769, %774
  %778 = bitcast double %777 to i64
  %779 = and i64 %778, 9221120237041090560
  %780 = icmp eq i64 %779, 9218868437227405312
  %781 = and i64 %778, 2251799813685247
  %782 = icmp ne i64 %781, 0
  %783 = and i1 %780, %782
  br i1 %783, label %784, label %795

; <label>:784:                                    ; preds = %776
  %785 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %772, %struct.Memory* %585) #14
  %786 = load i64, i64* %3, align 8
  %787 = load i8, i8* %39, align 1, !tbaa !1246
  %788 = load i8, i8* %42, align 1, !tbaa !1262
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2

; <label>:789:                                    ; preds = %block_402be1
  %790 = fcmp ogt double %769, %774
  br i1 %790, label %795, label %791

; <label>:791:                                    ; preds = %789
  %792 = fcmp olt double %769, %774
  br i1 %792, label %795, label %793

; <label>:793:                                    ; preds = %791
  %794 = fcmp oeq double %769, %774
  br i1 %794, label %795, label %798

; <label>:795:                                    ; preds = %793, %791, %789, %776
  %796 = phi i8 [ 0, %789 ], [ 0, %791 ], [ 1, %793 ], [ 1, %776 ]
  %797 = phi i8 [ 0, %789 ], [ 1, %791 ], [ 0, %793 ], [ 1, %776 ]
  br label %798

; <label>:798:                                    ; preds = %795, %793
  %799 = phi i8 [ %796, %795 ], [ %752, %793 ]
  %800 = phi i8 [ %797, %795 ], [ %739, %793 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2: ; preds = %798, %784
  %801 = phi i8 [ %788, %784 ], [ %799, %798 ]
  %802 = phi i8 [ %787, %784 ], [ %800, %798 ]
  %803 = phi i64 [ %786, %784 ], [ %772, %798 ]
  %804 = phi %struct.Memory* [ %785, %784 ], [ %585, %798 ]
  %805 = or i8 %801, %802
  %806 = icmp ne i8 %805, 0
  %807 = select i1 %806, i64 154, i64 6
  %808 = add i64 %803, %807
  br i1 %806, label %block_402cc0, label %block_402c2c

block_403042:                                     ; preds = %block_403036
  %809 = add i64 %901, 7
  %810 = inttoptr i64 %1082 to i32*
  store i32 0, i32* %810
  br label %block_403049

block_402ebb:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %811 = inttoptr i64 %378 to i32*
  %812 = load i32, i32* %811
  %813 = sext i32 %812 to i64
  %814 = shl nsw i64 %813, 3
  %815 = add i64 %369, -828
  %816 = add i64 %815, %814
  %817 = inttoptr i64 %816 to i32*
  store i32 0, i32* %817
  %818 = inttoptr i64 %378 to i32*
  %819 = load i32, i32* %818
  %820 = sext i32 %819 to i64
  %821 = shl nsw i64 %820, 3
  %822 = add i64 %369, -748
  %823 = add i64 %822, %821
  %824 = inttoptr i64 %823 to i32*
  store i32 0, i32* %824
  %825 = inttoptr i64 %378 to i32*
  %826 = load i32, i32* %825
  %827 = sext i32 %826 to i64
  %828 = shl nsw i64 %827, 3
  %829 = add i64 %369, -668
  %830 = add i64 %829, %828
  %831 = add i64 %377, 72
  %832 = inttoptr i64 %830 to i32*
  store i32 0, i32* %832
  br label %block_402f03

block_402bb8:                                     ; preds = %block_402db3, %block_402bb1
  %833 = phi i64 [ %969, %block_402bb1 ], [ %1235, %block_402db3 ]
  %834 = phi i64 [ %1237, %block_402bb1 ], [ %584, %block_402db3 ]
  %835 = phi %struct.Memory* [ %1238, %block_402bb1 ], [ %585, %block_402db3 ]
  %836 = add i64 %834, -76
  %837 = inttoptr i64 %836 to i32*
  %838 = load i32, i32* %837
  %839 = add i64 %834, -32
  %840 = inttoptr i64 %839 to i32*
  %841 = load i32, i32* %840
  %842 = add i32 %841, -1
  %843 = lshr i32 %842, 31
  %844 = sub i32 %838, %842
  %845 = lshr i32 %844, 31
  %846 = trunc i32 %845 to i8
  %847 = lshr i32 %838, 31
  %848 = xor i32 %843, %847
  %849 = xor i32 %845, %847
  %850 = add nuw nsw i32 %849, %848
  %851 = icmp eq i32 %850, 2
  %852 = icmp ne i8 %846, 0
  %853 = xor i1 %852, %851
  %854 = select i1 %853, i64 17, i64 526
  %855 = add i64 %833, %854
  br i1 %853, label %block_402bc9, label %block_402dc6

block_4030c9:                                     ; preds = %block_403049
  %856 = inttoptr i64 %1078 to i32*
  %857 = load i32, i32* %856
  %858 = add i32 %857, 1
  %859 = inttoptr i64 %1078 to i32*
  store i32 %858, i32* %859
  %860 = add i64 %1313, -147
  br label %block_403036

block_402fc0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %861 = inttoptr i64 %1536 to i32*
  %862 = load i32, i32* %861
  %863 = sext i32 %862 to i64
  %864 = shl nsw i64 %863, 3
  %865 = add i64 %1527, -832
  %866 = add i64 %865, %864
  %867 = inttoptr i64 %866 to i32*
  store i32 0, i32* %867
  %868 = inttoptr i64 %1536 to i32*
  %869 = load i32, i32* %868
  %870 = sext i32 %869 to i64
  %871 = shl nsw i64 %870, 3
  %872 = add i64 %1527, -752
  %873 = add i64 %872, %871
  %874 = inttoptr i64 %873 to i32*
  store i32 0, i32* %874
  %875 = inttoptr i64 %1536 to i32*
  %876 = load i32, i32* %875
  %877 = sext i32 %876 to i64
  %878 = shl nsw i64 %877, 3
  %879 = add i64 %1527, -672
  %880 = add i64 %879, %878
  %881 = add i64 %1535, 72
  %882 = inttoptr i64 %880 to i32*
  store i32 0, i32* %882
  br label %block_403008

block_403036:                                     ; preds = %block_403021, %block_4030c9
  %883 = phi i64 [ %1079, %block_403021 ], [ %860, %block_4030c9 ]
  %884 = phi %struct.Memory* [ %455, %block_403021 ], [ %1297, %block_4030c9 ]
  %885 = inttoptr i64 %1078 to i32*
  %886 = load i32, i32* %885
  %887 = inttoptr i64 %1081 to i32*
  %888 = load i32, i32* %887
  %889 = sub i32 %886, %888
  %890 = lshr i32 %889, 31
  %891 = trunc i32 %890 to i8
  %892 = lshr i32 %886, 31
  %893 = lshr i32 %888, 31
  %894 = xor i32 %893, %892
  %895 = xor i32 %890, %892
  %896 = add nuw nsw i32 %895, %894
  %897 = icmp eq i32 %896, 2
  %898 = icmp ne i8 %891, 0
  %899 = xor i1 %898, %897
  %900 = select i1 %899, i64 12, i64 166
  %901 = add i64 %883, %900
  br i1 %899, label %block_403042, label %block_4030dc

block_402e32:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %902 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1400) to i32*)
  %903 = add i32 %902, -2
  %904 = add i64 %369, -72
  %905 = inttoptr i64 %904 to i32*
  %906 = load i32, i32* %905
  %907 = sext i32 %906 to i64
  %908 = shl nsw i64 %907, 3
  %909 = add nsw i64 %908, -428
  %910 = add i64 %909, %369
  %911 = inttoptr i64 %910 to i32*
  %912 = load i32, i32* %911
  %913 = add i32 %912, %903
  %914 = inttoptr i64 %378 to i32*
  %915 = load i32, i32* %914
  %916 = sext i32 %915 to i64
  %917 = shl nsw i64 %916, 3
  %918 = add i64 %369, -828
  %919 = add i64 %918, %917
  %920 = inttoptr i64 %919 to i32*
  store i32 %913, i32* %920
  %921 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1408) to i32*)
  %922 = add i32 %921, -2
  %923 = load i64, i64* %21, align 8
  %924 = add i64 %923, -72
  %925 = inttoptr i64 %924 to i32*
  %926 = load i32, i32* %925
  %927 = sext i32 %926 to i64
  %928 = shl nsw i64 %927, 3
  %929 = add nsw i64 %928, -508
  %930 = add i64 %929, %923
  %931 = inttoptr i64 %930 to i32*
  %932 = load i32, i32* %931
  %933 = add i32 %932, %922
  %934 = add i64 %923, -348
  %935 = inttoptr i64 %934 to i32*
  %936 = load i32, i32* %935
  %937 = sext i32 %936 to i64
  %938 = shl nsw i64 %937, 3
  %939 = add i64 %923, -748
  %940 = add i64 %939, %938
  %941 = inttoptr i64 %940 to i32*
  store i32 %933, i32* %941
  %942 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1416) to i32*)
  %943 = add i32 %942, -2
  %944 = inttoptr i64 %924 to i32*
  %945 = load i32, i32* %944
  %946 = sext i32 %945 to i64
  %947 = shl nsw i64 %946, 3
  %948 = add nsw i64 %947, -588
  %949 = add i64 %948, %923
  %950 = inttoptr i64 %949 to i32*
  %951 = load i32, i32* %950
  %952 = add i32 %951, %943
  %953 = load i64, i64* %21, align 8
  %954 = add i64 %953, -348
  %955 = inttoptr i64 %954 to i32*
  %956 = load i32, i32* %955
  %957 = sext i32 %956 to i64
  %958 = shl nsw i64 %957, 3
  %959 = add i64 %953, -668
  %960 = add i64 %959, %958
  %961 = inttoptr i64 %960 to i32*
  store i32 %952, i32* %961
  %962 = add i64 %953, -72
  %963 = inttoptr i64 %962 to i32*
  %964 = load i32, i32* %963
  %965 = add i32 %964, -1
  %966 = inttoptr i64 %962 to i32*
  store i32 %965, i32* %966
  %967 = add i64 %377, 209
  br label %block_402f03

block_402bb1:                                     ; preds = %block_402ba0
  %968 = add i64 %1237, -76
  %969 = add i64 %1258, 7
  %970 = inttoptr i64 %968 to i32*
  store i32 1, i32* %970
  br label %block_402bb8

block_403179:                                     ; preds = %block_403188, %block_40316f
  %971 = phi i64 [ %1398, %block_40316f ], [ %1438, %block_403188 ]
  %972 = phi %struct.Memory* [ %1601, %block_40316f ], [ %972, %block_403188 ]
  %973 = inttoptr i64 %456 to i32*
  %974 = load i32, i32* %973
  %975 = inttoptr i64 %1074 to i32*
  %976 = load i32, i32* %975
  %977 = sub i32 %974, %976
  %978 = lshr i32 %977, 31
  %979 = trunc i32 %978 to i8
  %980 = lshr i32 %974, 31
  %981 = lshr i32 %976, 31
  %982 = xor i32 %981, %980
  %983 = xor i32 %978, %980
  %984 = add nuw nsw i32 %983, %982
  %985 = icmp eq i32 %984, 2
  %986 = icmp ne i8 %979, 0
  %987 = xor i1 %986, %985
  %988 = select i1 %987, i64 137, i64 15
  %989 = add i64 %971, %988
  br i1 %987, label %block_403202, label %block_403188

block_402c2c:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2
  store i64 10, i64* %22, align 8, !tbaa !1240
  store i64 1, i64* %1621, align 8, !tbaa !1240
  %990 = load i64, i64* %21, align 8
  %991 = add i64 %990, -592
  store i64 %991, i64* %16, align 8, !tbaa !1240
  %992 = add i64 %990, -512
  store i64 %992, i64* %17, align 8, !tbaa !1240
  %993 = add i64 %990, -432
  store i64 %993, i64* %18, align 8, !tbaa !1240
  %994 = add i64 %990, -336
  store i64 %994, i64* %19, align 8, !tbaa !1240
  %995 = add i64 %990, -56
  %996 = inttoptr i64 %995 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %14, align 8, !tbaa !1240
  %998 = add i64 %990, -80
  %999 = inttoptr i64 %998 to i32*
  %1000 = load i32, i32* %999
  %1001 = sext i32 %1000 to i64
  %1002 = add i64 %990, -944
  %1003 = inttoptr i64 %1002 to i64*
  %1004 = load i64, i64* %1003
  %1005 = add i64 %990, -936
  %1006 = inttoptr i64 %1005 to i64*
  %1007 = load i64, i64* %1006
  store i64 %1007, i64* %15, align 8, !tbaa !1240
  %1008 = sext i64 %1004 to i128
  %1009 = and i128 %1008, -18446744073709551616
  %1010 = sext i64 %1007 to i128
  %1011 = and i128 %1010, -18446744073709551616
  %1012 = zext i64 %1004 to i128
  %1013 = or i128 %1009, %1012
  %1014 = zext i64 %1007 to i128
  %1015 = or i128 %1011, %1014
  %1016 = mul nsw i128 %1015, %1013
  %1017 = trunc i128 %1016 to i64
  store i64 %1017, i64* %24, align 8, !tbaa !1240
  %1018 = sext i64 %1017 to i128
  %1019 = sext i32 %1000 to i128
  %1020 = and i128 %1019, -18446744073709551616
  %1021 = and i128 %1018, -18446744073709551616
  %1022 = zext i64 %1001 to i128
  %1023 = or i128 %1020, %1022
  %1024 = and i128 %1016, 18446744073709551615
  %1025 = or i128 %1021, %1024
  %1026 = mul nsw i128 %1025, %1023
  %1027 = trunc i128 %1026 to i64
  %1028 = shl i64 %1027, 3
  %1029 = load i64, i64* %14, align 8
  %1030 = add i64 %1028, %1029
  %1031 = load i64, i64* %21, align 8
  %1032 = add i64 %1031, -76
  %1033 = inttoptr i64 %1032 to i32*
  %1034 = load i32, i32* %1033
  %1035 = sext i32 %1034 to i64
  %1036 = load i64, i64* %15, align 8
  %1037 = mul i64 %1036, %1035
  %1038 = shl i64 %1037, 3
  %1039 = add i64 %1038, %1030
  %1040 = add i64 %1031, -72
  %1041 = inttoptr i64 %1040 to i32*
  %1042 = load i32, i32* %1041
  %1043 = sext i32 %1042 to i64
  store i64 %1043, i64* %23, align 8, !tbaa !1240
  %1044 = shl nsw i64 %1043, 3
  %1045 = add i64 %1044, %1039
  %1046 = inttoptr i64 %1045 to double*
  %1047 = load double, double* %1046
  store double %1047, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %1048 = load i64, i64* %21, align 8
  %1049 = add i64 %1048, -328
  %1050 = inttoptr i64 %1049 to double*
  store double %1047, double* %1050
  %1051 = add i64 %1048, -72
  %1052 = inttoptr i64 %1051 to i32*
  %1053 = load i32, i32* %1052
  %1054 = add i64 %1048, -428
  %1055 = inttoptr i64 %1054 to i32*
  store i32 %1053, i32* %1055
  %1056 = add i64 %1048, -76
  %1057 = inttoptr i64 %1056 to i32*
  %1058 = load i32, i32* %1057
  %1059 = add i64 %1048, -508
  %1060 = inttoptr i64 %1059 to i32*
  store i32 %1058, i32* %1060
  %1061 = add i64 %1048, -80
  %1062 = inttoptr i64 %1061 to i32*
  %1063 = load i32, i32* %1062
  %1064 = zext i32 %1063 to i64
  store i64 %1064, i64* %25, align 8, !tbaa !1240
  %1065 = add i64 %1048, -588
  %1066 = inttoptr i64 %1065 to i32*
  store i32 %1063, i32* %1066
  %1067 = add i64 %808, 16628
  %1068 = add i64 %808, 148
  %1069 = load i64, i64* %20, align 8, !tbaa !1240
  %1070 = add i64 %1069, -8
  %1071 = inttoptr i64 %1070 to i64*
  store i64 %1068, i64* %1071
  store i64 %1070, i64* %20, align 8, !tbaa !1240
  %1072 = tail call %struct.Memory* @sub_406d20_bubble(%struct.State* nonnull %0, i64 %1067, %struct.Memory* %804)
  %1073 = load i64, i64* %3, align 8
  br label %block_402cc0

block_403021:                                     ; preds = %block_402df1
  %1074 = add i64 %454, -68
  %1075 = inttoptr i64 %1074 to i32*
  store i32 0, i32* %1075
  %1076 = add i64 %454, -64
  %1077 = inttoptr i64 %1076 to i32*
  store i32 0, i32* %1077
  %1078 = add i64 %454, -80
  %1079 = add i64 %464, 21
  %1080 = inttoptr i64 %1078 to i32*
  store i32 0, i32* %1080
  %1081 = add i64 %454, -36
  %1082 = add i64 %454, -76
  %1083 = add i64 %454, -32
  %1084 = add i64 %454, -72
  %1085 = add i64 %454, -28
  %1086 = add i64 %454, -56
  %1087 = add i64 %454, -944
  %1088 = add i64 %454, -936
  br label %block_403036

block_40305c:                                     ; preds = %block_403055, %block_403068
  %1089 = phi i64 [ %566, %block_403055 ], [ %493, %block_403068 ]
  %1090 = phi %struct.Memory* [ %1297, %block_403055 ], [ %1090, %block_403068 ]
  %1091 = inttoptr i64 %1084 to i32*
  %1092 = load i32, i32* %1091
  %1093 = inttoptr i64 %1085 to i32*
  %1094 = load i32, i32* %1093
  %1095 = sub i32 %1092, %1094
  %1096 = lshr i32 %1095, 31
  %1097 = lshr i32 %1092, 31
  %1098 = lshr i32 %1094, 31
  %1099 = xor i32 %1098, %1097
  %1100 = xor i32 %1096, %1097
  %1101 = add nuw nsw i32 %1100, %1099
  %1102 = icmp eq i32 %1101, 2
  %1103 = icmp ne i32 %1096, 0
  %1104 = xor i1 %1103, %1102
  %1105 = select i1 %1104, i64 12, i64 90
  %1106 = add i64 %1089, %1105
  br i1 %1104, label %block_403068, label %block_4030b6

block_402dc6:                                     ; preds = %block_402bb8
  %1107 = add i64 %834, -80
  %1108 = inttoptr i64 %1107 to i32*
  %1109 = load i32, i32* %1108
  %1110 = add i32 %1109, 1
  %1111 = inttoptr i64 %1107 to i32*
  store i32 %1110, i32* %1111
  %1112 = add i64 %855, -550
  br label %block_402ba0

block_402a24:                                     ; preds = %block_402a18
  %1113 = add i64 %1260, -104
  store i64 %1113, i64* %18, align 8, !tbaa !1240
  %1114 = add i64 %1260, -120
  %1115 = inttoptr i64 %1114 to double*
  %1116 = load double, double* %1115
  %1117 = inttoptr i64 %1113 to double*
  store double %1116, double* %1117
  %1118 = add i64 %1260, -84
  %1119 = inttoptr i64 %1118 to i32*
  %1120 = load i32, i32* %1119
  %1121 = zext i32 %1120 to i64
  store i64 %1121, i64* %19, align 8, !tbaa !1240
  %1122 = add i64 %1260, -160
  %1123 = inttoptr i64 %1122 to double*
  %1124 = load double, double* %1123
  store double %1124, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %1125 = add i64 %1260, -56
  %1126 = inttoptr i64 %1125 to i64*
  %1127 = load i64, i64* %1126
  store i64 %1127, i64* %14, align 8, !tbaa !1240
  %1128 = add i64 %1260, -80
  %1129 = inttoptr i64 %1128 to i32*
  %1130 = load i32, i32* %1129
  %1131 = sext i32 %1130 to i64
  %1132 = add i64 %1260, -944
  %1133 = inttoptr i64 %1132 to i64*
  %1134 = load i64, i64* %1133
  %1135 = add i64 %1260, -936
  %1136 = inttoptr i64 %1135 to i64*
  %1137 = load i64, i64* %1136
  store i64 %1137, i64* %22, align 8, !tbaa !1240
  %1138 = sext i64 %1134 to i128
  %1139 = and i128 %1138, -18446744073709551616
  %1140 = sext i64 %1137 to i128
  %1141 = and i128 %1140, -18446744073709551616
  %1142 = zext i64 %1134 to i128
  %1143 = or i128 %1139, %1142
  %1144 = zext i64 %1137 to i128
  %1145 = or i128 %1141, %1144
  %1146 = mul nsw i128 %1145, %1143
  %1147 = shl i128 %1146, 64
  %1148 = ashr exact i128 %1147, 64
  %1149 = sext i32 %1130 to i128
  %1150 = and i128 %1149, -18446744073709551616
  %1151 = and i128 %1148, -18446744073709551616
  %1152 = zext i64 %1131 to i128
  %1153 = or i128 %1150, %1152
  %1154 = and i128 %1146, 18446744073709551615
  %1155 = or i128 %1151, %1154
  %1156 = mul nsw i128 %1155, %1153
  %1157 = trunc i128 %1156 to i64
  %1158 = shl i64 %1157, 3
  %1159 = load i64, i64* %14, align 8
  %1160 = add i64 %1158, %1159
  %1161 = load i64, i64* %21, align 8
  %1162 = add i64 %1161, -76
  %1163 = inttoptr i64 %1162 to i32*
  %1164 = load i32, i32* %1163
  %1165 = sext i32 %1164 to i64
  %1166 = load i64, i64* %22, align 8
  %1167 = mul i64 %1166, %1165
  %1168 = shl i64 %1167, 3
  store i64 %1168, i64* %16, align 8, !tbaa !1240
  %1169 = add i64 %1168, %1160
  %1170 = add i64 %1169, 8
  store i64 %1170, i64* %17, align 8, !tbaa !1240
  %1171 = add i64 %1295, 19628
  %1172 = add i64 %1295, 89
  %1173 = load i64, i64* %20, align 8, !tbaa !1240
  %1174 = add i64 %1173, -8
  %1175 = inttoptr i64 %1174 to i64*
  store i64 %1172, i64* %1175
  store i64 %1174, i64* %20, align 8, !tbaa !1240
  %1176 = tail call %struct.Memory* @sub_4076d0_vranlc(%struct.State* nonnull %0, i64 %1171, %struct.Memory* %1261)
  %1177 = load i64, i64* %21, align 8
  %1178 = add i64 %1177, -120
  %1179 = load i64, i64* %3, align 8
  store i64 %1178, i64* %19, align 8, !tbaa !1240
  %1180 = add i64 %1177, -128
  %1181 = inttoptr i64 %1180 to double*
  %1182 = load double, double* %1181
  store double %1182, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %1183 = add i64 %1179, 19203
  %1184 = add i64 %1179, 14
  %1185 = load i64, i64* %20, align 8, !tbaa !1240
  %1186 = add i64 %1185, -8
  %1187 = inttoptr i64 %1186 to i64*
  store i64 %1184, i64* %1187
  store i64 %1186, i64* %20, align 8, !tbaa !1240
  %1188 = tail call %struct.Memory* @sub_407580_randlc(%struct.State* nonnull %0, i64 %1183, %struct.Memory* %1176)
  %1189 = load i64, i64* %21, align 8
  %1190 = add i64 %1189, -920
  %1191 = load i64, i64* %3, align 8
  %1192 = load double, double* %49, align 1
  %1193 = inttoptr i64 %1190 to double*
  store double %1192, double* %1193
  %1194 = add i64 %1189, -76
  %1195 = inttoptr i64 %1194 to i32*
  %1196 = load i32, i32* %1195
  %1197 = add i32 %1196, 1
  %1198 = inttoptr i64 %1194 to i32*
  store i32 %1197, i32* %1198
  %1199 = add i64 %1191, -115
  br label %block_402a18

block_402da0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402d0f
  %1200 = phi i64 [ %1743, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %1397, %block_402d0f ]
  %1201 = phi %struct.Memory* [ %1739, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %1396, %block_402d0f ]
  %1202 = load i64, i64* %21, align 8
  %1203 = add i64 %1202, -72
  %1204 = inttoptr i64 %1203 to i32*
  %1205 = load i32, i32* %1204
  %1206 = add i32 %1205, 1
  %1207 = inttoptr i64 %1203 to i32*
  store i32 %1206, i32* %1207
  %1208 = add i64 %1200, -464
  br label %block_402bd0

block_402aa1:                                     ; preds = %block_402a18
  %1209 = add i64 %1260, -112
  store i64 %1209, i64* %19, align 8, !tbaa !1240
  %1210 = add i64 %1260, -136
  %1211 = inttoptr i64 %1210 to double*
  %1212 = load double, double* %1211
  store double %1212, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %1213 = add i64 %1295, 19167
  %1214 = add i64 %1295, 17
  %1215 = load i64, i64* %20, align 8, !tbaa !1240
  %1216 = add i64 %1215, -8
  %1217 = inttoptr i64 %1216 to i64*
  store i64 %1214, i64* %1217
  store i64 %1216, i64* %20, align 8, !tbaa !1240
  %1218 = tail call %struct.Memory* @sub_407580_randlc(%struct.State* nonnull %0, i64 %1213, %struct.Memory* %1261)
  %1219 = load i64, i64* %21, align 8
  %1220 = add i64 %1219, -920
  %1221 = load i64, i64* %3, align 8
  %1222 = load double, double* %49, align 1
  %1223 = inttoptr i64 %1220 to double*
  store double %1222, double* %1223
  %1224 = add i64 %1219, -80
  %1225 = inttoptr i64 %1224 to i32*
  %1226 = load i32, i32* %1225
  %1227 = add i32 %1226, 1
  %1228 = inttoptr i64 %1224 to i32*
  store i32 %1227, i32* %1228
  %1229 = add i64 %1221, -183
  br label %block_4029fb

block_402db3:                                     ; preds = %block_402bd0
  %1230 = add i64 %584, -76
  %1231 = inttoptr i64 %1230 to i32*
  %1232 = load i32, i32* %1231
  %1233 = add i32 %1232, 1
  %1234 = inttoptr i64 %1230 to i32*
  store i32 %1233, i32* %1234
  %1235 = add i64 %605, -507
  br label %block_402bb8

block_402ba0:                                     ; preds = %block_402b99, %block_402dc6
  %1236 = phi i64 [ %1619, %block_402b99 ], [ %1112, %block_402dc6 ]
  %1237 = phi i64 [ %387, %block_402b99 ], [ %834, %block_402dc6 ]
  %1238 = phi %struct.Memory* [ %569, %block_402b99 ], [ %835, %block_402dc6 ]
  %1239 = add i64 %1237, -80
  %1240 = inttoptr i64 %1239 to i32*
  %1241 = load i32, i32* %1240
  %1242 = add i64 %1237, -36
  %1243 = inttoptr i64 %1242 to i32*
  %1244 = load i32, i32* %1243
  %1245 = add i32 %1244, -1
  %1246 = lshr i32 %1245, 31
  %1247 = sub i32 %1241, %1245
  %1248 = lshr i32 %1247, 31
  %1249 = trunc i32 %1248 to i8
  %1250 = lshr i32 %1241, 31
  %1251 = xor i32 %1246, %1250
  %1252 = xor i32 %1248, %1250
  %1253 = add nuw nsw i32 %1252, %1251
  %1254 = icmp eq i32 %1253, 2
  %1255 = icmp ne i8 %1249, 0
  %1256 = xor i1 %1255, %1254
  %1257 = select i1 %1256, i64 17, i64 569
  %1258 = add i64 %1236, %1257
  br i1 %1256, label %block_402bb1, label %block_402dd9

block_402a18:                                     ; preds = %block_402a07, %block_402a24
  %1259 = phi i64 [ %1450, %block_402a07 ], [ %1199, %block_402a24 ]
  %1260 = phi i64 [ %387, %block_402a07 ], [ %1189, %block_402a24 ]
  %1261 = phi %struct.Memory* [ %388, %block_402a07 ], [ %1188, %block_402a24 ]
  %1262 = add i64 %1260, -76
  %1263 = inttoptr i64 %1262 to i32*
  %1264 = load i32, i32* %1263
  %1265 = add i64 %1260, -92
  %1266 = inttoptr i64 %1265 to i32*
  %1267 = load i32, i32* %1266
  %1268 = sub i32 %1264, %1267
  %1269 = icmp ult i32 %1264, %1267
  %1270 = zext i1 %1269 to i8
  store i8 %1270, i8* %39, align 1, !tbaa !1246
  %1271 = and i32 %1268, 255
  %1272 = tail call i32 @llvm.ctpop.i32(i32 %1271) #11
  %1273 = trunc i32 %1272 to i8
  %1274 = and i8 %1273, 1
  %1275 = xor i8 %1274, 1
  store i8 %1275, i8* %40, align 1, !tbaa !1260
  %1276 = xor i32 %1267, %1264
  %1277 = xor i32 %1276, %1268
  %1278 = lshr i32 %1277, 4
  %1279 = trunc i32 %1278 to i8
  %1280 = and i8 %1279, 1
  store i8 %1280, i8* %41, align 1, !tbaa !1261
  %1281 = icmp eq i32 %1268, 0
  %1282 = zext i1 %1281 to i8
  store i8 %1282, i8* %42, align 1, !tbaa !1262
  %1283 = lshr i32 %1268, 31
  %1284 = trunc i32 %1283 to i8
  store i8 %1284, i8* %43, align 1, !tbaa !1263
  %1285 = lshr i32 %1264, 31
  %1286 = lshr i32 %1267, 31
  %1287 = xor i32 %1286, %1285
  %1288 = xor i32 %1283, %1285
  %1289 = add nuw nsw i32 %1288, %1287
  %1290 = icmp eq i32 %1289, 2
  %1291 = zext i1 %1290 to i8
  store i8 %1291, i8* %44, align 1, !tbaa !1264
  %1292 = icmp ne i8 %1284, 0
  %1293 = xor i1 %1292, %1290
  %1294 = select i1 %1293, i64 12, i64 137
  %1295 = add i64 %1259, %1294
  br i1 %1293, label %block_402a24, label %block_402aa1

block_403049:                                     ; preds = %block_4030b6, %block_403042
  %1296 = phi i64 [ %809, %block_403042 ], [ %1443, %block_4030b6 ]
  %1297 = phi %struct.Memory* [ %884, %block_403042 ], [ %1090, %block_4030b6 ]
  %1298 = inttoptr i64 %1082 to i32*
  %1299 = load i32, i32* %1298
  %1300 = inttoptr i64 %1083 to i32*
  %1301 = load i32, i32* %1300
  %1302 = sub i32 %1299, %1301
  %1303 = lshr i32 %1302, 31
  %1304 = lshr i32 %1299, 31
  %1305 = lshr i32 %1301, 31
  %1306 = xor i32 %1305, %1304
  %1307 = xor i32 %1303, %1304
  %1308 = add nuw nsw i32 %1307, %1306
  %1309 = icmp eq i32 %1308, 2
  %1310 = icmp ne i32 %1303, 0
  %1311 = xor i1 %1310, %1309
  %1312 = select i1 %1311, i64 12, i64 128
  %1313 = add i64 %1296, %1312
  br i1 %1311, label %block_403055, label %block_4030c9

block_402d0f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  store i64 10, i64* %22, align 8, !tbaa !1240
  store i64 0, i64* %1621, align 8, !tbaa !1240
  %1314 = load i64, i64* %21, align 8
  %1315 = add i64 %1314, -592
  store i64 %1315, i64* %16, align 8, !tbaa !1240
  %1316 = add i64 %1314, -512
  store i64 %1316, i64* %17, align 8, !tbaa !1240
  %1317 = add i64 %1314, -432
  store i64 %1317, i64* %18, align 8, !tbaa !1240
  %1318 = add i64 %1314, -336
  store i64 %1318, i64* %19, align 8, !tbaa !1240
  %1319 = add i64 %1314, -56
  %1320 = inttoptr i64 %1319 to i64*
  %1321 = load i64, i64* %1320
  store i64 %1321, i64* %14, align 8, !tbaa !1240
  %1322 = add i64 %1314, -80
  %1323 = inttoptr i64 %1322 to i32*
  %1324 = load i32, i32* %1323
  %1325 = sext i32 %1324 to i64
  %1326 = add i64 %1314, -944
  %1327 = inttoptr i64 %1326 to i64*
  %1328 = load i64, i64* %1327
  %1329 = add i64 %1314, -936
  %1330 = inttoptr i64 %1329 to i64*
  %1331 = load i64, i64* %1330
  store i64 %1331, i64* %15, align 8, !tbaa !1240
  %1332 = sext i64 %1328 to i128
  %1333 = and i128 %1332, -18446744073709551616
  %1334 = sext i64 %1331 to i128
  %1335 = and i128 %1334, -18446744073709551616
  %1336 = zext i64 %1328 to i128
  %1337 = or i128 %1333, %1336
  %1338 = zext i64 %1331 to i128
  %1339 = or i128 %1335, %1338
  %1340 = mul nsw i128 %1339, %1337
  %1341 = trunc i128 %1340 to i64
  store i64 %1341, i64* %24, align 8, !tbaa !1240
  %1342 = sext i64 %1341 to i128
  %1343 = sext i32 %1324 to i128
  %1344 = and i128 %1343, -18446744073709551616
  %1345 = and i128 %1342, -18446744073709551616
  %1346 = zext i64 %1325 to i128
  %1347 = or i128 %1344, %1346
  %1348 = and i128 %1340, 18446744073709551615
  %1349 = or i128 %1345, %1348
  %1350 = mul nsw i128 %1349, %1347
  %1351 = trunc i128 %1350 to i64
  %1352 = shl i64 %1351, 3
  %1353 = load i64, i64* %14, align 8
  %1354 = add i64 %1352, %1353
  %1355 = load i64, i64* %21, align 8
  %1356 = add i64 %1355, -76
  %1357 = inttoptr i64 %1356 to i32*
  %1358 = load i32, i32* %1357
  %1359 = sext i32 %1358 to i64
  %1360 = load i64, i64* %15, align 8
  %1361 = mul i64 %1360, %1359
  %1362 = shl i64 %1361, 3
  %1363 = add i64 %1362, %1354
  %1364 = add i64 %1355, -72
  %1365 = inttoptr i64 %1364 to i32*
  %1366 = load i32, i32* %1365
  %1367 = sext i32 %1366 to i64
  store i64 %1367, i64* %23, align 8, !tbaa !1240
  %1368 = shl nsw i64 %1367, 3
  %1369 = add i64 %1368, %1363
  %1370 = inttoptr i64 %1369 to double*
  %1371 = load double, double* %1370
  store double %1371, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %1372 = load i64, i64* %21, align 8
  %1373 = add i64 %1372, -336
  %1374 = inttoptr i64 %1373 to double*
  store double %1371, double* %1374
  %1375 = add i64 %1372, -72
  %1376 = inttoptr i64 %1375 to i32*
  %1377 = load i32, i32* %1376
  %1378 = add i64 %1372, -432
  %1379 = inttoptr i64 %1378 to i32*
  store i32 %1377, i32* %1379
  %1380 = add i64 %1372, -76
  %1381 = inttoptr i64 %1380 to i32*
  %1382 = load i32, i32* %1381
  %1383 = add i64 %1372, -512
  %1384 = inttoptr i64 %1383 to i32*
  store i32 %1382, i32* %1384
  %1385 = add i64 %1372, -80
  %1386 = inttoptr i64 %1385 to i32*
  %1387 = load i32, i32* %1386
  %1388 = zext i32 %1387 to i64
  store i64 %1388, i64* %25, align 8, !tbaa !1240
  %1389 = add i64 %1372, -592
  %1390 = inttoptr i64 %1389 to i32*
  store i32 %1387, i32* %1390
  %1391 = add i64 %1743, 16401
  %1392 = add i64 %1743, 145
  %1393 = load i64, i64* %20, align 8, !tbaa !1240
  %1394 = add i64 %1393, -8
  %1395 = inttoptr i64 %1394 to i64*
  store i64 %1392, i64* %1395
  store i64 %1394, i64* %20, align 8, !tbaa !1240
  %1396 = tail call %struct.Memory* @sub_406d20_bubble(%struct.State* nonnull %0, i64 %1391, %struct.Memory* %1739)
  %1397 = load i64, i64* %3, align 8
  br label %block_402da0

block_40316f:                                     ; preds = %block_4030e6
  %1398 = add i64 %1618, 10
  %1399 = inttoptr i64 %456 to i32*
  store i32 9, i32* %1399
  %1400 = add i64 %454, -668
  %1401 = add i64 %454, -748
  %1402 = add i64 %454, -828
  br label %block_403179

block_403188:                                     ; preds = %block_403179
  %1403 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 944) to double*)
  store double %1403, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %1404 = inttoptr i64 %1086 to i64*
  %1405 = load i64, i64* %1404
  %1406 = sext i32 %974 to i64
  %1407 = shl nsw i64 %1406, 3
  %1408 = add i64 %1400, %1407
  %1409 = inttoptr i64 %1408 to i32*
  %1410 = load i32, i32* %1409
  %1411 = sext i32 %1410 to i64
  %1412 = inttoptr i64 %1087 to i64*
  %1413 = load i64, i64* %1412
  %1414 = inttoptr i64 %1088 to i64*
  %1415 = load i64, i64* %1414
  %1416 = mul i64 %1415, %1413
  %1417 = mul i64 %1416, %1411
  %1418 = shl i64 %1417, 3
  %1419 = add i64 %1418, %1405
  %1420 = add i64 %1401, %1407
  %1421 = inttoptr i64 %1420 to i32*
  %1422 = load i32, i32* %1421
  %1423 = sext i32 %1422 to i64
  %1424 = mul i64 %1415, %1423
  %1425 = shl i64 %1424, 3
  %1426 = add i64 %1425, %1419
  %1427 = add i64 %1402, %1407
  %1428 = inttoptr i64 %1427 to i32*
  %1429 = load i32, i32* %1428
  %1430 = sext i32 %1429 to i64
  %1431 = shl nsw i64 %1430, 3
  %1432 = add i64 %1431, %1426
  %1433 = inttoptr i64 %1432 to double*
  store double %1403, double* %1433
  %1434 = inttoptr i64 %456 to i32*
  %1435 = load i32, i32* %1434
  %1436 = add i32 %1435, -1
  %1437 = inttoptr i64 %456 to i32*
  store i32 %1436, i32* %1437
  %1438 = add i64 %989, -15
  br label %block_403179

block_4030b6:                                     ; preds = %block_40305c
  %1439 = inttoptr i64 %1082 to i32*
  %1440 = load i32, i32* %1439
  %1441 = add i32 %1440, 1
  %1442 = inttoptr i64 %1082 to i32*
  store i32 %1441, i32* %1442
  %1443 = add i64 %1106, -109
  br label %block_403049

block_402a07:                                     ; preds = %block_4029fb
  %1444 = add i64 %387, -112
  %1445 = inttoptr i64 %1444 to double*
  %1446 = load double, double* %1445
  store double %1446, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %1447 = add i64 %387, -120
  %1448 = inttoptr i64 %1447 to double*
  store double %1446, double* %1448
  %1449 = add i64 %387, -76
  %1450 = add i64 %407, 17
  %1451 = inttoptr i64 %1449 to i32*
  store i32 1, i32* %1451
  br label %block_402a18

block_402bc9:                                     ; preds = %block_402bb8
  %1452 = add i64 %834, -72
  %1453 = add i64 %855, 7
  %1454 = inttoptr i64 %1452 to i32*
  store i32 1, i32* %1454
  br label %block_402bd0

block_402f03:                                     ; preds = %block_402e32, %block_402ebb
  %1455 = phi i64 [ %831, %block_402ebb ], [ %967, %block_402e32 ]
  %1456 = phi i64 [ %369, %block_402ebb ], [ %953, %block_402e32 ]
  %1457 = phi %struct.Memory* [ %373, %block_402ebb ], [ %373, %block_402e32 ]
  %1458 = add i64 %1456, -336
  %1459 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 944) to double*)
  %1460 = add i64 %1456, -344
  %1461 = inttoptr i64 %1460 to double*
  store double %1459, double* %1461
  %1462 = inttoptr i64 %1460 to double*
  %1463 = load double, double* %1462
  store double %1463, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %1464 = add i64 %1456, -60
  %1465 = inttoptr i64 %1464 to i32*
  %1466 = load i32, i32* %1465
  %1467 = sext i32 %1466 to i64
  %1468 = shl nsw i64 %1467, 4
  store i64 %1468, i64* %16, align 8, !tbaa !1240
  %1469 = add i64 %1468, %1458
  store i64 %1469, i64* %14, align 8, !tbaa !1240
  %1470 = icmp ult i64 %1469, %1458
  %1471 = icmp ult i64 %1469, %1468
  %1472 = or i1 %1470, %1471
  %1473 = zext i1 %1472 to i8
  store i8 %1473, i8* %39, align 1, !tbaa !1246
  %1474 = trunc i64 %1469 to i32
  %1475 = and i32 %1474, 255
  %1476 = tail call i32 @llvm.ctpop.i32(i32 %1475) #11
  %1477 = trunc i32 %1476 to i8
  %1478 = and i8 %1477, 1
  %1479 = xor i8 %1478, 1
  store i8 %1479, i8* %40, align 1, !tbaa !1260
  %1480 = xor i64 %1468, %1458
  %1481 = xor i64 %1480, %1469
  %1482 = lshr i64 %1481, 4
  %1483 = trunc i64 %1482 to i8
  %1484 = and i8 %1483, 1
  store i8 %1484, i8* %41, align 1, !tbaa !1261
  %1485 = icmp eq i64 %1469, 0
  %1486 = zext i1 %1485 to i8
  store i8 %1486, i8* %42, align 1, !tbaa !1262
  %1487 = lshr i64 %1469, 63
  %1488 = trunc i64 %1487 to i8
  store i8 %1488, i8* %43, align 1, !tbaa !1263
  %1489 = lshr i64 %1458, 63
  %1490 = lshr i64 %1467, 59
  %1491 = and i64 %1490, 1
  %1492 = xor i64 %1487, %1489
  %1493 = xor i64 %1487, %1491
  %1494 = add nuw nsw i64 %1492, %1493
  %1495 = icmp eq i64 %1494, 2
  %1496 = zext i1 %1495 to i8
  store i8 %1496, i8* %44, align 1, !tbaa !1264
  %1497 = add i64 %1455, 46
  store i64 %1497, i64* %3, align 8
  %1498 = inttoptr i64 %1469 to double*
  %1499 = load double, double* %1498
  %1500 = fcmp uno double %1463, %1499
  br i1 %1500, label %1501, label %1515

; <label>:1501:                                   ; preds = %block_402f03
  %1502 = fadd double %1463, %1499
  %1503 = bitcast double %1502 to i64
  %1504 = and i64 %1503, 9221120237041090560
  %1505 = icmp eq i64 %1504, 9218868437227405312
  %1506 = and i64 %1503, 2251799813685247
  %1507 = icmp ne i64 %1506, 0
  %1508 = and i1 %1505, %1507
  br i1 %1508, label %1509, label %1521

; <label>:1509:                                   ; preds = %1501
  %1510 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1497, %struct.Memory* %1457) #14
  %1511 = load i64, i64* %3, align 8
  %1512 = load i8, i8* %39, align 1, !tbaa !1246
  %1513 = load i8, i8* %42, align 1, !tbaa !1262
  %1514 = load i64, i64* %21, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:1515:                                   ; preds = %block_402f03
  %1516 = fcmp ogt double %1463, %1499
  br i1 %1516, label %1521, label %1517

; <label>:1517:                                   ; preds = %1515
  %1518 = fcmp olt double %1463, %1499
  br i1 %1518, label %1521, label %1519

; <label>:1519:                                   ; preds = %1517
  %1520 = fcmp oeq double %1463, %1499
  br i1 %1520, label %1521, label %1524

; <label>:1521:                                   ; preds = %1519, %1517, %1515, %1501
  %1522 = phi i8 [ 0, %1515 ], [ 0, %1517 ], [ 1, %1519 ], [ 1, %1501 ]
  %1523 = phi i8 [ 0, %1515 ], [ 1, %1517 ], [ 0, %1519 ], [ 1, %1501 ]
  br label %1524

; <label>:1524:                                   ; preds = %1521, %1519
  %1525 = phi i8 [ %1522, %1521 ], [ %1486, %1519 ]
  %1526 = phi i8 [ %1523, %1521 ], [ %1473, %1519 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %1524, %1509
  %1527 = phi i64 [ %1514, %1509 ], [ %1456, %1524 ]
  %1528 = phi i8 [ %1513, %1509 ], [ %1525, %1524 ]
  %1529 = phi i8 [ %1512, %1509 ], [ %1526, %1524 ]
  %1530 = phi i64 [ %1511, %1509 ], [ %1497, %1524 ]
  %1531 = phi %struct.Memory* [ %1510, %1509 ], [ %1457, %1524 ]
  %1532 = or i8 %1528, %1529
  %1533 = icmp ne i8 %1532, 0
  %1534 = select i1 %1533, i64 143, i64 6
  %1535 = add i64 %1530, %1534
  %1536 = add i64 %1527, -348
  %1537 = inttoptr i64 %1536 to i32*
  %1538 = load i32, i32* %1537
  %1539 = sext i32 %1538 to i64
  %1540 = shl nsw i64 %1539, 3
  %1541 = add i64 %1527, -912
  %1542 = add i64 %1541, %1540
  %1543 = inttoptr i64 %1542 to i32*
  store i32 0, i32* %1543
  br i1 %1533, label %block_402fc0, label %block_402f37

block_403202:                                     ; preds = %block_403179
  %1544 = inttoptr i64 %1086 to i64*
  %1545 = load i64, i64* %1544
  %1546 = inttoptr i64 %1085 to i32*
  %1547 = load i32, i32* %1546
  %1548 = zext i32 %1547 to i64
  store i64 %1548, i64* %18, align 8, !tbaa !1240
  %1549 = inttoptr i64 %1083 to i32*
  %1550 = load i32, i32* %1549
  %1551 = zext i32 %1550 to i64
  store i64 %1551, i64* %17, align 8, !tbaa !1240
  %1552 = inttoptr i64 %1081 to i32*
  %1553 = load i32, i32* %1552
  %1554 = zext i32 %1553 to i64
  store i64 %1554, i64* %16, align 8, !tbaa !1240
  %1555 = add i64 %454, 16
  %1556 = inttoptr i64 %1555 to i32*
  %1557 = load i32, i32* %1556
  %1558 = zext i32 %1557 to i64
  store i64 %1558, i64* %22, align 8, !tbaa !1240
  store i64 %1545, i64* %19, align 8, !tbaa !1240
  %1559 = add i64 %989, 13406
  %1560 = add i64 %989, 25
  %1561 = load i64, i64* %20, align 8, !tbaa !1240
  %1562 = add i64 %1561, -8
  %1563 = inttoptr i64 %1562 to i64*
  store i64 %1560, i64* %1563
  store i64 %1562, i64* %20, align 8, !tbaa !1240
  %1564 = tail call %struct.Memory* @sub_406660_comm3(%struct.State* nonnull %0, i64 %1559, %struct.Memory* %972)
  %1565 = load i64, i64* %20, align 8
  %1566 = add i64 %1565, 928
  %1567 = icmp ugt i64 %1565, -929
  %1568 = zext i1 %1567 to i8
  store i8 %1568, i8* %39, align 1, !tbaa !1246
  %1569 = trunc i64 %1566 to i32
  %1570 = and i32 %1569, 255
  %1571 = tail call i32 @llvm.ctpop.i32(i32 %1570) #11
  %1572 = trunc i32 %1571 to i8
  %1573 = and i8 %1572, 1
  %1574 = xor i8 %1573, 1
  store i8 %1574, i8* %40, align 1, !tbaa !1260
  %1575 = xor i64 %1566, %1565
  %1576 = lshr i64 %1575, 4
  %1577 = trunc i64 %1576 to i8
  %1578 = and i8 %1577, 1
  store i8 %1578, i8* %41, align 1, !tbaa !1261
  %1579 = icmp eq i64 %1566, 0
  %1580 = zext i1 %1579 to i8
  store i8 %1580, i8* %42, align 1, !tbaa !1262
  %1581 = lshr i64 %1566, 63
  %1582 = trunc i64 %1581 to i8
  store i8 %1582, i8* %43, align 1, !tbaa !1263
  %1583 = lshr i64 %1565, 63
  %1584 = xor i64 %1581, %1583
  %1585 = add nuw nsw i64 %1584, %1581
  %1586 = icmp eq i64 %1585, 2
  %1587 = zext i1 %1586 to i8
  store i8 %1587, i8* %44, align 1, !tbaa !1264
  %1588 = add i64 %1565, 936
  %1589 = inttoptr i64 %1566 to i64*
  %1590 = load i64, i64* %1589
  store i64 %1590, i64* %15, align 8, !tbaa !1240
  %1591 = add i64 %1565, 944
  %1592 = inttoptr i64 %1588 to i64*
  %1593 = load i64, i64* %1592
  store i64 %1593, i64* %25, align 8, !tbaa !1240
  %1594 = add i64 %1565, 952
  %1595 = inttoptr i64 %1591 to i64*
  %1596 = load i64, i64* %1595
  store i64 %1596, i64* %21, align 8, !tbaa !1240
  %1597 = inttoptr i64 %1594 to i64*
  %1598 = load i64, i64* %1597
  store i64 %1598, i64* %3, align 8, !tbaa !1240
  %1599 = add i64 %1565, 960
  store i64 %1599, i64* %20, align 8, !tbaa !1240
  ret %struct.Memory* %1564

block_4030e6:                                     ; preds = %block_4030dc, %block_4030f5
  %1600 = phi i64 [ %548, %block_4030dc ], [ %452, %block_4030f5 ]
  %1601 = phi %struct.Memory* [ %884, %block_4030dc ], [ %1601, %block_4030f5 ]
  %1602 = inttoptr i64 %456 to i32*
  %1603 = load i32, i32* %1602
  %1604 = inttoptr i64 %1076 to i32*
  %1605 = load i32, i32* %1604
  %1606 = sub i32 %1603, %1605
  %1607 = lshr i32 %1606, 31
  %1608 = trunc i32 %1607 to i8
  %1609 = lshr i32 %1603, 31
  %1610 = lshr i32 %1605, 31
  %1611 = xor i32 %1610, %1609
  %1612 = xor i32 %1607, %1609
  %1613 = add nuw nsw i32 %1612, %1611
  %1614 = icmp eq i32 %1613, 2
  %1615 = icmp ne i8 %1608, 0
  %1616 = xor i1 %1615, %1614
  %1617 = select i1 %1616, i64 137, i64 15
  %1618 = add i64 %1600, %1617
  br i1 %1616, label %block_40316f, label %block_4030f5

block_402b99:                                     ; preds = %block_402ad2
  %1619 = add i64 %582, 7
  %1620 = inttoptr i64 %389 to i32*
  store i32 1, i32* %1620
  %1621 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  br label %block_402ba0

block_402cc0:                                     ; preds = %block_402c2c, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2
  %1622 = phi i64 [ %808, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2 ], [ %1073, %block_402c2c ]
  %1623 = phi %struct.Memory* [ %804, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2 ], [ %1072, %block_402c2c ]
  %1624 = load i64, i64* %21, align 8
  %1625 = add i64 %1624, -56
  %1626 = inttoptr i64 %1625 to i64*
  %1627 = load i64, i64* %1626
  store i64 %1627, i64* %14, align 8, !tbaa !1240
  %1628 = add i64 %1624, -80
  %1629 = inttoptr i64 %1628 to i32*
  %1630 = load i32, i32* %1629
  %1631 = sext i32 %1630 to i64
  %1632 = add i64 %1624, -944
  %1633 = inttoptr i64 %1632 to i64*
  %1634 = load i64, i64* %1633
  %1635 = add i64 %1624, -936
  %1636 = inttoptr i64 %1635 to i64*
  %1637 = load i64, i64* %1636
  store i64 %1637, i64* %18, align 8, !tbaa !1240
  %1638 = sext i64 %1634 to i128
  %1639 = and i128 %1638, -18446744073709551616
  %1640 = sext i64 %1637 to i128
  %1641 = and i128 %1640, -18446744073709551616
  %1642 = zext i64 %1634 to i128
  %1643 = or i128 %1639, %1642
  %1644 = zext i64 %1637 to i128
  %1645 = or i128 %1641, %1644
  %1646 = mul nsw i128 %1645, %1643
  %1647 = trunc i128 %1646 to i64
  store i64 %1647, i64* %17, align 8, !tbaa !1240
  %1648 = sext i64 %1647 to i128
  %1649 = sext i32 %1630 to i128
  %1650 = and i128 %1649, -18446744073709551616
  %1651 = and i128 %1648, -18446744073709551616
  %1652 = zext i64 %1631 to i128
  %1653 = or i128 %1650, %1652
  %1654 = and i128 %1646, 18446744073709551615
  %1655 = or i128 %1651, %1654
  %1656 = mul nsw i128 %1655, %1653
  %1657 = trunc i128 %1656 to i64
  %1658 = shl i64 %1657, 3
  %1659 = load i64, i64* %14, align 8
  %1660 = add i64 %1658, %1659
  %1661 = lshr i64 %1660, 63
  %1662 = load i64, i64* %21, align 8
  %1663 = add i64 %1662, -76
  %1664 = inttoptr i64 %1663 to i32*
  %1665 = load i32, i32* %1664
  %1666 = sext i32 %1665 to i64
  %1667 = load i64, i64* %18, align 8
  %1668 = mul i64 %1667, %1666
  %1669 = shl i64 %1668, 3
  %1670 = add i64 %1669, %1660
  store i64 %1670, i64* %14, align 8, !tbaa !1240
  %1671 = icmp ult i64 %1670, %1660
  %1672 = icmp ult i64 %1670, %1669
  %1673 = or i1 %1671, %1672
  %1674 = zext i1 %1673 to i8
  store i8 %1674, i8* %39, align 1, !tbaa !1246
  %1675 = trunc i64 %1670 to i32
  %1676 = and i32 %1675, 255
  %1677 = tail call i32 @llvm.ctpop.i32(i32 %1676) #11
  %1678 = trunc i32 %1677 to i8
  %1679 = and i8 %1678, 1
  %1680 = xor i8 %1679, 1
  store i8 %1680, i8* %40, align 1, !tbaa !1260
  %1681 = xor i64 %1669, %1660
  %1682 = xor i64 %1681, %1670
  %1683 = lshr i64 %1682, 4
  %1684 = trunc i64 %1683 to i8
  %1685 = and i8 %1684, 1
  store i8 %1685, i8* %41, align 1, !tbaa !1261
  %1686 = icmp eq i64 %1670, 0
  %1687 = zext i1 %1686 to i8
  store i8 %1687, i8* %42, align 1, !tbaa !1262
  %1688 = lshr i64 %1670, 63
  %1689 = trunc i64 %1688 to i8
  store i8 %1689, i8* %43, align 1, !tbaa !1263
  %1690 = lshr i64 %1668, 60
  %1691 = and i64 %1690, 1
  %1692 = xor i64 %1688, %1661
  %1693 = xor i64 %1688, %1691
  %1694 = add nuw nsw i64 %1692, %1693
  %1695 = icmp eq i64 %1694, 2
  %1696 = zext i1 %1695 to i8
  store i8 %1696, i8* %44, align 1, !tbaa !1264
  %1697 = add i64 %1662, -72
  %1698 = inttoptr i64 %1697 to i32*
  %1699 = load i32, i32* %1698
  %1700 = sext i32 %1699 to i64
  store i64 %1700, i64* %16, align 8, !tbaa !1240
  %1701 = shl nsw i64 %1700, 3
  %1702 = add i64 %1701, %1670
  %1703 = inttoptr i64 %1702 to double*
  %1704 = load double, double* %1703
  store double %1704, double* %49, align 1, !tbaa !1244
  store double 0.000000e+00, double* %51, align 1, !tbaa !1244
  %1705 = load i64, i64* %21, align 8
  %1706 = add i64 %1705, -336
  %1707 = inttoptr i64 %1706 to double*
  %1708 = load double, double* %1707
  store double %1708, double* %53, align 1, !tbaa !1244
  store double 0.000000e+00, double* %55, align 1, !tbaa !1244
  %1709 = add i64 %1622, 73
  store i64 %1709, i64* %3, align 8
  %1710 = fcmp uno double %1708, %1704
  br i1 %1710, label %1711, label %1724

; <label>:1711:                                   ; preds = %block_402cc0
  %1712 = fadd double %1708, %1704
  %1713 = bitcast double %1712 to i64
  %1714 = and i64 %1713, 9221120237041090560
  %1715 = icmp eq i64 %1714, 9218868437227405312
  %1716 = and i64 %1713, 2251799813685247
  %1717 = icmp ne i64 %1716, 0
  %1718 = and i1 %1715, %1717
  br i1 %1718, label %1719, label %1730

; <label>:1719:                                   ; preds = %1711
  %1720 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1709, %struct.Memory* %1623) #14
  %1721 = load i64, i64* %3, align 8
  %1722 = load i8, i8* %39, align 1, !tbaa !1246
  %1723 = load i8, i8* %42, align 1, !tbaa !1262
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1724:                                   ; preds = %block_402cc0
  %1725 = fcmp ogt double %1708, %1704
  br i1 %1725, label %1730, label %1726

; <label>:1726:                                   ; preds = %1724
  %1727 = fcmp olt double %1708, %1704
  br i1 %1727, label %1730, label %1728

; <label>:1728:                                   ; preds = %1726
  %1729 = fcmp oeq double %1708, %1704
  br i1 %1729, label %1730, label %1733

; <label>:1730:                                   ; preds = %1728, %1726, %1724, %1711
  %1731 = phi i8 [ 0, %1724 ], [ 0, %1726 ], [ 1, %1728 ], [ 1, %1711 ]
  %1732 = phi i8 [ 0, %1724 ], [ 1, %1726 ], [ 0, %1728 ], [ 1, %1711 ]
  br label %1733

; <label>:1733:                                   ; preds = %1730, %1728
  %1734 = phi i8 [ %1731, %1730 ], [ %1687, %1728 ]
  %1735 = phi i8 [ %1732, %1730 ], [ %1674, %1728 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1733, %1719
  %1736 = phi i8 [ %1723, %1719 ], [ %1734, %1733 ]
  %1737 = phi i8 [ %1722, %1719 ], [ %1735, %1733 ]
  %1738 = phi i64 [ %1721, %1719 ], [ %1709, %1733 ]
  %1739 = phi %struct.Memory* [ %1720, %1719 ], [ %1623, %1733 ]
  %1740 = or i8 %1736, %1737
  %1741 = icmp ne i8 %1740, 0
  %1742 = select i1 %1741, i64 151, i64 6
  %1743 = add i64 %1738, %1742
  br i1 %1741, label %block_402da0, label %block_402d0f
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406c80_power(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_406c80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %17 = load i64, i64* %14, align 8
  %18 = load i64, i64* %13, align 8, !tbaa !1240
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20
  store i64 %19, i64* %14, align 8, !tbaa !1240
  %21 = add i64 %18, -72
  store i64 %21, i64* %13, align 8, !tbaa !1240
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %28 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 944) to double*)
  %29 = bitcast %union.VectorReg* %16 to double*
  store double %28, double* %29, align 1, !tbaa !1244
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %31 = bitcast i64* %30 to double*
  store double 0.000000e+00, double* %31, align 1, !tbaa !1244
  %32 = add i64 %18, -16
  %33 = bitcast [32 x %union.VectorReg]* %15 to double*
  %34 = load double, double* %33, align 1
  %35 = inttoptr i64 %32 to double*
  store double %34, double* %35
  %36 = add i64 %18, -20
  %37 = load i32, i32* %9, align 4
  %38 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %38
  %39 = add i64 %18, -56
  %40 = inttoptr i64 %39 to double*
  store double %28, double* %40
  %41 = inttoptr i64 %36 to i32*
  %42 = load i32, i32* %41
  %43 = zext i32 %42 to i64
  store i64 %43, i64* %12, align 8, !tbaa !1240
  %44 = add i64 %18, -36
  %45 = inttoptr i64 %44 to i32*
  store i32 %42, i32* %45
  %46 = inttoptr i64 %32 to double*
  %47 = load double, double* %46
  store double %47, double* %33, align 1, !tbaa !1244
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %49 = bitcast i64* %48 to double*
  store double 0.000000e+00, double* %49, align 1, !tbaa !1244
  %50 = add i64 %18, -32
  %51 = add i64 %1, 45
  %52 = inttoptr i64 %50 to double*
  store double %47, double* %52
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %54 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  br label %block_406cad

block_406d14:                                     ; preds = %block_406cad
  %55 = add i64 %104, -48
  %56 = inttoptr i64 %55 to double*
  %57 = load double, double* %56
  store double %57, double* %33, align 1, !tbaa !1244
  store double 0.000000e+00, double* %49, align 1, !tbaa !1244
  %58 = load i64, i64* %13, align 8
  %59 = add i64 %58, 64
  %60 = icmp ugt i64 %58, -65
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %22, align 1, !tbaa !1246
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %23, align 1, !tbaa !1260
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %24, align 1, !tbaa !1261
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %25, align 1, !tbaa !1262
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %26, align 1, !tbaa !1263
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %27, align 1, !tbaa !1264
  %81 = add i64 %58, 72
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %14, align 8, !tbaa !1240
  %84 = inttoptr i64 %81 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %3, align 8, !tbaa !1240
  %86 = add i64 %58, 80
  store i64 %86, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %105

block_406cd3:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %87 = add i64 %223, -48
  store i64 %87, i64* %12, align 8, !tbaa !1240
  %88 = add i64 %223, -24
  %89 = inttoptr i64 %88 to double*
  %90 = load double, double* %89
  store double %90, double* %33, align 1, !tbaa !1244
  store double 0.000000e+00, double* %49, align 1, !tbaa !1244
  %91 = add i64 %222, 2221
  %92 = add i64 %222, 14
  %93 = load i64, i64* %13, align 8, !tbaa !1240
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95
  store i64 %94, i64* %13, align 8, !tbaa !1240
  %96 = tail call %struct.Memory* @sub_407580_randlc(%struct.State* nonnull %0, i64 %91, %struct.Memory* %199)
  %97 = load i64, i64* %14, align 8
  %98 = add i64 %97, -40
  %99 = load i64, i64* %3, align 8
  %100 = add i64 %99, 5
  %101 = load double, double* %33, align 1
  %102 = inttoptr i64 %98 to double*
  store double %101, double* %102
  br label %block_406ce6

block_406cad:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_406c80
  %103 = phi i64 [ %51, %block_406c80 ], [ %172, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %104 = phi i64 [ %19, %block_406c80 ], [ %168, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %105 = phi %struct.Memory* [ %2, %block_406c80 ], [ %169, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %106 = add i64 %104, -28
  %107 = inttoptr i64 %106 to i32*
  %108 = load i32, i32* %107
  store i8 0, i8* %22, align 1, !tbaa !1246
  %109 = and i32 %108, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #11
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %23, align 1, !tbaa !1260
  store i8 0, i8* %24, align 1, !tbaa !1261
  %114 = icmp eq i32 %108, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %25, align 1, !tbaa !1262
  %116 = lshr i32 %108, 31
  %117 = trunc i32 %116 to i8
  store i8 %117, i8* %26, align 1, !tbaa !1263
  store i8 0, i8* %27, align 1, !tbaa !1264
  %118 = select i1 %114, i64 103, i64 10
  %119 = add i64 %103, %118
  br i1 %114, label %block_406d14, label %block_406cb7

block_406ce6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_406cd3
  %120 = phi i64 [ %100, %block_406cd3 ], [ %222, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %121 = phi i64 [ %97, %block_406cd3 ], [ %223, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %122 = phi %struct.Memory* [ %96, %block_406cd3 ], [ %199, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %123 = add i64 %121, -24
  store i64 %123, i64* %12, align 8, !tbaa !1240
  %124 = inttoptr i64 %123 to double*
  %125 = load double, double* %124
  store double %125, double* %33, align 1, !tbaa !1244
  store double 0.000000e+00, double* %49, align 1, !tbaa !1244
  %126 = add i64 %120, 2202
  %127 = add i64 %120, 14
  %128 = load i64, i64* %13, align 8, !tbaa !1240
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  store i64 %127, i64* %130
  store i64 %129, i64* %13, align 8, !tbaa !1240
  %131 = tail call %struct.Memory* @sub_407580_randlc(%struct.State* nonnull %0, i64 %126, %struct.Memory* %122)
  %132 = load i64, i64* %3, align 8
  %133 = load i64, i64* %14, align 8
  %134 = add i64 %133, -40
  %135 = load double, double* %33, align 1
  %136 = inttoptr i64 %134 to double*
  store double %135, double* %136
  %137 = add i64 %133, -28
  %138 = inttoptr i64 %137 to i32*
  %139 = load i32, i32* %138
  %140 = zext i32 %139 to i64
  %141 = add i64 %133, -56
  %142 = inttoptr i64 %141 to i32*
  store i32 2, i32* %142
  store i64 %140, i64* %10, align 8, !tbaa !1240
  %143 = sext i32 %139 to i64
  %144 = lshr i64 %143, 32
  store i64 %144, i64* %53, align 8, !tbaa !1240
  %145 = inttoptr i64 %141 to i32*
  %146 = load i32, i32* %145
  %147 = zext i32 %146 to i64
  store i64 %147, i64* %11, align 8, !tbaa !1240
  %148 = add i64 %132, 24
  store i64 %148, i64* %3, align 8
  %149 = sext i32 %146 to i64
  %150 = shl nuw i64 %144, 32
  %151 = or i64 %150, %140
  %152 = sdiv i64 %151, %149
  %153 = shl i64 %152, 32
  %154 = ashr exact i64 %153, 32
  %155 = icmp eq i64 %152, %154
  br i1 %155, label %161, label %156

; <label>:156:                                    ; preds = %block_406ce6
  %157 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %148, %struct.Memory* %131) #14
  %158 = load i64, i64* %14, align 8
  %159 = load i32, i32* %5, align 4
  %160 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:161:                                    ; preds = %block_406ce6
  %162 = srem i64 %151, %149
  %163 = and i64 %152, 4294967295
  store i64 %163, i64* %10, align 8, !tbaa !1240
  %164 = and i64 %162, 4294967295
  store i64 %164, i64* %54, align 8, !tbaa !1240
  %165 = trunc i64 %152 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %161, %156
  %166 = phi i64 [ %160, %156 ], [ %148, %161 ]
  %167 = phi i32 [ %159, %156 ], [ %165, %161 ]
  %168 = phi i64 [ %158, %156 ], [ %133, %161 ]
  %169 = phi %struct.Memory* [ %157, %156 ], [ %131, %161 ]
  %170 = add i64 %168, -28
  %171 = inttoptr i64 %170 to i32*
  store i32 %167, i32* %171
  %172 = add i64 %166, -95
  br label %block_406cad

block_406cb7:                                     ; preds = %block_406cad
  %173 = zext i32 %108 to i64
  %174 = add i64 %104, -52
  %175 = inttoptr i64 %174 to i32*
  store i32 2, i32* %175
  store i64 %173, i64* %10, align 8, !tbaa !1240
  %176 = sext i32 %108 to i64
  %177 = lshr i64 %176, 32
  store i64 %177, i64* %53, align 8, !tbaa !1240
  %178 = inttoptr i64 %174 to i32*
  %179 = load i32, i32* %178
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %11, align 8, !tbaa !1240
  %181 = add i64 %119, 19
  store i64 %181, i64* %3, align 8
  %182 = sext i32 %179 to i64
  %183 = shl nuw i64 %177, 32
  %184 = or i64 %183, %173
  %185 = sdiv i64 %184, %182
  %186 = shl i64 %185, 32
  %187 = ashr exact i64 %186, 32
  %188 = icmp eq i64 %185, %187
  br i1 %188, label %193, label %189

; <label>:189:                                    ; preds = %block_406cb7
  %190 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %181, %struct.Memory* %105) #14
  %191 = load i32, i32* %7, align 4
  %192 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:193:                                    ; preds = %block_406cb7
  %194 = srem i64 %184, %182
  %195 = and i64 %194, 4294967295
  store i64 %195, i64* %54, align 8, !tbaa !1240
  %196 = trunc i64 %194 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %193, %189
  %197 = phi i64 [ %192, %189 ], [ %181, %193 ]
  %198 = phi i32 [ %191, %189 ], [ %196, %193 ]
  %199 = phi %struct.Memory* [ %190, %189 ], [ %105, %193 ]
  %200 = add i32 %198, -1
  %201 = icmp eq i32 %198, 0
  %202 = zext i1 %201 to i8
  store i8 %202, i8* %22, align 1, !tbaa !1246
  %203 = and i32 %200, 255
  %204 = tail call i32 @llvm.ctpop.i32(i32 %203) #11
  %205 = trunc i32 %204 to i8
  %206 = and i8 %205, 1
  %207 = xor i8 %206, 1
  store i8 %207, i8* %23, align 1, !tbaa !1260
  %208 = xor i32 %200, %198
  %209 = lshr i32 %208, 4
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  store i8 %211, i8* %24, align 1, !tbaa !1261
  %212 = icmp eq i32 %200, 0
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %25, align 1, !tbaa !1262
  %214 = lshr i32 %200, 31
  %215 = trunc i32 %214 to i8
  store i8 %215, i8* %26, align 1, !tbaa !1263
  %216 = lshr i32 %198, 31
  %217 = xor i32 %214, %216
  %218 = add nuw nsw i32 %217, %216
  %219 = icmp eq i32 %218, 2
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %27, align 1, !tbaa !1264
  %221 = select i1 %212, i64 9, i64 28
  %222 = add i64 %197, %221
  %223 = load i64, i64* %14, align 8
  br i1 %212, label %block_406cd3, label %block_406ce6
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400c30_timer_clear(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400c30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = bitcast %union.VectorReg* %9 to i8*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %16 = bitcast %union.VectorReg* %9 to i32*
  store i32 0, i32* %16, align 1, !tbaa !1481
  %17 = getelementptr inbounds i8, i8* %14, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 1, !tbaa !1481
  %19 = bitcast i64* %15 to i32*
  store i32 0, i32* %19, align 1, !tbaa !1481
  %20 = getelementptr inbounds i8, i8* %14, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 1, !tbaa !1481
  %22 = add i64 %11, -12
  %23 = load i32, i32* %5, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = inttoptr i64 %22 to i32*
  %26 = load i32, i32* %25
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %6, align 8, !tbaa !1240
  %28 = shl nsw i64 %27, 3
  %29 = add i64 %28, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 16)
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %12 to i64*
  %34 = load i64, i64* %33
  store i64 %34, i64* %8, align 8, !tbaa !1240
  %35 = inttoptr i64 %11 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %3, align 8, !tbaa !1240
  %37 = add i64 %11, 8
  store i64 %37, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400800_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400838:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 0, i64* %4, align 8, !tbaa !1240
  store i64 0, i64* %5, align 8, !tbaa !1240
  store i8 0, i8* %12, align 1, !tbaa !1494
  store i8 1, i8* %13, align 1, !tbaa !1494
  store i8 0, i8* %14, align 1, !tbaa !1494
  store i8 1, i8* %15, align 1, !tbaa !1494
  store i8 0, i8* %16, align 1, !tbaa !1494
  store i8 0, i8* %17, align 1, !tbaa !1494
  %18 = inttoptr i64 %10 to i64*
  %19 = load i64, i64* %18
  store i64 %19, i64* %7, align 8, !tbaa !1240
  %20 = inttoptr i64 %9 to i64*
  %21 = load i64, i64* %20
  store i64 %21, i64* %3, align 8, !tbaa !1240
  %22 = add i64 %9, 8
  store i64 %22, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_407880_wtime_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_407880:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %9, align 8, !tbaa !1240
  %17 = add i64 %14, -40
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -32
  store i64 0, i64* %6, align 8, !tbaa !1240
  %25 = add i64 %14, -16
  %26 = load i64, i64* %7, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  store i64 %24, i64* %7, align 8, !tbaa !1240
  %28 = add i64 %1, 28
  %29 = add i64 %14, -48
  %30 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %30
  store i64 %17, i64* %8, align 8, !alias.scope !1765, !noalias !1768
  %31 = tail call i64 @gettimeofday(i64 %24, i64 0), !noalias !1765
  %32 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_609078__data_type* @seg_609078__data to i64), i64 16) to i32*)
  %33 = lshr i32 %32, 31
  %34 = trunc i32 %33 to i8
  %35 = load i64, i64* %9, align 8
  %36 = add i64 %35, -28
  %37 = trunc i64 %31 to i32
  %38 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %38
  %39 = icmp ne i8 %34, 0
  %40 = add i64 %35, -24
  br i1 %39, label %block_4078ad, label %block_4078ba

block_4078ba:                                     ; preds = %block_4078ad, %block_407880
  %41 = phi %struct.Memory* [ %2, %block_4078ad ], [ %2, %block_407880 ]
  %42 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_407980__rodata_type* @seg_407980__rodata to i64), i64 952) to double*)
  %43 = bitcast [32 x %union.VectorReg]* %10 to double*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %45 = inttoptr i64 %40 to i64*
  %46 = load i64, i64* %45
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_609078__data_type* @seg_609078__data to i64), i64 16) to i32*)
  %48 = sext i32 %47 to i64
  store i64 %48, i64* %5, align 8, !tbaa !1240
  %49 = sub i64 %46, %48
  %50 = sitofp i64 %49 to double
  %51 = bitcast %union.VectorReg* %11 to double*
  %52 = add i64 %35, -16
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = sitofp i64 %54 to double
  %56 = bitcast %union.VectorReg* %12 to double*
  store double %55, double* %56, align 1, !tbaa !1244
  %57 = fmul double %55, %42
  store double %57, double* %43, align 1, !tbaa !1244
  store i64 0, i64* %44, align 1, !tbaa !1244
  %58 = fadd double %50, %57
  store double %58, double* %51, align 1, !tbaa !1244
  %59 = add i64 %35, -8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %4, align 8, !tbaa !1240
  %62 = inttoptr i64 %61 to double*
  store double %58, double* %62
  %63 = load i64, i64* %8, align 8
  %64 = add i64 %63, 32
  %65 = icmp ugt i64 %63, -33
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %18, align 1, !tbaa !1246
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #11
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %19, align 1, !tbaa !1260
  %73 = xor i64 %64, %63
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %20, align 1, !tbaa !1261
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %21, align 1, !tbaa !1262
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %22, align 1, !tbaa !1263
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %23, align 1, !tbaa !1264
  %86 = add i64 %63, 40
  %87 = inttoptr i64 %64 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %9, align 8, !tbaa !1240
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %3, align 8, !tbaa !1240
  %91 = add i64 %63, 48
  store i64 %91, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %41

block_4078ad:                                     ; preds = %block_407880
  %92 = inttoptr i64 %40 to i64*
  %93 = load i64, i64* %92
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* inttoptr (i64 add (i64 ptrtoint (%seg_609078__data_type* @seg_609078__data to i64), i64 16) to i32*)
  br label %block_4078ba
}

; Function Attrs: noinline
define %struct.Memory* @sub_4039a0_mg3P(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4039a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %20 = load i64, i64* %15, align 8
  %21 = load i64, i64* %14, align 8, !tbaa !1240
  %22 = add i64 %21, -8
  %23 = inttoptr i64 %22 to i64*
  store i64 %20, i64* %23
  store i64 %22, i64* %15, align 8, !tbaa !1240
  %24 = load i64, i64* %19, align 8
  %25 = add i64 %21, -16
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  %27 = load i64, i64* %9, align 8
  %28 = add i64 %21, -24
  %29 = inttoptr i64 %28 to i64*
  store i64 %27, i64* %29
  %30 = add i64 %21, -152
  store i64 %30, i64* %14, align 8, !tbaa !1240
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %37 = add i64 %21, 16
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38
  %40 = add i64 %21, 8
  %41 = inttoptr i64 %40 to i32*
  %42 = load i32, i32* %41
  %43 = zext i32 %42 to i64
  store i64 %43, i64* %18, align 8, !tbaa !1240
  %44 = add i64 %21, -32
  %45 = load i64, i64* %13, align 8
  %46 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %46
  %47 = add i64 %21, -40
  %48 = load i64, i64* %12, align 8
  %49 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %49
  %50 = add i64 %21, -48
  %51 = load i64, i64* %11, align 8
  %52 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %52
  %53 = add i64 %21, -56
  %54 = load i64, i64* %10, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %54, i64* %55
  %56 = add i64 %21, -64
  %57 = load i64, i64* %16, align 8
  %58 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %58
  %59 = add i64 %21, -68
  %60 = load i32, i32* %7, align 4
  %61 = inttoptr i64 %59 to i32*
  store i32 %60, i32* %61
  %62 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %17, align 8, !tbaa !1240
  %64 = add i64 %21, -76
  %65 = inttoptr i64 %64 to i32*
  store i32 %62, i32* %65
  %66 = load i64, i64* %15, align 8
  %67 = add i64 %66, -72
  %68 = inttoptr i64 %67 to i32*
  store i32 %42, i32* %68
  %69 = add i64 %66, -76
  %70 = add i64 %1, 64
  %71 = inttoptr i64 %69 to i32*
  store i32 %39, i32* %71
  br label %block_4039e0

block_403b7c:                                     ; preds = %block_403b67
  %72 = add i32 %682, -1
  %73 = add i64 %678, -64
  %74 = inttoptr i64 %73 to i32*
  store i32 %72, i32* %74
  %75 = add i64 %678, -24
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  %78 = inttoptr i64 %680 to i32*
  %79 = load i32, i32* %78
  %80 = sext i32 %79 to i64
  %81 = shl nsw i64 %80, 2
  %82 = add i64 %81, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %83 = inttoptr i64 %82 to i32*
  %84 = load i32, i32* %83
  %85 = sext i32 %84 to i64
  %86 = shl nsw i64 %85, 3
  %87 = add i64 %86, %77
  %88 = load i64, i64* %15, align 8
  %89 = add i64 %88, -68
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 2
  %94 = add i64 %93, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %95 = inttoptr i64 %94 to i32*
  %96 = load i32, i32* %95
  %97 = zext i32 %96 to i64
  store i64 %97, i64* %12, align 8, !tbaa !1240
  %98 = add i64 %93, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %11, align 8, !tbaa !1240
  %102 = add i64 %93, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %103 = inttoptr i64 %102 to i32*
  %104 = load i32, i32* %103
  %105 = zext i32 %104 to i64
  store i64 %87, i64* %13, align 8, !tbaa !1240
  store i64 %105, i64* %10, align 8, !tbaa !1240
  %106 = add i64 %699, -5116
  %107 = add i64 %699, 75
  %108 = load i64, i64* %14, align 8, !tbaa !1240
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %107, i64* %110
  store i64 %109, i64* %14, align 8, !tbaa !1240
  %111 = tail call %struct.Memory* @sub_402780_zero3(%struct.State* nonnull %0, i64 %106, %struct.Memory* %679)
  %112 = load i64, i64* %15, align 8
  %113 = add i64 %112, -24
  %114 = load i64, i64* %3, align 8
  %115 = inttoptr i64 %113 to i64*
  %116 = load i64, i64* %115
  %117 = add i64 %112, -64
  %118 = inttoptr i64 %117 to i32*
  %119 = load i32, i32* %118
  %120 = sext i32 %119 to i64
  %121 = shl nsw i64 %120, 2
  %122 = add i64 %121, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %123 = inttoptr i64 %122 to i32*
  %124 = load i32, i32* %123
  %125 = sext i32 %124 to i64
  %126 = shl nsw i64 %125, 3
  %127 = add i64 %126, %116
  store i64 %127, i64* %13, align 8, !tbaa !1240
  %128 = add i64 %121, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %129 = inttoptr i64 %128 to i32*
  %130 = load i32, i32* %129
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %12, align 8, !tbaa !1240
  %132 = add i64 %121, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %133 = inttoptr i64 %132 to i32*
  %134 = load i32, i32* %133
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %11, align 8, !tbaa !1240
  %136 = add i64 %121, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %137 = inttoptr i64 %136 to i32*
  %138 = load i32, i32* %137
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %10, align 8, !tbaa !1240
  %140 = load i64, i64* %15, align 8
  %141 = add i64 %140, -24
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  %144 = add i64 %140, -68
  %145 = inttoptr i64 %144 to i32*
  %146 = load i32, i32* %145
  %147 = sext i32 %146 to i64
  %148 = shl nsw i64 %147, 2
  %149 = add i64 %148, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %150 = inttoptr i64 %149 to i32*
  %151 = load i32, i32* %150
  %152 = sext i32 %151 to i64
  %153 = shl nsw i64 %152, 3
  %154 = add i64 %153, %143
  store i64 %154, i64* %16, align 8, !tbaa !1240
  %155 = add i64 %148, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %156 = inttoptr i64 %155 to i32*
  %157 = load i32, i32* %156
  %158 = zext i32 %157 to i64
  store i64 %158, i64* %17, align 8, !tbaa !1240
  %159 = add i64 %148, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %160 = inttoptr i64 %159 to i32*
  %161 = load i32, i32* %160
  %162 = add i64 %148, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %163 = inttoptr i64 %162 to i32*
  %164 = load i32, i32* %163
  %165 = load i64, i64* %15, align 8
  %166 = add i64 %165, -68
  %167 = inttoptr i64 %166 to i32*
  %168 = load i32, i32* %167
  %169 = zext i32 %168 to i64
  store i64 %169, i64* %9, align 8, !tbaa !1240
  %170 = load i64, i64* %14, align 8
  %171 = inttoptr i64 %170 to i32*
  store i32 %161, i32* %171
  %172 = add i64 %170, 8
  %173 = inttoptr i64 %172 to i32*
  store i32 %164, i32* %173
  %174 = add i64 %170, 16
  %175 = inttoptr i64 %174 to i32*
  store i32 %168, i32* %175
  %176 = add i64 %114, 4185
  %177 = add i64 %114, 138
  %178 = add i64 %170, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %177, i64* %179
  store i64 %178, i64* %14, align 8, !tbaa !1240
  %180 = tail call %struct.Memory* @sub_404c20_interp(%struct.State* nonnull %0, i64 %176, %struct.Memory* %111)
  %181 = load i64, i64* %15, align 8
  %182 = add i64 %181, -24
  %183 = load i64, i64* %3, align 8
  %184 = inttoptr i64 %182 to i64*
  %185 = load i64, i64* %184
  %186 = add i64 %181, -68
  %187 = inttoptr i64 %186 to i32*
  %188 = load i32, i32* %187
  %189 = sext i32 %188 to i64
  %190 = shl nsw i64 %189, 2
  %191 = add i64 %190, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %192 = inttoptr i64 %191 to i32*
  %193 = load i32, i32* %192
  %194 = sext i32 %193 to i64
  %195 = shl nsw i64 %194, 3
  %196 = add i64 %195, %185
  store i64 %196, i64* %13, align 8, !tbaa !1240
  %197 = add i64 %181, -40
  %198 = inttoptr i64 %197 to i64*
  %199 = load i64, i64* %198
  %200 = add i64 %195, %199
  store i64 %200, i64* %16, align 8, !tbaa !1240
  %201 = load i64, i64* %15, align 8
  %202 = add i64 %201, -40
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = add i64 %201, -68
  %206 = inttoptr i64 %205 to i32*
  %207 = load i32, i32* %206
  %208 = sext i32 %207 to i64
  %209 = shl nsw i64 %208, 2
  %210 = add i64 %209, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %211 = inttoptr i64 %210 to i32*
  %212 = load i32, i32* %211
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 3
  %215 = add i64 %214, %204
  %216 = add i64 %209, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %217 = inttoptr i64 %216 to i32*
  %218 = load i32, i32* %217
  %219 = zext i32 %218 to i64
  store i64 %219, i64* %10, align 8, !tbaa !1240
  %220 = add i64 %209, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %221 = inttoptr i64 %220 to i32*
  %222 = load i32, i32* %221
  %223 = zext i32 %222 to i64
  %224 = add i64 %209, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %225 = inttoptr i64 %224 to i32*
  %226 = load i32, i32* %225
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %17, align 8, !tbaa !1240
  %228 = load i64, i64* %15, align 8
  %229 = add i64 %228, -48
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %19, align 8, !tbaa !1240
  %232 = add i64 %228, -68
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233
  %235 = load i64, i64* %16, align 8
  store i64 %235, i64* %12, align 8, !tbaa !1240
  %236 = add i64 %228, -96
  %237 = inttoptr i64 %236 to i32*
  store i32 %234, i32* %237
  store i64 %215, i64* %11, align 8, !tbaa !1240
  store i64 %223, i64* %16, align 8, !tbaa !1240
  %238 = load i64, i64* %14, align 8
  %239 = inttoptr i64 %238 to i64*
  store i64 %231, i64* %239
  %240 = inttoptr i64 %236 to i32*
  %241 = load i32, i32* %240
  %242 = add i64 %238, 8
  %243 = inttoptr i64 %242 to i32*
  store i32 %241, i32* %243
  %244 = add i64 %183, -2033
  %245 = add i64 %183, 140
  %246 = add i64 %238, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %245, i64* %247
  store i64 %246, i64* %14, align 8, !tbaa !1240
  %248 = tail call %struct.Memory* @sub_403460_resid(%struct.State* nonnull %0, i64 %244, %struct.Memory* %180)
  %249 = load i64, i64* %15, align 8
  %250 = add i64 %249, -40
  %251 = load i64, i64* %3, align 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252
  %254 = add i64 %249, -68
  %255 = inttoptr i64 %254 to i32*
  %256 = load i32, i32* %255
  %257 = sext i32 %256 to i64
  %258 = shl nsw i64 %257, 2
  %259 = add i64 %258, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %260 = inttoptr i64 %259 to i32*
  %261 = load i32, i32* %260
  %262 = sext i32 %261 to i64
  %263 = shl nsw i64 %262, 3
  %264 = add i64 %263, %253
  store i64 %264, i64* %11, align 8, !tbaa !1240
  %265 = add i64 %249, -24
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %263, %267
  store i64 %268, i64* %12, align 8, !tbaa !1240
  %269 = load i64, i64* %15, align 8
  %270 = add i64 %269, -68
  %271 = inttoptr i64 %270 to i32*
  %272 = load i32, i32* %271
  %273 = sext i32 %272 to i64
  %274 = shl nsw i64 %273, 2
  %275 = add i64 %274, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %276 = inttoptr i64 %275 to i32*
  %277 = load i32, i32* %276
  %278 = zext i32 %277 to i64
  %279 = add i64 %274, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %280 = inttoptr i64 %279 to i32*
  %281 = load i32, i32* %280
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %10, align 8, !tbaa !1240
  %283 = add i64 %274, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %284 = inttoptr i64 %283 to i32*
  %285 = load i32, i32* %284
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %16, align 8, !tbaa !1240
  %287 = add i64 %269, -56
  %288 = inttoptr i64 %287 to i64*
  %289 = load i64, i64* %288
  store i64 %289, i64* %17, align 8, !tbaa !1240
  %290 = load i64, i64* %11, align 8
  store i64 %290, i64* %13, align 8, !tbaa !1240
  store i64 %278, i64* %11, align 8, !tbaa !1240
  %291 = load i64, i64* %14, align 8
  %292 = inttoptr i64 %291 to i32*
  store i32 %272, i32* %292
  %293 = add i64 %251, 2531
  %294 = add i64 %251, 102
  %295 = add i64 %291, -8
  %296 = inttoptr i64 %295 to i64*
  store i64 %294, i64* %296
  store i64 %295, i64* %14, align 8, !tbaa !1240
  %297 = tail call %struct.Memory* @sub_4046c0_psinv(%struct.State* nonnull %0, i64 %293, %struct.Memory* %248)
  %298 = load i64, i64* %15, align 8
  %299 = add i64 %298, -68
  %300 = load i64, i64* %3, align 8
  %301 = inttoptr i64 %299 to i32*
  %302 = load i32, i32* %301
  %303 = add i32 %302, 1
  %304 = inttoptr i64 %299 to i32*
  store i32 %303, i32* %304
  %305 = add i64 %300, -476
  br label %block_403b67

block_4039f5:                                     ; preds = %block_4039e0
  %306 = add i32 %705, -1
  %307 = add i64 %701, -64
  %308 = inttoptr i64 %307 to i32*
  store i32 %306, i32* %308
  %309 = add i64 %701, -40
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = inttoptr i64 %703 to i32*
  %313 = load i32, i32* %312
  %314 = sext i32 %313 to i64
  %315 = shl nsw i64 %314, 2
  %316 = add i64 %315, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %317 = inttoptr i64 %316 to i32*
  %318 = load i32, i32* %317
  %319 = sext i32 %318 to i64
  %320 = shl nsw i64 %319, 3
  %321 = add i64 %320, %311
  store i64 %321, i64* %10, align 8, !tbaa !1240
  %322 = load i64, i64* %15, align 8
  %323 = add i64 %322, -68
  %324 = inttoptr i64 %323 to i32*
  %325 = load i32, i32* %324
  %326 = sext i32 %325 to i64
  %327 = shl nsw i64 %326, 2
  %328 = add i64 %327, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %329 = inttoptr i64 %328 to i32*
  %330 = load i32, i32* %329
  %331 = zext i32 %330 to i64
  store i64 %331, i64* %12, align 8, !tbaa !1240
  %332 = add i64 %327, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %333 = inttoptr i64 %332 to i32*
  %334 = load i32, i32* %333
  %335 = zext i32 %334 to i64
  store i64 %335, i64* %11, align 8, !tbaa !1240
  %336 = add i64 %327, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %337 = inttoptr i64 %336 to i32*
  %338 = load i32, i32* %337
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %8, align 8, !tbaa !1240
  %340 = add i64 %322, -40
  %341 = inttoptr i64 %340 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %322, -64
  %344 = inttoptr i64 %343 to i32*
  %345 = load i32, i32* %344
  %346 = sext i32 %345 to i64
  %347 = shl nsw i64 %346, 2
  %348 = add i64 %347, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %349 = inttoptr i64 %348 to i32*
  %350 = load i32, i32* %349
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 3
  %353 = add i64 %352, %342
  %354 = load i64, i64* %15, align 8
  %355 = add i64 %354, -64
  %356 = inttoptr i64 %355 to i32*
  %357 = load i32, i32* %356
  %358 = sext i32 %357 to i64
  %359 = shl nsw i64 %358, 2
  %360 = add i64 %359, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %361 = inttoptr i64 %360 to i32*
  %362 = load i32, i32* %361
  %363 = zext i32 %362 to i64
  store i64 %363, i64* %17, align 8, !tbaa !1240
  %364 = add i64 %359, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %365 = inttoptr i64 %364 to i32*
  %366 = load i32, i32* %365
  %367 = add i64 %359, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %368 = inttoptr i64 %367 to i32*
  %369 = load i32, i32* %368
  %370 = add i64 %354, -68
  %371 = inttoptr i64 %370 to i32*
  %372 = load i32, i32* %371
  %373 = zext i32 %372 to i64
  store i64 %373, i64* %9, align 8, !tbaa !1240
  %374 = add i64 %354, -88
  %375 = inttoptr i64 %374 to i64*
  store i64 %353, i64* %375
  %376 = load i64, i64* %10, align 8
  store i64 %376, i64* %13, align 8, !tbaa !1240
  %377 = load i32, i32* %5, align 4
  %378 = zext i32 %377 to i64
  store i64 %378, i64* %10, align 8, !tbaa !1240
  %379 = inttoptr i64 %374 to i64*
  %380 = load i64, i64* %379
  store i64 %380, i64* %16, align 8, !tbaa !1240
  %381 = load i64, i64* %14, align 8
  %382 = inttoptr i64 %381 to i32*
  store i32 %366, i32* %382
  %383 = add i64 %381, 8
  %384 = inttoptr i64 %383 to i32*
  store i32 %369, i32* %384
  %385 = add i64 %381, 16
  %386 = inttoptr i64 %385 to i32*
  store i32 %372, i32* %386
  %387 = add i64 %720, 1179
  %388 = add i64 %720, 158
  %389 = add i64 %381, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %388, i64* %390
  store i64 %389, i64* %14, align 8, !tbaa !1240
  %391 = tail call %struct.Memory* @sub_403e90_rprj3(%struct.State* nonnull %0, i64 %387, %struct.Memory* %702)
  %392 = load i64, i64* %15, align 8
  %393 = add i64 %392, -68
  %394 = load i64, i64* %3, align 8
  %395 = inttoptr i64 %393 to i32*
  %396 = load i32, i32* %395
  %397 = add i32 %396, -1
  %398 = inttoptr i64 %393 to i32*
  store i32 %397, i32* %398
  %399 = add i64 %394, -179
  br label %block_4039e0

block_403d51:                                     ; preds = %block_403b67
  %400 = add i64 %678, -64
  %401 = inttoptr i64 %400 to i32*
  store i32 %684, i32* %401
  %402 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %403 = inttoptr i64 %680 to i32*
  store i32 %402, i32* %403
  %404 = add i64 %678, -24
  %405 = inttoptr i64 %404 to i64*
  %406 = load i64, i64* %405
  %407 = inttoptr i64 %400 to i32*
  %408 = load i32, i32* %407
  %409 = sext i32 %408 to i64
  %410 = shl nsw i64 %409, 2
  %411 = add i64 %410, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %412 = inttoptr i64 %411 to i32*
  %413 = load i32, i32* %412
  %414 = sext i32 %413 to i64
  %415 = shl nsw i64 %414, 3
  %416 = add i64 %415, %406
  %417 = load i64, i64* %15, align 8
  %418 = add i64 %417, -64
  %419 = inttoptr i64 %418 to i32*
  %420 = load i32, i32* %419
  %421 = sext i32 %420 to i64
  %422 = shl nsw i64 %421, 2
  %423 = add i64 %422, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %424 = inttoptr i64 %423 to i32*
  %425 = load i32, i32* %424
  %426 = zext i32 %425 to i64
  store i64 %426, i64* %12, align 8, !tbaa !1240
  %427 = add i64 %422, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %428 = inttoptr i64 %427 to i32*
  %429 = load i32, i32* %428
  %430 = zext i32 %429 to i64
  store i64 %430, i64* %11, align 8, !tbaa !1240
  %431 = add i64 %422, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %432 = inttoptr i64 %431 to i32*
  %433 = load i32, i32* %432
  %434 = zext i32 %433 to i64
  %435 = add i64 %417, -24
  %436 = inttoptr i64 %435 to i64*
  %437 = load i64, i64* %436
  %438 = add i64 %417, -60
  %439 = inttoptr i64 %438 to i32*
  %440 = load i32, i32* %439
  %441 = zext i32 %440 to i64
  store i64 %441, i64* %17, align 8, !tbaa !1240
  %442 = add i64 %417, 16
  %443 = inttoptr i64 %442 to i32*
  %444 = load i32, i32* %443
  %445 = add i64 %417, 24
  %446 = inttoptr i64 %445 to i32*
  %447 = load i32, i32* %446
  %448 = add i64 %417, -68
  %449 = inttoptr i64 %448 to i32*
  %450 = load i32, i32* %449
  %451 = add i64 %417, -104
  %452 = inttoptr i64 %451 to i64*
  store i64 %437, i64* %452
  store i64 %416, i64* %13, align 8, !tbaa !1240
  store i64 %434, i64* %10, align 8, !tbaa !1240
  %453 = inttoptr i64 %451 to i64*
  %454 = load i64, i64* %453
  store i64 %454, i64* %9, align 8, !tbaa !1240
  %455 = add i64 %417, -108
  %456 = inttoptr i64 %455 to i32*
  store i32 %444, i32* %456
  store i64 %454, i64* %16, align 8, !tbaa !1240
  %457 = inttoptr i64 %455 to i32*
  %458 = load i32, i32* %457
  %459 = load i64, i64* %14, align 8
  %460 = inttoptr i64 %459 to i32*
  store i32 %458, i32* %460
  %461 = add i64 %459, 8
  %462 = inttoptr i64 %461 to i32*
  store i32 %447, i32* %462
  %463 = add i64 %459, 16
  %464 = inttoptr i64 %463 to i32*
  store i32 %450, i32* %464
  %465 = add i64 %699, 3791
  %466 = add i64 %699, 140
  %467 = add i64 %459, -8
  %468 = inttoptr i64 %467 to i64*
  store i64 %466, i64* %468
  store i64 %467, i64* %14, align 8, !tbaa !1240
  %469 = tail call %struct.Memory* @sub_404c20_interp(%struct.State* nonnull %0, i64 %465, %struct.Memory* %679)
  %470 = load i64, i64* %15, align 8
  %471 = add i64 %470, -24
  %472 = load i64, i64* %3, align 8
  %473 = inttoptr i64 %471 to i64*
  %474 = load i64, i64* %473
  store i64 %474, i64* %13, align 8, !tbaa !1240
  %475 = add i64 %470, -32
  %476 = inttoptr i64 %475 to i64*
  %477 = load i64, i64* %476
  %478 = add i64 %470, -40
  %479 = inttoptr i64 %478 to i64*
  %480 = load i64, i64* %479
  store i64 %480, i64* %9, align 8, !tbaa !1240
  %481 = add i64 %470, -60
  %482 = inttoptr i64 %481 to i32*
  %483 = load i32, i32* %482
  %484 = zext i32 %483 to i64
  store i64 %484, i64* %10, align 8, !tbaa !1240
  %485 = add i64 %470, 16
  %486 = inttoptr i64 %485 to i32*
  %487 = load i32, i32* %486
  %488 = zext i32 %487 to i64
  %489 = add i64 %470, 24
  %490 = inttoptr i64 %489 to i32*
  %491 = load i32, i32* %490
  %492 = zext i32 %491 to i64
  store i64 %492, i64* %17, align 8, !tbaa !1240
  %493 = add i64 %470, -48
  %494 = inttoptr i64 %493 to i64*
  %495 = load i64, i64* %494
  store i64 %495, i64* %19, align 8, !tbaa !1240
  %496 = add i64 %470, -68
  %497 = inttoptr i64 %496 to i32*
  %498 = load i32, i32* %497
  store i64 %477, i64* %12, align 8, !tbaa !1240
  %499 = add i64 %470, -112
  %500 = inttoptr i64 %499 to i32*
  store i32 %498, i32* %500
  store i64 %480, i64* %11, align 8, !tbaa !1240
  store i64 %488, i64* %16, align 8, !tbaa !1240
  %501 = load i64, i64* %14, align 8
  %502 = inttoptr i64 %501 to i64*
  store i64 %495, i64* %502
  %503 = inttoptr i64 %499 to i32*
  %504 = load i32, i32* %503
  %505 = add i64 %501, 8
  %506 = inttoptr i64 %505 to i32*
  store i32 %504, i32* %506
  %507 = add i64 %472, -2429
  %508 = add i64 %472, 57
  %509 = add i64 %501, -8
  %510 = inttoptr i64 %509 to i64*
  store i64 %508, i64* %510
  store i64 %509, i64* %14, align 8, !tbaa !1240
  %511 = tail call %struct.Memory* @sub_403460_resid(%struct.State* nonnull %0, i64 %507, %struct.Memory* %469)
  %512 = load i64, i64* %15, align 8
  %513 = add i64 %512, -40
  %514 = load i64, i64* %3, align 8
  %515 = inttoptr i64 %513 to i64*
  %516 = load i64, i64* %515
  %517 = add i64 %512, -24
  %518 = inttoptr i64 %517 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %12, align 8, !tbaa !1240
  %520 = add i64 %512, -60
  %521 = inttoptr i64 %520 to i32*
  %522 = load i32, i32* %521
  %523 = zext i32 %522 to i64
  %524 = add i64 %512, 16
  %525 = inttoptr i64 %524 to i32*
  %526 = load i32, i32* %525
  %527 = zext i32 %526 to i64
  store i64 %527, i64* %10, align 8, !tbaa !1240
  %528 = add i64 %512, 24
  %529 = inttoptr i64 %528 to i32*
  %530 = load i32, i32* %529
  %531 = zext i32 %530 to i64
  store i64 %531, i64* %16, align 8, !tbaa !1240
  %532 = add i64 %512, -56
  %533 = inttoptr i64 %532 to i64*
  %534 = load i64, i64* %533
  store i64 %534, i64* %17, align 8, !tbaa !1240
  %535 = add i64 %512, -68
  %536 = inttoptr i64 %535 to i32*
  %537 = load i32, i32* %536
  store i64 %516, i64* %13, align 8, !tbaa !1240
  store i64 %523, i64* %11, align 8, !tbaa !1240
  %538 = load i64, i64* %14, align 8
  %539 = inttoptr i64 %538 to i32*
  store i32 %537, i32* %539
  %540 = add i64 %514, 2218
  %541 = add i64 %514, 40
  %542 = add i64 %538, -8
  %543 = inttoptr i64 %542 to i64*
  store i64 %541, i64* %543
  store i64 %542, i64* %14, align 8, !tbaa !1240
  %544 = tail call %struct.Memory* @sub_4046c0_psinv(%struct.State* nonnull %0, i64 %540, %struct.Memory* %511)
  %545 = load i64, i64* %14, align 8
  %546 = add i64 %545, 128
  %547 = icmp ugt i64 %545, -129
  %548 = zext i1 %547 to i8
  store i8 %548, i8* %31, align 1, !tbaa !1246
  %549 = trunc i64 %546 to i32
  %550 = and i32 %549, 255
  %551 = tail call i32 @llvm.ctpop.i32(i32 %550) #11
  %552 = trunc i32 %551 to i8
  %553 = and i8 %552, 1
  %554 = xor i8 %553, 1
  store i8 %554, i8* %32, align 1, !tbaa !1260
  %555 = xor i64 %546, %545
  %556 = lshr i64 %555, 4
  %557 = trunc i64 %556 to i8
  %558 = and i8 %557, 1
  store i8 %558, i8* %33, align 1, !tbaa !1261
  %559 = icmp eq i64 %546, 0
  %560 = zext i1 %559 to i8
  store i8 %560, i8* %34, align 1, !tbaa !1262
  %561 = lshr i64 %546, 63
  %562 = trunc i64 %561 to i8
  store i8 %562, i8* %35, align 1, !tbaa !1263
  %563 = lshr i64 %545, 63
  %564 = xor i64 %561, %563
  %565 = add nuw nsw i64 %564, %561
  %566 = icmp eq i64 %565, 2
  %567 = zext i1 %566 to i8
  store i8 %567, i8* %36, align 1, !tbaa !1264
  %568 = add i64 %545, 136
  %569 = inttoptr i64 %546 to i64*
  %570 = load i64, i64* %569
  store i64 %570, i64* %9, align 8, !tbaa !1240
  %571 = add i64 %545, 144
  %572 = inttoptr i64 %568 to i64*
  %573 = load i64, i64* %572
  store i64 %573, i64* %19, align 8, !tbaa !1240
  %574 = add i64 %545, 152
  %575 = inttoptr i64 %571 to i64*
  %576 = load i64, i64* %575
  store i64 %576, i64* %15, align 8, !tbaa !1240
  %577 = inttoptr i64 %574 to i64*
  %578 = load i64, i64* %577
  store i64 %578, i64* %3, align 8, !tbaa !1240
  %579 = add i64 %545, 160
  store i64 %579, i64* %14, align 8, !tbaa !1240
  ret %struct.Memory* %544

block_403aa1:                                     ; preds = %block_4039e0
  %580 = inttoptr i64 %703 to i32*
  store i32 %706, i32* %580
  %581 = add i64 %701, -24
  %582 = inttoptr i64 %581 to i64*
  %583 = load i64, i64* %582
  %584 = inttoptr i64 %703 to i32*
  %585 = load i32, i32* %584
  %586 = sext i32 %585 to i64
  %587 = shl nsw i64 %586, 2
  %588 = add i64 %587, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %589 = inttoptr i64 %588 to i32*
  %590 = load i32, i32* %589
  %591 = sext i32 %590 to i64
  %592 = shl nsw i64 %591, 3
  %593 = add i64 %592, %583
  %594 = add i64 %587, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %595 = inttoptr i64 %594 to i32*
  %596 = load i32, i32* %595
  %597 = zext i32 %596 to i64
  store i64 %597, i64* %12, align 8, !tbaa !1240
  %598 = add i64 %587, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %599 = inttoptr i64 %598 to i32*
  %600 = load i32, i32* %599
  %601 = zext i32 %600 to i64
  store i64 %601, i64* %11, align 8, !tbaa !1240
  %602 = load i64, i64* %15, align 8
  %603 = add i64 %602, -68
  %604 = inttoptr i64 %603 to i32*
  %605 = load i32, i32* %604
  %606 = sext i32 %605 to i64
  %607 = shl nsw i64 %606, 2
  %608 = add i64 %607, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %609 = inttoptr i64 %608 to i32*
  %610 = load i32, i32* %609
  %611 = zext i32 %610 to i64
  store i64 %593, i64* %13, align 8, !tbaa !1240
  store i64 %611, i64* %10, align 8, !tbaa !1240
  %612 = add i64 %720, -4897
  %613 = add i64 %720, 76
  %614 = load i64, i64* %14, align 8, !tbaa !1240
  %615 = add i64 %614, -8
  %616 = inttoptr i64 %615 to i64*
  store i64 %613, i64* %616
  store i64 %615, i64* %14, align 8, !tbaa !1240
  %617 = tail call %struct.Memory* @sub_402780_zero3(%struct.State* nonnull %0, i64 %612, %struct.Memory* %702)
  %618 = load i64, i64* %15, align 8
  %619 = add i64 %618, -40
  %620 = load i64, i64* %3, align 8
  %621 = inttoptr i64 %619 to i64*
  %622 = load i64, i64* %621
  %623 = add i64 %618, -68
  %624 = inttoptr i64 %623 to i32*
  %625 = load i32, i32* %624
  %626 = sext i32 %625 to i64
  %627 = shl nsw i64 %626, 2
  %628 = add i64 %627, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1424)
  %629 = inttoptr i64 %628 to i32*
  %630 = load i32, i32* %629
  %631 = sext i32 %630 to i64
  %632 = shl nsw i64 %631, 3
  %633 = add i64 %632, %622
  store i64 %633, i64* %13, align 8, !tbaa !1240
  %634 = add i64 %618, -24
  %635 = inttoptr i64 %634 to i64*
  %636 = load i64, i64* %635
  %637 = add i64 %632, %636
  %638 = load i64, i64* %15, align 8
  %639 = add i64 %638, -68
  %640 = inttoptr i64 %639 to i32*
  %641 = load i32, i32* %640
  %642 = sext i32 %641 to i64
  %643 = shl nsw i64 %642, 2
  %644 = add i64 %643, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1264)
  %645 = inttoptr i64 %644 to i32*
  %646 = load i32, i32* %645
  %647 = zext i32 %646 to i64
  store i64 %647, i64* %11, align 8, !tbaa !1240
  %648 = add i64 %643, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1312)
  %649 = inttoptr i64 %648 to i32*
  %650 = load i32, i32* %649
  %651 = zext i32 %650 to i64
  store i64 %651, i64* %10, align 8, !tbaa !1240
  %652 = add i64 %643, add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1360)
  %653 = inttoptr i64 %652 to i32*
  %654 = load i32, i32* %653
  %655 = zext i32 %654 to i64
  %656 = add i64 %638, -56
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %17, align 8, !tbaa !1240
  %659 = add i64 %638, -92
  %660 = inttoptr i64 %659 to i32*
  store i32 %641, i32* %660
  store i64 %637, i64* %12, align 8, !tbaa !1240
  store i64 %655, i64* %16, align 8, !tbaa !1240
  %661 = inttoptr i64 %659 to i32*
  %662 = load i32, i32* %661
  %663 = load i64, i64* %14, align 8
  %664 = inttoptr i64 %663 to i32*
  store i32 %662, i32* %664
  %665 = add i64 %620, 3027
  %666 = add i64 %620, 109
  %667 = add i64 %663, -8
  %668 = inttoptr i64 %667 to i64*
  store i64 %666, i64* %668
  store i64 %667, i64* %14, align 8, !tbaa !1240
  %669 = tail call %struct.Memory* @sub_4046c0_psinv(%struct.State* nonnull %0, i64 %665, %struct.Memory* %617)
  %670 = load i64, i64* %3, align 8
  %671 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1236) to i32*)
  %672 = add i32 %671, 1
  %673 = load i64, i64* %15, align 8
  %674 = add i64 %673, -68
  %675 = add i64 %670, 13
  %676 = inttoptr i64 %674 to i32*
  store i32 %672, i32* %676
  br label %block_403b67

block_403b67:                                     ; preds = %block_403aa1, %block_403b7c
  %677 = phi i64 [ %675, %block_403aa1 ], [ %305, %block_403b7c ]
  %678 = phi i64 [ %673, %block_403aa1 ], [ %298, %block_403b7c ]
  %679 = phi %struct.Memory* [ %669, %block_403aa1 ], [ %297, %block_403b7c ]
  %680 = add i64 %678, -68
  %681 = inttoptr i64 %680 to i32*
  %682 = load i32, i32* %681
  %683 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1044) to i32*)
  %684 = add i32 %683, -1
  %685 = lshr i32 %684, 31
  %686 = sub i32 %682, %684
  %687 = icmp eq i32 %686, 0
  %688 = lshr i32 %686, 31
  %689 = trunc i32 %688 to i8
  %690 = lshr i32 %682, 31
  %691 = xor i32 %685, %690
  %692 = xor i32 %688, %690
  %693 = add nuw nsw i32 %692, %691
  %694 = icmp eq i32 %693, 2
  %695 = icmp ne i8 %689, 0
  %696 = xor i1 %695, %694
  %697 = or i1 %687, %696
  %698 = select i1 %697, i64 21, i64 490
  %699 = add i64 %677, %698
  br i1 %697, label %block_403b7c, label %block_403d51

block_4039e0:                                     ; preds = %block_4039f5, %block_4039a0
  %700 = phi i64 [ %70, %block_4039a0 ], [ %399, %block_4039f5 ]
  %701 = phi i64 [ %66, %block_4039a0 ], [ %392, %block_4039f5 ]
  %702 = phi %struct.Memory* [ %2, %block_4039a0 ], [ %391, %block_4039f5 ]
  %703 = add i64 %701, -68
  %704 = inttoptr i64 %703 to i32*
  %705 = load i32, i32* %704
  %706 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_6090a0__bss_type* @seg_6090a0__bss to i64), i64 1236) to i32*)
  %707 = add i32 %706, 1
  %708 = lshr i32 %707, 31
  %709 = sub i32 %705, %707
  %710 = lshr i32 %709, 31
  %711 = trunc i32 %710 to i8
  %712 = lshr i32 %705, 31
  %713 = xor i32 %708, %712
  %714 = xor i32 %710, %712
  %715 = add nuw nsw i32 %714, %713
  %716 = icmp eq i32 %715, 2
  %717 = icmp ne i8 %711, 0
  %718 = xor i1 %717, %716
  %719 = select i1 %718, i64 193, i64 21
  %720 = add i64 %700, %719
  br i1 %718, label %block_403aa1, label %block_4039f5
}

; Function Attrs: noinline
define %struct.Memory* @sub_400790__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400790:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %10, align 8, !tbaa !1240
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = load i64, i64* %6, align 8
  store i64 %19, i64* %12, align 8, !tbaa !1240
  %20 = load i64, i64* %9, align 8, !tbaa !1240
  %21 = add i64 %20, 8
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %7, align 8, !tbaa !1240
  store i64 %21, i64* %6, align 8, !tbaa !1240
  %24 = and i64 %21, -16
  store i8 0, i8* %13, align 1, !tbaa !1246
  %25 = trunc i64 %21 to i32
  %26 = and i32 %25, 240
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #11
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %14, align 1, !tbaa !1260
  %31 = icmp eq i64 %24, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !1262
  %33 = lshr i64 %21, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %16, align 1, !tbaa !1263
  store i8 0, i8* %17, align 1, !tbaa !1264
  store i8 0, i8* %18, align 1, !tbaa !1261
  %35 = load i64, i64* %4, align 8
  %36 = add i64 %24, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = add i64 %24, -16
  %39 = inttoptr i64 %38 to i64*
  store i64 %36, i64* %39
  store i64 ptrtoint (i64 ()* @callback_sub_407970___libc_csu_fini to i64), i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (i64 ()* @callback_sub_407900___libc_csu_init to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64* %8, align 8, !tbaa !1240
  %40 = add i64 %1, 42
  %41 = add i64 %24, -24
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = inttoptr i64 %38 to i64*
  %44 = load i64, i64* %43
  %45 = add i64 %24, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46
  %48 = inttoptr i64 %41 to i64*
  %49 = load i64, i64* %48
  store i64 %38, i64* %9, align 8, !alias.scope !1770, !noalias !1773
  %50 = tail call i64 @__libc_start_main(i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64 %23, i64 %21, i64 ptrtoint (i64 ()* @callback_sub_407900___libc_csu_init to i64), i64 ptrtoint (i64 ()* @callback_sub_407970___libc_csu_fini to i64), i64 %19, i64 %44, i64 %47), !noalias !1770
  store i64 %50, i64* %4, align 8, !alias.scope !1770, !noalias !1773
  %51 = add i64 %49, 1
  store i64 %51, i64* %3, align 8
  %52 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %51, %struct.Memory* %2)
  ret %struct.Memory* %52
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_407974__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
block_407974:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9 = xor i64 %6, %5
  %10 = lshr i64 %9, 4
  %11 = trunc i64 %10 to i8
  %12 = and i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = lshr i64 %6, 63
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %5, 63
  %18 = xor i64 %15, %17
  %19 = add nuw nsw i64 %18, %17
  %20 = icmp eq i64 %19, 2
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = icmp ult i64 %5, 8
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %7, align 1, !tbaa !1246
  %25 = trunc i64 %5 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #11
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %8, align 1, !tbaa !1260
  store i8 %12, i8* %13, align 1, !tbaa !1261
  %31 = icmp eq i64 %5, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %14, align 1, !tbaa !1262
  %33 = trunc i64 %17 to i8
  store i8 %33, i8* %16, align 1, !tbaa !1263
  store i8 %21, i8* %22, align 1, !tbaa !1264
  %34 = inttoptr i64 %5 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %3, align 8, !tbaa !1240
  %36 = add i64 %5, 8
  store i64 %36, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline
define i64 @callback_sub_400790__start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196240, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400790__start(%struct.State* nonnull @__mcsema_reg_state, i64 4196240, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: norecurse nounwind
define void @__mcsema_verify_reg_state() local_unnamed_addr #7 {
entry:
  %0 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %is_null, label %end

is_null:                                          ; preds = %entry
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %end

end:                                              ; preds = %is_null, %entry
  ret void
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_400870_frame_dummy(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196464, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400870_frame_dummy(%struct.State* nonnull @__mcsema_reg_state, i64 4196464, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_400840___do_global_dtors_aux(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196416, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400840___do_global_dtors_aux(%struct.State* nonnull @__mcsema_reg_state, i64 4196416, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_609678_printf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @printf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @__mcsema_detach_call_value(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %1 to i64 (i64, i64, i64, i64, i64, i64, i64, i64)*
  %27 = tail call i64 %26(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25) #11
  store i64 %27, i64* %5, align 8
  %28 = inttoptr i64 %19 to i64*
  %29 = load i64, i64* %28
  store i64 %29, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_609660_free(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @free(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_609668___isoc99_fscanf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @__isoc99_fscanf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_609670_fclose(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @fclose(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_609690_fgetc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @fgetc(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6096b0_fopen(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @fopen(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400740_fprintf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @fprintf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400720_pow(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @pow(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6096b8_sprintf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @sprintf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint nounwind
define %struct.Memory* @ext_6096c0_sqrt(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = bitcast %union.VectorReg* %6 to double*
  %8 = load double, double* %7, align 8
  %9 = load i64, i64* %5, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %5, align 8
  %13 = tail call double @sqrt(double %8)
  %14 = bitcast %union.VectorReg* %6 to i128*
  store i128 0, i128* %14, align 8
  store double %13, double* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400750_malloc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @malloc(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400710_gettimeofday(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @gettimeofday(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_407970___libc_csu_fini() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4225392, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = add i64 %3, -8
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %7 = tail call %struct.Memory* @sub_407970___libc_csu_fini(%struct.State* nonnull @__mcsema_reg_state, i64 4225392, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %8
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_407900___libc_csu_init() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4225280, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = add i64 %3, -8
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %7 = tail call %struct.Memory* @sub_407900___libc_csu_init(%struct.State* nonnull @__mcsema_reg_state, i64 4225280, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %8
}

; Function Attrs: nobuiltin noinline
define i64 @main(i64, i64, i64) #6 {
  %4 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %3
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %3
  %6 = phi i64 [ %4, %3 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197648, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %7 = load volatile i1, i1* @0, align 1
  br i1 %7, label %__mcsema_early_init.exit, label %8

; <label>:8:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %8, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  %9 = add i64 %6, -8
  store i64 %9, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = tail call %struct.Memory* @sub_400d10_main(%struct.State* nonnull @__mcsema_reg_state, i64 4197648, %struct.Memory* null)
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %11 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %11
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_609698___libc_start_main(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %19 to i64*
  %27 = load i64, i64* %26
  store i64 %27, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %28 = tail call i64 @__libc_start_main(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25)
  store i64 %28, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.term_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4225396, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407974__term_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4225396, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @c_print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196480, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400880_c_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4196480, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @timer_start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197456, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400c50_timer_start(%struct.State* nonnull @__mcsema_reg_state, i64 4197456, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @randlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4224384, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407580_randlc(%struct.State* nonnull @__mcsema_reg_state, i64 4224384, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_read(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197616, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400cf0_timer_read(%struct.State* nonnull @__mcsema_reg_state, i64 4197616, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @vranlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4224720, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4076d0_vranlc(%struct.State* nonnull @__mcsema_reg_state, i64 4224720, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_clear(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197424, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400c30_timer_clear(%struct.State* nonnull @__mcsema_reg_state, i64 4197424, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4223376, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407190_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4223376, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @timer_stop(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197536, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400ca0_timer_stop(%struct.State* nonnull @__mcsema_reg_state, i64 4197536, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @wtime_(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4225152, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407880_wtime_(%struct.State* nonnull @__mcsema_reg_state, i64 4225152, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.init_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196000, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4006a0__init_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4196000, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #11 {
  %1 = tail call i64 @callback_sub_407970___libc_csu_fini()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #11 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %2, %0
  %3 = tail call i64 @callback_sub_407900___libc_csu_init()
  ret void
}

; Function Attrs: noinline optnone
define %struct.State* @__mcsema_debug_get_reg_state() #12 {
  ret %struct.State* @__mcsema_reg_state
}

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #13

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline }
attributes #4 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin noinline }
attributes #7 = { norecurse nounwind }
attributes #8 = { nobuiltin noinline nounwind }
attributes #9 = { alwaysinline inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { alwaysinline inlinehint nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noinline optnone }
attributes #13 = { noreturn nounwind }
attributes #14 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1238, !1239}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/antonio/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !75, !81, !84, !91, !95, !100, !102, !110, !114, !118, !130, !134, !138, !142, !146, !151, !155, !159, !163, !167, !175, !179, !183, !185, !189, !193, !197, !203, !207, !211, !213, !221, !225, !233, !235, !239, !243, !247, !251, !256, !261, !266, !267, !268, !269, !272, !273, !274, !275, !276, !277, !278, !334, !338, !354, !357, !362, !370, !375, !379, !383, !387, !391, !393, !395, !399, !405, !409, !415, !421, !423, !427, !431, !435, !439, !450, !452, !456, !460, !464, !466, !470, !474, !478, !480, !482, !486, !494, !498, !502, !506, !508, !514, !516, !522, !526, !530, !534, !538, !542, !546, !548, !550, !554, !558, !562, !564, !568, !572, !574, !576, !580, !584, !588, !592, !593, !594, !522, !450, !456, !464, !592, !593, !594, !595, !598, !601, !603, !605, !607, !609, !611, !613, !615, !617, !619, !621, !623, !625, !626, !627, !628, !630, !632, !634, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !657, !661, !666, !669, !671, !673, !675, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !698, !704, !709, !713, !715, !717, !719, !721, !728, !732, !736, !740, !744, !748, !753, !757, !759, !763, !769, !773, !778, !780, !782, !786, !790, !794, !796, !798, !800, !802, !806, !808, !810, !814, !818, !822, !826, !830, !832, !834, !838, !842, !846, !850, !852, !854, !858, !862, !863, !864, !865, !866, !867, !872, !874, !876, !880, !882, !884, !886, !888, !890, !892, !894, !899, !903, !905, !907, !912, !914, !916, !918, !920, !922, !924, !927, !929, !931, !935, !939, !941, !943, !945, !947, !949, !951, !953, !955, !957, !959, !963, !967, !969, !971, !973, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !1001, !1005, !1009, !1011, !1013, !1015, !1017, !1019, !1021, !1023, !1025, !1027, !1031, !1035, !1039, !1041, !1043, !1045, !1049, !1053, !1057, !1059, !1061, !1063, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1085, !1089, !1093, !1095, !1097, !1099, !1101, !1105, !1109, !1111, !1113, !1115, !1117, !1119, !1121, !1125, !1129, !1131, !1133, !1135, !1137, !1141, !1145, !1149, !1151, !1153, !1155, !1157, !1159, !1161, !1165, !1169, !1173, !1175, !1179, !1183, !1185, !1187, !1189, !1191, !1193, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !73)
!72 = !DINamespace(name: "__gnu_debug", scope: null)
!73 = !DINamespace(name: "__debug", scope: !74)
!74 = !DINamespace(name: "std", scope: null)
!75 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !76)
!76 = !DISubprogram(name: "abs", scope: !77, file: !77, line: 837, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!77 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!78 = !DISubroutineType(types: !79)
!79 = !{!80, !80}
!80 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!81 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !82)
!82 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !77, line: 62, baseType: !83)
!83 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!84 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !85)
!85 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !77, line: 70, baseType: !86)
!86 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 66, size: 128, elements: !87, identifier: "_ZTS6ldiv_t")
!87 = !{!88, !90}
!88 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !86, file: !77, line: 68, baseType: !89, size: 64)
!89 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !86, file: !77, line: 69, baseType: !89, size: 64, offset: 64)
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !92)
!92 = !DISubprogram(name: "abort", scope: !77, file: !77, line: 588, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{null}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !96)
!96 = !DISubprogram(name: "atexit", scope: !77, file: !77, line: 592, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!80, !99}
!99 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!100 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !101)
!101 = !DISubprogram(name: "at_quick_exit", scope: !77, file: !77, line: 597, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !103)
!103 = !DISubprogram(name: "atof", scope: !77, file: !77, line: 101, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DISubroutineType(types: !105)
!105 = !{!106, !107}
!106 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !109)
!109 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!110 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !111)
!111 = !DISubprogram(name: "atoi", scope: !77, file: !77, line: 104, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!112 = !DISubroutineType(types: !113)
!113 = !{!80, !107}
!114 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !115)
!115 = !DISubprogram(name: "atol", scope: !77, file: !77, line: 107, type: !116, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!116 = !DISubroutineType(types: !117)
!117 = !{!89, !107}
!118 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !119)
!119 = !DISubprogram(name: "bsearch", scope: !77, file: !77, line: 817, type: !120, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!120 = !DISubroutineType(types: !121)
!121 = !{!122, !68, !68, !123, !123, !126}
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!123 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !124, line: 62, baseType: !125)
!124 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!125 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !77, line: 805, baseType: !127)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DISubroutineType(types: !129)
!129 = !{!80, !68, !68}
!130 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !131)
!131 = !DISubprogram(name: "calloc", scope: !77, file: !77, line: 541, type: !132, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!132 = !DISubroutineType(types: !133)
!133 = !{!122, !123, !123}
!134 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !135)
!135 = !DISubprogram(name: "div", scope: !77, file: !77, line: 849, type: !136, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!136 = !DISubroutineType(types: !137)
!137 = !{!82, !80, !80}
!138 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !139)
!139 = !DISubprogram(name: "exit", scope: !77, file: !77, line: 614, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !80}
!142 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !143)
!143 = !DISubprogram(name: "free", scope: !77, file: !77, line: 563, type: !144, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !122}
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !147)
!147 = !DISubprogram(name: "getenv", scope: !77, file: !77, line: 631, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!150, !107}
!150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !152)
!152 = !DISubprogram(name: "labs", scope: !77, file: !77, line: 838, type: !153, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!153 = !DISubroutineType(types: !154)
!154 = !{!89, !89}
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !156)
!156 = !DISubprogram(name: "ldiv", scope: !77, file: !77, line: 851, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!85, !89, !89}
!159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !160)
!160 = !DISubprogram(name: "malloc", scope: !77, file: !77, line: 539, type: !161, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!161 = !DISubroutineType(types: !162)
!162 = !{!122, !123}
!163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !164)
!164 = !DISubprogram(name: "mblen", scope: !77, file: !77, line: 919, type: !165, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!165 = !DISubroutineType(types: !166)
!166 = !{!80, !107, !123}
!167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !168)
!168 = !DISubprogram(name: "mbstowcs", scope: !77, file: !77, line: 930, type: !169, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!169 = !DISubroutineType(types: !170)
!170 = !{!123, !171, !174, !123}
!171 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !172)
!172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !173, size: 64)
!173 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!174 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !107)
!175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !176)
!176 = !DISubprogram(name: "mbtowc", scope: !77, file: !77, line: 922, type: !177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!177 = !DISubroutineType(types: !178)
!178 = !{!80, !171, !174, !123}
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !180)
!180 = !DISubprogram(name: "qsort", scope: !77, file: !77, line: 827, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{null, !122, !123, !123, !126}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !184)
!184 = !DISubprogram(name: "quick_exit", scope: !77, file: !77, line: 620, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !186)
!186 = !DISubprogram(name: "rand", scope: !77, file: !77, line: 453, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!187 = !DISubroutineType(types: !188)
!188 = !{!80}
!189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !190)
!190 = !DISubprogram(name: "realloc", scope: !77, file: !77, line: 549, type: !191, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!191 = !DISubroutineType(types: !192)
!192 = !{!122, !122, !123}
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !194)
!194 = !DISubprogram(name: "srand", scope: !77, file: !77, line: 455, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{null, !10}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !198)
!198 = !DISubprogram(name: "strtod", scope: !77, file: !77, line: 117, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!106, !174, !201}
!201 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !202)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !204)
!204 = !DISubprogram(name: "strtol", scope: !77, file: !77, line: 176, type: !205, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!205 = !DISubroutineType(types: !206)
!206 = !{!89, !174, !201, !80}
!207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !208)
!208 = !DISubprogram(name: "strtoul", scope: !77, file: !77, line: 180, type: !209, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!209 = !DISubroutineType(types: !210)
!210 = !{!125, !174, !201, !80}
!211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !212)
!212 = !DISubprogram(name: "system", scope: !77, file: !77, line: 781, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !214)
!214 = !DISubprogram(name: "wcstombs", scope: !77, file: !77, line: 933, type: !215, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DISubroutineType(types: !216)
!216 = !{!123, !217, !218, !123}
!217 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !150)
!218 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !219)
!219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !220, size: 64)
!220 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !173)
!221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !222)
!222 = !DISubprogram(name: "wctomb", scope: !77, file: !77, line: 926, type: !223, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!223 = !DISubroutineType(types: !224)
!224 = !{!80, !150, !173}
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !227)
!226 = !DINamespace(name: "__gnu_cxx", scope: null)
!227 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !77, line: 80, baseType: !228)
!228 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 76, size: 128, elements: !229, identifier: "_ZTS7lldiv_t")
!229 = !{!230, !232}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !228, file: !77, line: 78, baseType: !231, size: 64)
!231 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !228, file: !77, line: 79, baseType: !231, size: 64, offset: 64)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !234)
!234 = !DISubprogram(name: "_Exit", scope: !77, file: !77, line: 626, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !236)
!236 = !DISubprogram(name: "llabs", scope: !77, file: !77, line: 841, type: !237, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!237 = !DISubroutineType(types: !238)
!238 = !{!231, !231}
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !240)
!240 = !DISubprogram(name: "lldiv", scope: !77, file: !77, line: 855, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!241 = !DISubroutineType(types: !242)
!242 = !{!227, !231, !231}
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !244)
!244 = !DISubprogram(name: "atoll", scope: !77, file: !77, line: 112, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!231, !107}
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !248)
!248 = !DISubprogram(name: "strtoll", scope: !77, file: !77, line: 200, type: !249, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!249 = !DISubroutineType(types: !250)
!250 = !{!231, !174, !201, !80}
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !252)
!252 = !DISubprogram(name: "strtoull", scope: !77, file: !77, line: 205, type: !253, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!253 = !DISubroutineType(types: !254)
!254 = !{!255, !174, !201, !80}
!255 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !257)
!257 = !DISubprogram(name: "strtof", scope: !77, file: !77, line: 123, type: !258, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!258 = !DISubroutineType(types: !259)
!259 = !{!260, !174, !201}
!260 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !262)
!262 = !DISubprogram(name: "strtold", scope: !77, file: !77, line: 126, type: !263, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!263 = !DISubroutineType(types: !264)
!264 = !{!265, !174, !201}
!265 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !227)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !234)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !236)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !270)
!270 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !226, file: !271, line: 213, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!271 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/cstdlib", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !240)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !244)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !257)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !252)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !262)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !279)
!279 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !281, file: !280, line: 79, size: 64, elements: !282, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!280 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/bits/exception_ptr.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!281 = !DINamespace(name: "__exception_ptr", scope: !74)
!282 = !{!283, !284, !288, !291, !292, !297, !298, !302, !308, !312, !316, !319, !320, !323, !327}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !279, file: !280, line: 81, baseType: !122, size: 64)
!284 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 83, type: !285, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!285 = !DISubroutineType(types: !286)
!286 = !{null, !287, !122}
!287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !279, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!288 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !279, file: !280, line: 85, type: !289, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!289 = !DISubroutineType(types: !290)
!290 = !{null, !287}
!291 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !279, file: !280, line: 86, type: !289, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!292 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !279, file: !280, line: 88, type: !293, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!293 = !DISubroutineType(types: !294)
!294 = !{!122, !295}
!295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !296, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!296 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !279)
!297 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 96, type: !289, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!298 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 98, type: !299, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!299 = !DISubroutineType(types: !300)
!300 = !{null, !287, !301}
!301 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !296, size: 64)
!302 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 101, type: !303, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!303 = !DISubroutineType(types: !304)
!304 = !{null, !287, !305}
!305 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !74, file: !306, line: 235, baseType: !307)
!306 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/x86_64-linux-gnu/c++/7.3.0/bits/c++config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!307 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!308 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 105, type: !309, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!309 = !DISubroutineType(types: !310)
!310 = !{null, !287, !311}
!311 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !279, size: 64)
!312 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !279, file: !280, line: 118, type: !313, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!313 = !DISubroutineType(types: !314)
!314 = !{!315, !287, !301}
!315 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !279, size: 64)
!316 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !279, file: !280, line: 122, type: !317, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!317 = !DISubroutineType(types: !318)
!318 = !{!315, !287, !311}
!319 = !DISubprogram(name: "~exception_ptr", scope: !279, file: !280, line: 129, type: !289, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!320 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !279, file: !280, line: 132, type: !321, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubroutineType(types: !322)
!322 = !{null, !287, !315}
!323 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !279, file: !280, line: 144, type: !324, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!324 = !DISubroutineType(types: !325)
!325 = !{!326, !295}
!326 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!327 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !279, file: !280, line: 153, type: !328, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!328 = !DISubroutineType(types: !329)
!329 = !{!330, !295}
!330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !331, size: 64)
!331 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !332)
!332 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !74, file: !333, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!333 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/typeinfo", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!334 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !281, entity: !335)
!335 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !74, file: !280, line: 69, type: !336, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!336 = !DISubroutineType(types: !337)
!337 = !{null, !279}
!338 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !339)
!339 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !340, line: 6, baseType: !341)
!340 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!341 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !342, line: 21, baseType: !343)
!342 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!343 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !342, line: 13, size: 64, elements: !344, identifier: "_ZTS11__mbstate_t")
!344 = !{!345, !346}
!345 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !343, file: !342, line: 15, baseType: !80, size: 32)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !343, file: !342, line: 20, baseType: !347, size: 32, offset: 32)
!347 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !343, file: !342, line: 16, size: 32, elements: !348, identifier: "_ZTSN11__mbstate_tUt_E")
!348 = !{!349, !350}
!349 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !347, file: !342, line: 18, baseType: !10, size: 32)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !347, file: !342, line: 19, baseType: !351, size: 32)
!351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !109, size: 32, elements: !352)
!352 = !{!353}
!353 = !DISubrange(count: 4)
!354 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !355)
!355 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !356, line: 20, baseType: !10)
!356 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!357 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !358)
!358 = !DISubprogram(name: "btowc", scope: !359, file: !359, line: 284, type: !360, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!359 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!360 = !DISubroutineType(types: !361)
!361 = !{!355, !80}
!362 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !363)
!363 = !DISubprogram(name: "fgetwc", scope: !359, file: !359, line: 727, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!364 = !DISubroutineType(types: !365)
!365 = !{!355, !366}
!366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !367, size: 64)
!367 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !368, line: 5, baseType: !369)
!368 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !368, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!370 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !371)
!371 = !DISubprogram(name: "fgetws", scope: !359, file: !359, line: 756, type: !372, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!372 = !DISubroutineType(types: !373)
!373 = !{!172, !171, !80, !374}
!374 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !366)
!375 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !376)
!376 = !DISubprogram(name: "fputwc", scope: !359, file: !359, line: 741, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!377 = !DISubroutineType(types: !378)
!378 = !{!355, !173, !366}
!379 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !380)
!380 = !DISubprogram(name: "fputws", scope: !359, file: !359, line: 763, type: !381, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!381 = !DISubroutineType(types: !382)
!382 = !{!80, !218, !374}
!383 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !384)
!384 = !DISubprogram(name: "fwide", scope: !359, file: !359, line: 573, type: !385, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!385 = !DISubroutineType(types: !386)
!386 = !{!80, !366, !80}
!387 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !388)
!388 = !DISubprogram(name: "fwprintf", scope: !359, file: !359, line: 580, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!389 = !DISubroutineType(types: !390)
!390 = !{!80, !374, !218, null}
!391 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !392)
!392 = !DISubprogram(name: "fwscanf", scope: !359, file: !359, line: 621, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!393 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !394)
!394 = !DISubprogram(name: "getwc", scope: !359, file: !359, line: 728, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!395 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !396)
!396 = !DISubprogram(name: "getwchar", scope: !359, file: !359, line: 734, type: !397, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!397 = !DISubroutineType(types: !398)
!398 = !{!355}
!399 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !400)
!400 = !DISubprogram(name: "mbrlen", scope: !359, file: !359, line: 307, type: !401, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!401 = !DISubroutineType(types: !402)
!402 = !{!123, !174, !123, !403}
!403 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !404)
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !339, size: 64)
!405 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !406)
!406 = !DISubprogram(name: "mbrtowc", scope: !359, file: !359, line: 296, type: !407, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!407 = !DISubroutineType(types: !408)
!408 = !{!123, !171, !174, !123, !403}
!409 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !410)
!410 = !DISubprogram(name: "mbsinit", scope: !359, file: !359, line: 292, type: !411, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!411 = !DISubroutineType(types: !412)
!412 = !{!80, !413}
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !414, size: 64)
!414 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !339)
!415 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !416)
!416 = !DISubprogram(name: "mbsrtowcs", scope: !359, file: !359, line: 337, type: !417, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!417 = !DISubroutineType(types: !418)
!418 = !{!123, !171, !419, !123, !403}
!419 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !420)
!420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!421 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !422)
!422 = !DISubprogram(name: "putwc", scope: !359, file: !359, line: 742, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!423 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !424)
!424 = !DISubprogram(name: "putwchar", scope: !359, file: !359, line: 748, type: !425, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!425 = !DISubroutineType(types: !426)
!426 = !{!355, !173}
!427 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !428)
!428 = !DISubprogram(name: "swprintf", scope: !359, file: !359, line: 590, type: !429, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!429 = !DISubroutineType(types: !430)
!430 = !{!80, !171, !123, !218, null}
!431 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !432)
!432 = !DISubprogram(name: "swscanf", scope: !359, file: !359, line: 631, type: !433, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!433 = !DISubroutineType(types: !434)
!434 = !{!80, !218, !218, null}
!435 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !436)
!436 = !DISubprogram(name: "ungetwc", scope: !359, file: !359, line: 771, type: !437, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!437 = !DISubroutineType(types: !438)
!438 = !{!355, !355, !366}
!439 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !440)
!440 = !DISubprogram(name: "vfwprintf", scope: !359, file: !359, line: 598, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!441 = !DISubroutineType(types: !442)
!442 = !{!80, !374, !218, !443}
!443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !444, size: 64)
!444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !445, identifier: "_ZTS13__va_list_tag")
!445 = !{!446, !447, !448, !449}
!446 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !444, file: !2, baseType: !10, size: 32)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !444, file: !2, baseType: !10, size: 32, offset: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 64)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 128)
!450 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !451)
!451 = !DISubprogram(name: "vfwscanf", scope: !359, file: !359, line: 673, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!452 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !453)
!453 = !DISubprogram(name: "vswprintf", scope: !359, file: !359, line: 611, type: !454, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!454 = !DISubroutineType(types: !455)
!455 = !{!80, !171, !123, !218, !443}
!456 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !457)
!457 = !DISubprogram(name: "vswscanf", scope: !359, file: !359, line: 685, type: !458, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!458 = !DISubroutineType(types: !459)
!459 = !{!80, !218, !218, !443}
!460 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !461)
!461 = !DISubprogram(name: "vwprintf", scope: !359, file: !359, line: 606, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!462 = !DISubroutineType(types: !463)
!463 = !{!80, !218, !443}
!464 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !465)
!465 = !DISubprogram(name: "vwscanf", scope: !359, file: !359, line: 681, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!466 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !467)
!467 = !DISubprogram(name: "wcrtomb", scope: !359, file: !359, line: 301, type: !468, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!468 = !DISubroutineType(types: !469)
!469 = !{!123, !217, !173, !403}
!470 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !471)
!471 = !DISubprogram(name: "wcscat", scope: !359, file: !359, line: 97, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!472 = !DISubroutineType(types: !473)
!473 = !{!172, !171, !218}
!474 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !475)
!475 = !DISubprogram(name: "wcscmp", scope: !359, file: !359, line: 106, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!476 = !DISubroutineType(types: !477)
!477 = !{!80, !219, !219}
!478 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !479)
!479 = !DISubprogram(name: "wcscoll", scope: !359, file: !359, line: 131, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!480 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !481)
!481 = !DISubprogram(name: "wcscpy", scope: !359, file: !359, line: 87, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!482 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !483)
!483 = !DISubprogram(name: "wcscspn", scope: !359, file: !359, line: 187, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!484 = !DISubroutineType(types: !485)
!485 = !{!123, !219, !219}
!486 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !487)
!487 = !DISubprogram(name: "wcsftime", scope: !359, file: !359, line: 835, type: !488, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!488 = !DISubroutineType(types: !489)
!489 = !{!123, !171, !123, !218, !490}
!490 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !491)
!491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !492, size: 64)
!492 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !493)
!493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !359, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!494 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !495)
!495 = !DISubprogram(name: "wcslen", scope: !359, file: !359, line: 222, type: !496, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!496 = !DISubroutineType(types: !497)
!497 = !{!123, !219}
!498 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !499)
!499 = !DISubprogram(name: "wcsncat", scope: !359, file: !359, line: 101, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!500 = !DISubroutineType(types: !501)
!501 = !{!172, !171, !218, !123}
!502 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !503)
!503 = !DISubprogram(name: "wcsncmp", scope: !359, file: !359, line: 109, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!504 = !DISubroutineType(types: !505)
!505 = !{!80, !219, !219, !123}
!506 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !507)
!507 = !DISubprogram(name: "wcsncpy", scope: !359, file: !359, line: 92, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!508 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !509)
!509 = !DISubprogram(name: "wcsrtombs", scope: !359, file: !359, line: 343, type: !510, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!510 = !DISubroutineType(types: !511)
!511 = !{!123, !217, !512, !123, !403}
!512 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !513)
!513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !219, size: 64)
!514 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !515)
!515 = !DISubprogram(name: "wcsspn", scope: !359, file: !359, line: 191, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!516 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !517)
!517 = !DISubprogram(name: "wcstod", scope: !359, file: !359, line: 377, type: !518, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!518 = !DISubroutineType(types: !519)
!519 = !{!106, !218, !520}
!520 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !521)
!521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64)
!522 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !523)
!523 = !DISubprogram(name: "wcstof", scope: !359, file: !359, line: 382, type: !524, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!524 = !DISubroutineType(types: !525)
!525 = !{!260, !218, !520}
!526 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !527)
!527 = !DISubprogram(name: "wcstok", scope: !359, file: !359, line: 217, type: !528, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!528 = !DISubroutineType(types: !529)
!529 = !{!172, !171, !218, !520}
!530 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !531)
!531 = !DISubprogram(name: "wcstol", scope: !359, file: !359, line: 428, type: !532, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!532 = !DISubroutineType(types: !533)
!533 = !{!89, !218, !520, !80}
!534 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !535)
!535 = !DISubprogram(name: "wcstoul", scope: !359, file: !359, line: 433, type: !536, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!536 = !DISubroutineType(types: !537)
!537 = !{!125, !218, !520, !80}
!538 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !539)
!539 = !DISubprogram(name: "wcsxfrm", scope: !359, file: !359, line: 135, type: !540, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!540 = !DISubroutineType(types: !541)
!541 = !{!123, !171, !218, !123}
!542 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !543)
!543 = !DISubprogram(name: "wctob", scope: !359, file: !359, line: 288, type: !544, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!544 = !DISubroutineType(types: !545)
!545 = !{!80, !355}
!546 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !547)
!547 = !DISubprogram(name: "wmemcmp", scope: !359, file: !359, line: 258, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!548 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !549)
!549 = !DISubprogram(name: "wmemcpy", scope: !359, file: !359, line: 262, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!550 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !551)
!551 = !DISubprogram(name: "wmemmove", scope: !359, file: !359, line: 267, type: !552, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!552 = !DISubroutineType(types: !553)
!553 = !{!172, !172, !219, !123}
!554 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !555)
!555 = !DISubprogram(name: "wmemset", scope: !359, file: !359, line: 271, type: !556, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!556 = !DISubroutineType(types: !557)
!557 = !{!172, !172, !173, !123}
!558 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !559)
!559 = !DISubprogram(name: "wprintf", scope: !359, file: !359, line: 587, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!560 = !DISubroutineType(types: !561)
!561 = !{!80, !218, null}
!562 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !563)
!563 = !DISubprogram(name: "wscanf", scope: !359, file: !359, line: 628, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!564 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !565)
!565 = !DISubprogram(name: "wcschr", scope: !359, file: !359, line: 164, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!566 = !DISubroutineType(types: !567)
!567 = !{!172, !219, !173}
!568 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !569)
!569 = !DISubprogram(name: "wcspbrk", scope: !359, file: !359, line: 201, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!570 = !DISubroutineType(types: !571)
!571 = !{!172, !219, !219}
!572 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !573)
!573 = !DISubprogram(name: "wcsrchr", scope: !359, file: !359, line: 174, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!574 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !575)
!575 = !DISubprogram(name: "wcsstr", scope: !359, file: !359, line: 212, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!576 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !577)
!577 = !DISubprogram(name: "wmemchr", scope: !359, file: !359, line: 253, type: !578, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!578 = !DISubroutineType(types: !579)
!579 = !{!172, !219, !173, !123}
!580 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !581)
!581 = !DISubprogram(name: "wcstold", scope: !359, file: !359, line: 384, type: !582, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!582 = !DISubroutineType(types: !583)
!583 = !{!265, !218, !520}
!584 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !585)
!585 = !DISubprogram(name: "wcstoll", scope: !359, file: !359, line: 441, type: !586, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!586 = !DISubroutineType(types: !587)
!587 = !{!231, !218, !520, !80}
!588 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !589)
!589 = !DISubprogram(name: "wcstoull", scope: !359, file: !359, line: 448, type: !590, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!590 = !DISubroutineType(types: !591)
!591 = !{!255, !218, !520, !80}
!592 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !581)
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !585)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !589)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !596)
!596 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !597)
!597 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !599)
!599 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !600)
!600 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !602)
!602 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !80)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !604)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !89)
!605 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !606)
!606 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !596)
!607 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !608)
!608 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !599)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !610)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !602)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !612)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !604)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !614)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !596)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !616)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !599)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !618)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !602)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !620)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !604)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !622)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !89)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !624)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !604)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !62)
!626 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !28)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !8)
!628 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !629)
!629 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !125)
!630 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !631)
!631 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!632 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !633)
!633 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !635)
!635 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !637)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !629)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !639)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !641)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !643)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !645)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !629)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !647)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !125)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !649)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !629)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !651)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !74, file: !306, line: 231, baseType: !125)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !653)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !74, file: !306, line: 232, baseType: !89)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !655)
!655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !656, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!656 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!657 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !658)
!658 = !DISubprogram(name: "setlocale", scope: !656, file: !656, line: 122, type: !659, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!659 = !DISubroutineType(types: !660)
!660 = !{!150, !80, !107}
!661 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !662)
!662 = !DISubprogram(name: "localeconv", scope: !656, file: !656, line: 125, type: !663, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!663 = !DISubroutineType(types: !664)
!664 = !{!665}
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !655, size: 64)
!666 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !667)
!667 = !DISubprogram(name: "isalnum", scope: !668, file: !668, line: 108, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!668 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !670)
!670 = !DISubprogram(name: "isalpha", scope: !668, file: !668, line: 109, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !672)
!672 = !DISubprogram(name: "iscntrl", scope: !668, file: !668, line: 110, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!673 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !674)
!674 = !DISubprogram(name: "isdigit", scope: !668, file: !668, line: 111, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!675 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !676)
!676 = !DISubprogram(name: "isgraph", scope: !668, file: !668, line: 113, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !678)
!678 = !DISubprogram(name: "islower", scope: !668, file: !668, line: 112, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !680)
!680 = !DISubprogram(name: "isprint", scope: !668, file: !668, line: 114, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !682)
!682 = !DISubprogram(name: "ispunct", scope: !668, file: !668, line: 115, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !684)
!684 = !DISubprogram(name: "isspace", scope: !668, file: !668, line: 116, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !686)
!686 = !DISubprogram(name: "isupper", scope: !668, file: !668, line: 117, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !688)
!688 = !DISubprogram(name: "isxdigit", scope: !668, file: !668, line: 118, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !690)
!690 = !DISubprogram(name: "tolower", scope: !668, file: !668, line: 122, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !692)
!692 = !DISubprogram(name: "toupper", scope: !668, file: !668, line: 125, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !694)
!694 = !DISubprogram(name: "isblank", scope: !668, file: !668, line: 130, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !696)
!696 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !697, line: 7, baseType: !369)
!697 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!698 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !699)
!699 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !700, line: 78, baseType: !701)
!700 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!701 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !702, line: 30, baseType: !703)
!702 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!703 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !702, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!704 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !705)
!705 = !DISubprogram(name: "clearerr", scope: !700, file: !700, line: 757, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!706 = !DISubroutineType(types: !707)
!707 = !{null, !708}
!708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !696, size: 64)
!709 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !710)
!710 = !DISubprogram(name: "fclose", scope: !700, file: !700, line: 199, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!711 = !DISubroutineType(types: !712)
!712 = !{!80, !708}
!713 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !714)
!714 = !DISubprogram(name: "feof", scope: !700, file: !700, line: 759, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!715 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !716)
!716 = !DISubprogram(name: "ferror", scope: !700, file: !700, line: 761, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !718)
!718 = !DISubprogram(name: "fflush", scope: !700, file: !700, line: 204, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !720)
!720 = !DISubprogram(name: "fgetc", scope: !700, file: !700, line: 477, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !722)
!722 = !DISubprogram(name: "fgetpos", scope: !700, file: !700, line: 731, type: !723, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DISubroutineType(types: !724)
!724 = !{!80, !725, !726}
!725 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !708)
!726 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !727)
!727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !699, size: 64)
!728 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !729)
!729 = !DISubprogram(name: "fgets", scope: !700, file: !700, line: 564, type: !730, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!730 = !DISubroutineType(types: !731)
!731 = !{!150, !217, !80, !725}
!732 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !733)
!733 = !DISubprogram(name: "fopen", scope: !700, file: !700, line: 232, type: !734, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!734 = !DISubroutineType(types: !735)
!735 = !{!708, !174, !174}
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !737)
!737 = !DISubprogram(name: "fprintf", scope: !700, file: !700, line: 312, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!80, !725, !174, null}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !741)
!741 = !DISubprogram(name: "fputc", scope: !700, file: !700, line: 517, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!80, !80, !708}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !745)
!745 = !DISubprogram(name: "fputs", scope: !700, file: !700, line: 626, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!80, !174, !725}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !749)
!749 = !DISubprogram(name: "fread", scope: !700, file: !700, line: 646, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!123, !752, !123, !123, !725}
!752 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !122)
!753 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !754)
!754 = !DISubprogram(name: "freopen", scope: !700, file: !700, line: 238, type: !755, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!755 = !DISubroutineType(types: !756)
!756 = !{!708, !174, !174, !725}
!757 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !758)
!758 = !DISubprogram(name: "fscanf", scope: !700, file: !700, line: 377, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!759 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !760)
!760 = !DISubprogram(name: "fseek", scope: !700, file: !700, line: 684, type: !761, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!761 = !DISubroutineType(types: !762)
!762 = !{!80, !708, !89, !80}
!763 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !764)
!764 = !DISubprogram(name: "fsetpos", scope: !700, file: !700, line: 736, type: !765, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!765 = !DISubroutineType(types: !766)
!766 = !{!80, !708, !767}
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !768, size: 64)
!768 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !699)
!769 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !770)
!770 = !DISubprogram(name: "ftell", scope: !700, file: !700, line: 689, type: !771, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!771 = !DISubroutineType(types: !772)
!772 = !{!89, !708}
!773 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !774)
!774 = !DISubprogram(name: "fwrite", scope: !700, file: !700, line: 652, type: !775, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!775 = !DISubroutineType(types: !776)
!776 = !{!123, !777, !123, !123, !725}
!777 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!778 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !779)
!779 = !DISubprogram(name: "getc", scope: !700, file: !700, line: 478, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!780 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !781)
!781 = !DISubprogram(name: "getchar", scope: !700, file: !700, line: 484, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!782 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !783)
!783 = !DISubprogram(name: "gets", scope: !700, file: !700, line: 577, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!784 = !DISubroutineType(types: !785)
!785 = !{!150, !150}
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !787)
!787 = !DISubprogram(name: "perror", scope: !700, file: !700, line: 775, type: !788, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DISubroutineType(types: !789)
!789 = !{null, !107}
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !791)
!791 = !DISubprogram(name: "printf", scope: !700, file: !700, line: 318, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!80, !174, null}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !795)
!795 = !DISubprogram(name: "putc", scope: !700, file: !700, line: 518, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !797)
!797 = !DISubprogram(name: "putchar", scope: !700, file: !700, line: 524, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !799)
!799 = !DISubprogram(name: "puts", scope: !700, file: !700, line: 632, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !801)
!801 = !DISubprogram(name: "remove", scope: !700, file: !700, line: 144, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !803)
!803 = !DISubprogram(name: "rename", scope: !700, file: !700, line: 146, type: !804, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DISubroutineType(types: !805)
!805 = !{!80, !107, !107}
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !807)
!807 = !DISubprogram(name: "rewind", scope: !700, file: !700, line: 694, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !809)
!809 = !DISubprogram(name: "scanf", scope: !700, file: !700, line: 383, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !811)
!811 = !DISubprogram(name: "setbuf", scope: !700, file: !700, line: 290, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{null, !725, !217}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !815)
!815 = !DISubprogram(name: "setvbuf", scope: !700, file: !700, line: 294, type: !816, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DISubroutineType(types: !817)
!817 = !{!80, !725, !217, !80, !123}
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !819)
!819 = !DISubprogram(name: "sprintf", scope: !700, file: !700, line: 320, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{!80, !217, !174, null}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !823)
!823 = !DISubprogram(name: "sscanf", scope: !700, file: !700, line: 385, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!80, !174, !174, null}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !827)
!827 = !DISubprogram(name: "tmpfile", scope: !700, file: !700, line: 159, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!708}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !831)
!831 = !DISubprogram(name: "tmpnam", scope: !700, file: !700, line: 173, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !833)
!833 = !DISubprogram(name: "ungetc", scope: !700, file: !700, line: 639, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !835)
!835 = !DISubprogram(name: "vfprintf", scope: !700, file: !700, line: 327, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!80, !725, !174, !443}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !839)
!839 = !DISubprogram(name: "vprintf", scope: !700, file: !700, line: 333, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DISubroutineType(types: !841)
!841 = !{!80, !174, !443}
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !843)
!843 = !DISubprogram(name: "vsprintf", scope: !700, file: !700, line: 335, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!80, !217, !174, !443}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !847)
!847 = !DISubprogram(name: "snprintf", scope: !700, file: !700, line: 340, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!80, !217, !123, !174, null}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !851)
!851 = !DISubprogram(name: "vfscanf", scope: !700, file: !700, line: 420, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !853)
!853 = !DISubprogram(name: "vscanf", scope: !700, file: !700, line: 428, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !855)
!855 = !DISubprogram(name: "vsnprintf", scope: !700, file: !700, line: 344, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!80, !217, !123, !174, !443}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !859)
!859 = !DISubprogram(name: "vsscanf", scope: !700, file: !700, line: 432, type: !860, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DISubroutineType(types: !861)
!861 = !{!80, !174, !174, !443}
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !847)
!863 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !851)
!864 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !853)
!865 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !855)
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !859)
!867 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !868)
!868 = !DISubprogram(name: "acos", scope: !869, file: !869, line: 53, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!869 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!870 = !DISubroutineType(types: !871)
!871 = !{!106, !106}
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !873)
!873 = !DISubprogram(name: "asin", scope: !869, file: !869, line: 55, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !875)
!875 = !DISubprogram(name: "atan", scope: !869, file: !869, line: 57, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!876 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !877)
!877 = !DISubprogram(name: "atan2", scope: !869, file: !869, line: 59, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!878 = !DISubroutineType(types: !879)
!879 = !{!106, !106, !106}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !881)
!881 = !DISubprogram(name: "ceil", scope: !869, file: !869, line: 159, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !883)
!883 = !DISubprogram(name: "cos", scope: !869, file: !869, line: 62, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !885)
!885 = !DISubprogram(name: "cosh", scope: !869, file: !869, line: 71, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !887)
!887 = !DISubprogram(name: "exp", scope: !869, file: !869, line: 95, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !889)
!889 = !DISubprogram(name: "fabs", scope: !869, file: !869, line: 162, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !891)
!891 = !DISubprogram(name: "floor", scope: !869, file: !869, line: 165, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !893)
!893 = !DISubprogram(name: "fmod", scope: !869, file: !869, line: 168, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !895)
!895 = !DISubprogram(name: "frexp", scope: !869, file: !869, line: 98, type: !896, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DISubroutineType(types: !897)
!897 = !{!106, !106, !898}
!898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !80, size: 64)
!899 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !900)
!900 = !DISubprogram(name: "ldexp", scope: !869, file: !869, line: 101, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!901 = !DISubroutineType(types: !902)
!902 = !{!106, !106, !80}
!903 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !904)
!904 = !DISubprogram(name: "log", scope: !869, file: !869, line: 104, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!905 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !906)
!906 = !DISubprogram(name: "log10", scope: !869, file: !869, line: 107, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !908)
!908 = !DISubprogram(name: "modf", scope: !869, file: !869, line: 110, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!106, !106, !911}
!911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!912 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !913)
!913 = !DISubprogram(name: "pow", scope: !869, file: !869, line: 140, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!914 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !915)
!915 = !DISubprogram(name: "sin", scope: !869, file: !869, line: 64, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!916 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !917)
!917 = !DISubprogram(name: "sinh", scope: !869, file: !869, line: 73, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!918 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !919)
!919 = !DISubprogram(name: "sqrt", scope: !869, file: !869, line: 143, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !921)
!921 = !DISubprogram(name: "tan", scope: !869, file: !869, line: 66, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !923)
!923 = !DISubprogram(name: "tanh", scope: !869, file: !869, line: 75, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !925)
!925 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !926, line: 150, baseType: !106)
!926 = !DIFile(filename: "/usr/include/math.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!927 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !928)
!928 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !926, line: 149, baseType: !260)
!929 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !930)
!930 = !DISubprogram(name: "acosh", scope: !869, file: !869, line: 85, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!931 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !932)
!932 = !DISubprogram(name: "acoshf", scope: !869, file: !869, line: 85, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!933 = !DISubroutineType(types: !934)
!934 = !{!260, !260}
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !936)
!936 = !DISubprogram(name: "acoshl", scope: !869, file: !869, line: 85, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!937 = !DISubroutineType(types: !938)
!938 = !{!265, !265}
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !940)
!940 = !DISubprogram(name: "asinh", scope: !869, file: !869, line: 87, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !942)
!942 = !DISubprogram(name: "asinhf", scope: !869, file: !869, line: 87, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !944)
!944 = !DISubprogram(name: "asinhl", scope: !869, file: !869, line: 87, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !946)
!946 = !DISubprogram(name: "atanh", scope: !869, file: !869, line: 89, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !948)
!948 = !DISubprogram(name: "atanhf", scope: !869, file: !869, line: 89, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !950)
!950 = !DISubprogram(name: "atanhl", scope: !869, file: !869, line: 89, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !952)
!952 = !DISubprogram(name: "cbrt", scope: !869, file: !869, line: 152, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !954)
!954 = !DISubprogram(name: "cbrtf", scope: !869, file: !869, line: 152, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !956)
!956 = !DISubprogram(name: "cbrtl", scope: !869, file: !869, line: 152, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !958)
!958 = !DISubprogram(name: "copysign", scope: !869, file: !869, line: 196, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !960)
!960 = !DISubprogram(name: "copysignf", scope: !869, file: !869, line: 196, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DISubroutineType(types: !962)
!962 = !{!260, !260, !260}
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !964)
!964 = !DISubprogram(name: "copysignl", scope: !869, file: !869, line: 196, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DISubroutineType(types: !966)
!966 = !{!265, !265, !265}
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !968)
!968 = !DISubprogram(name: "erf", scope: !869, file: !869, line: 228, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !970)
!970 = !DISubprogram(name: "erff", scope: !869, file: !869, line: 228, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !972)
!972 = !DISubprogram(name: "erfl", scope: !869, file: !869, line: 228, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !974)
!974 = !DISubprogram(name: "erfc", scope: !869, file: !869, line: 229, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !976)
!976 = !DISubprogram(name: "erfcf", scope: !869, file: !869, line: 229, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !978)
!978 = !DISubprogram(name: "erfcl", scope: !869, file: !869, line: 229, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !980)
!980 = !DISubprogram(name: "exp2", scope: !869, file: !869, line: 130, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !982)
!982 = !DISubprogram(name: "exp2f", scope: !869, file: !869, line: 130, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !984)
!984 = !DISubprogram(name: "exp2l", scope: !869, file: !869, line: 130, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !986)
!986 = !DISubprogram(name: "expm1", scope: !869, file: !869, line: 119, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !988)
!988 = !DISubprogram(name: "expm1f", scope: !869, file: !869, line: 119, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !990)
!990 = !DISubprogram(name: "expm1l", scope: !869, file: !869, line: 119, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !992)
!992 = !DISubprogram(name: "fdim", scope: !869, file: !869, line: 326, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !994)
!994 = !DISubprogram(name: "fdimf", scope: !869, file: !869, line: 326, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !996)
!996 = !DISubprogram(name: "fdiml", scope: !869, file: !869, line: 326, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !998)
!998 = !DISubprogram(name: "fma", scope: !869, file: !869, line: 335, type: !999, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DISubroutineType(types: !1000)
!1000 = !{!106, !106, !106, !106}
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1002)
!1002 = !DISubprogram(name: "fmaf", scope: !869, file: !869, line: 335, type: !1003, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DISubroutineType(types: !1004)
!1004 = !{!260, !260, !260, !260}
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1006)
!1006 = !DISubprogram(name: "fmal", scope: !869, file: !869, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!265, !265, !265, !265}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1010)
!1010 = !DISubprogram(name: "fmax", scope: !869, file: !869, line: 329, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1012)
!1012 = !DISubprogram(name: "fmaxf", scope: !869, file: !869, line: 329, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1014)
!1014 = !DISubprogram(name: "fmaxl", scope: !869, file: !869, line: 329, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1016)
!1016 = !DISubprogram(name: "fmin", scope: !869, file: !869, line: 332, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1018)
!1018 = !DISubprogram(name: "fminf", scope: !869, file: !869, line: 332, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1020)
!1020 = !DISubprogram(name: "fminl", scope: !869, file: !869, line: 332, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1022)
!1022 = !DISubprogram(name: "hypot", scope: !869, file: !869, line: 147, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1024)
!1024 = !DISubprogram(name: "hypotf", scope: !869, file: !869, line: 147, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1026)
!1026 = !DISubprogram(name: "hypotl", scope: !869, file: !869, line: 147, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1028)
!1028 = !DISubprogram(name: "ilogb", scope: !869, file: !869, line: 280, type: !1029, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DISubroutineType(types: !1030)
!1030 = !{!80, !106}
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1032)
!1032 = !DISubprogram(name: "ilogbf", scope: !869, file: !869, line: 280, type: !1033, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DISubroutineType(types: !1034)
!1034 = !{!80, !260}
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1036)
!1036 = !DISubprogram(name: "ilogbl", scope: !869, file: !869, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!80, !265}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1040)
!1040 = !DISubprogram(name: "lgamma", scope: !869, file: !869, line: 230, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1042)
!1042 = !DISubprogram(name: "lgammaf", scope: !869, file: !869, line: 230, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1044)
!1044 = !DISubprogram(name: "lgammal", scope: !869, file: !869, line: 230, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1046)
!1046 = !DISubprogram(name: "llrint", scope: !869, file: !869, line: 316, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1047 = !DISubroutineType(types: !1048)
!1048 = !{!231, !106}
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1050)
!1050 = !DISubprogram(name: "llrintf", scope: !869, file: !869, line: 316, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!231, !260}
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1054)
!1054 = !DISubprogram(name: "llrintl", scope: !869, file: !869, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!231, !265}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1058)
!1058 = !DISubprogram(name: "llround", scope: !869, file: !869, line: 322, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1060)
!1060 = !DISubprogram(name: "llroundf", scope: !869, file: !869, line: 322, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1062)
!1062 = !DISubprogram(name: "llroundl", scope: !869, file: !869, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1064)
!1064 = !DISubprogram(name: "log1p", scope: !869, file: !869, line: 122, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1066)
!1066 = !DISubprogram(name: "log1pf", scope: !869, file: !869, line: 122, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1068)
!1068 = !DISubprogram(name: "log1pl", scope: !869, file: !869, line: 122, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1070)
!1070 = !DISubprogram(name: "log2", scope: !869, file: !869, line: 133, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1072)
!1072 = !DISubprogram(name: "log2f", scope: !869, file: !869, line: 133, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1074)
!1074 = !DISubprogram(name: "log2l", scope: !869, file: !869, line: 133, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1076)
!1076 = !DISubprogram(name: "logb", scope: !869, file: !869, line: 125, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1078)
!1078 = !DISubprogram(name: "logbf", scope: !869, file: !869, line: 125, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1080)
!1080 = !DISubprogram(name: "logbl", scope: !869, file: !869, line: 125, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1082)
!1082 = !DISubprogram(name: "lrint", scope: !869, file: !869, line: 314, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DISubroutineType(types: !1084)
!1084 = !{!89, !106}
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1086)
!1086 = !DISubprogram(name: "lrintf", scope: !869, file: !869, line: 314, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DISubroutineType(types: !1088)
!1088 = !{!89, !260}
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1090)
!1090 = !DISubprogram(name: "lrintl", scope: !869, file: !869, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!89, !265}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1094)
!1094 = !DISubprogram(name: "lround", scope: !869, file: !869, line: 320, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1096)
!1096 = !DISubprogram(name: "lroundf", scope: !869, file: !869, line: 320, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1098)
!1098 = !DISubprogram(name: "lroundl", scope: !869, file: !869, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1100)
!1100 = !DISubprogram(name: "nan", scope: !869, file: !869, line: 201, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1102)
!1102 = !DISubprogram(name: "nanf", scope: !869, file: !869, line: 201, type: !1103, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DISubroutineType(types: !1104)
!1104 = !{!260, !107}
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1106)
!1106 = !DISubprogram(name: "nanl", scope: !869, file: !869, line: 201, type: !1107, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!265, !107}
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1110)
!1110 = !DISubprogram(name: "nearbyint", scope: !869, file: !869, line: 294, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1112)
!1112 = !DISubprogram(name: "nearbyintf", scope: !869, file: !869, line: 294, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1114)
!1114 = !DISubprogram(name: "nearbyintl", scope: !869, file: !869, line: 294, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1116)
!1116 = !DISubprogram(name: "nextafter", scope: !869, file: !869, line: 259, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1118)
!1118 = !DISubprogram(name: "nextafterf", scope: !869, file: !869, line: 259, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1120)
!1120 = !DISubprogram(name: "nextafterl", scope: !869, file: !869, line: 259, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1122)
!1122 = !DISubprogram(name: "nexttoward", scope: !869, file: !869, line: 261, type: !1123, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{!106, !106, !265}
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1126)
!1126 = !DISubprogram(name: "nexttowardf", scope: !869, file: !869, line: 261, type: !1127, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DISubroutineType(types: !1128)
!1128 = !{!260, !260, !265}
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1130)
!1130 = !DISubprogram(name: "nexttowardl", scope: !869, file: !869, line: 261, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1132)
!1132 = !DISubprogram(name: "remainder", scope: !869, file: !869, line: 272, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1134)
!1134 = !DISubprogram(name: "remainderf", scope: !869, file: !869, line: 272, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1136)
!1136 = !DISubprogram(name: "remainderl", scope: !869, file: !869, line: 272, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1138)
!1138 = !DISubprogram(name: "remquo", scope: !869, file: !869, line: 307, type: !1139, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DISubroutineType(types: !1140)
!1140 = !{!106, !106, !106, !898}
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1142)
!1142 = !DISubprogram(name: "remquof", scope: !869, file: !869, line: 307, type: !1143, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DISubroutineType(types: !1144)
!1144 = !{!260, !260, !260, !898}
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1146)
!1146 = !DISubprogram(name: "remquol", scope: !869, file: !869, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!265, !265, !265, !898}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1150)
!1150 = !DISubprogram(name: "rint", scope: !869, file: !869, line: 256, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1152)
!1152 = !DISubprogram(name: "rintf", scope: !869, file: !869, line: 256, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1154)
!1154 = !DISubprogram(name: "rintl", scope: !869, file: !869, line: 256, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1156)
!1156 = !DISubprogram(name: "round", scope: !869, file: !869, line: 298, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1158)
!1158 = !DISubprogram(name: "roundf", scope: !869, file: !869, line: 298, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1160)
!1160 = !DISubprogram(name: "roundl", scope: !869, file: !869, line: 298, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1162)
!1162 = !DISubprogram(name: "scalbln", scope: !869, file: !869, line: 290, type: !1163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DISubroutineType(types: !1164)
!1164 = !{!106, !106, !89}
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1166)
!1166 = !DISubprogram(name: "scalblnf", scope: !869, file: !869, line: 290, type: !1167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DISubroutineType(types: !1168)
!1168 = !{!260, !260, !89}
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1170)
!1170 = !DISubprogram(name: "scalblnl", scope: !869, file: !869, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!265, !265, !89}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1174)
!1174 = !DISubprogram(name: "scalbn", scope: !869, file: !869, line: 276, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1176)
!1176 = !DISubprogram(name: "scalbnf", scope: !869, file: !869, line: 276, type: !1177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1177 = !DISubroutineType(types: !1178)
!1178 = !{!260, !260, !80}
!1179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1180)
!1180 = !DISubprogram(name: "scalbnl", scope: !869, file: !869, line: 276, type: !1181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1181 = !DISubroutineType(types: !1182)
!1182 = !{!265, !265, !80}
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1184)
!1184 = !DISubprogram(name: "tgamma", scope: !869, file: !869, line: 235, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1186)
!1186 = !DISubprogram(name: "tgammaf", scope: !869, file: !869, line: 235, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1188)
!1188 = !DISubprogram(name: "tgammal", scope: !869, file: !869, line: 235, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1190)
!1190 = !DISubprogram(name: "trunc", scope: !869, file: !869, line: 302, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1192)
!1192 = !DISubprogram(name: "truncf", scope: !869, file: !869, line: 302, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1194)
!1194 = !DISubprogram(name: "truncl", scope: !869, file: !869, line: 302, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1196)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1197, line: 94, baseType: !1198)
!1197 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1197, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1200)
!1200 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1197, line: 68, baseType: !29)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1202)
!1202 = !DISubprogram(name: "feclearexcept", scope: !1203, file: !1203, line: 71, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1204 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1205)
!1205 = !DISubprogram(name: "fegetexceptflag", scope: !1203, file: !1203, line: 75, type: !1206, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1206 = !DISubroutineType(types: !1207)
!1207 = !{!80, !1208, !80}
!1208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1200, size: 64)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1210)
!1210 = !DISubprogram(name: "feraiseexcept", scope: !1203, file: !1203, line: 78, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1212)
!1212 = !DISubprogram(name: "fesetexceptflag", scope: !1203, file: !1203, line: 88, type: !1213, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1213 = !DISubroutineType(types: !1214)
!1214 = !{!80, !1215, !80}
!1215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1216, size: 64)
!1216 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1200)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1218)
!1218 = !DISubprogram(name: "fetestexcept", scope: !1203, file: !1203, line: 92, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1220)
!1220 = !DISubprogram(name: "fegetround", scope: !1203, file: !1203, line: 104, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1222)
!1222 = !DISubprogram(name: "fesetround", scope: !1203, file: !1203, line: 107, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1224)
!1224 = !DISubprogram(name: "fegetenv", scope: !1203, file: !1203, line: 114, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1225 = !DISubroutineType(types: !1226)
!1226 = !{!80, !1227}
!1227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1228 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1229)
!1229 = !DISubprogram(name: "feholdexcept", scope: !1203, file: !1203, line: 119, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1231)
!1231 = !DISubprogram(name: "fesetenv", scope: !1203, file: !1203, line: 123, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1232 = !DISubroutineType(types: !1233)
!1233 = !{!80, !1234}
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1196)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1237)
!1237 = !DISubprogram(name: "feupdateenv", scope: !1203, file: !1203, line: 128, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !{i32 2, !"Dwarf Version", i32 4}
!1239 = !{i32 2, !"Debug Info Version", i32 3}
!1240 = !{!1241, !1241, i64 0}
!1241 = !{!"long", !1242, i64 0}
!1242 = !{!"omnipotent char", !1243, i64 0}
!1243 = !{!"Simple C++ TBAA"}
!1244 = !{!1245, !1245, i64 0}
!1245 = !{!"double", !1242, i64 0}
!1246 = !{!1247, !1242, i64 2065}
!1247 = !{!"_ZTS5State", !1242, i64 16, !1248, i64 2064, !1242, i64 2080, !1249, i64 2088, !1251, i64 2112, !1253, i64 2208, !1254, i64 2480, !1255, i64 2608, !1256, i64 2736, !1242, i64 2760, !1242, i64 2768, !1257, i64 3280}
!1248 = !{!"_ZTS10ArithFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15}
!1249 = !{!"_ZTS8Segments", !1250, i64 0, !1242, i64 2, !1250, i64 4, !1242, i64 6, !1250, i64 8, !1242, i64 10, !1250, i64 12, !1242, i64 14, !1250, i64 16, !1242, i64 18, !1250, i64 20, !1242, i64 22}
!1250 = !{!"short", !1242, i64 0}
!1251 = !{!"_ZTS12AddressSpace", !1241, i64 0, !1252, i64 8, !1241, i64 16, !1252, i64 24, !1241, i64 32, !1252, i64 40, !1241, i64 48, !1252, i64 56, !1241, i64 64, !1252, i64 72, !1241, i64 80, !1252, i64 88}
!1252 = !{!"_ZTS3Reg", !1242, i64 0}
!1253 = !{!"_ZTS3GPR", !1241, i64 0, !1252, i64 8, !1241, i64 16, !1252, i64 24, !1241, i64 32, !1252, i64 40, !1241, i64 48, !1252, i64 56, !1241, i64 64, !1252, i64 72, !1241, i64 80, !1252, i64 88, !1241, i64 96, !1252, i64 104, !1241, i64 112, !1252, i64 120, !1241, i64 128, !1252, i64 136, !1241, i64 144, !1252, i64 152, !1241, i64 160, !1252, i64 168, !1241, i64 176, !1252, i64 184, !1241, i64 192, !1252, i64 200, !1241, i64 208, !1252, i64 216, !1241, i64 224, !1252, i64 232, !1241, i64 240, !1252, i64 248, !1241, i64 256, !1252, i64 264}
!1254 = !{!"_ZTS8X87Stack", !1242, i64 0}
!1255 = !{!"_ZTS3MMX", !1242, i64 0}
!1256 = !{!"_ZTS14FPUStatusFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15, !1242, i64 16, !1242, i64 17, !1242, i64 18, !1242, i64 19, !1242, i64 20}
!1257 = !{!"_ZTS13SegmentCaches", !1258, i64 0, !1258, i64 16, !1258, i64 32, !1258, i64 48, !1258, i64 64, !1258, i64 80}
!1258 = !{!"_ZTS13SegmentShadow", !1242, i64 0, !1259, i64 8, !1259, i64 12}
!1259 = !{!"int", !1242, i64 0}
!1260 = !{!1247, !1242, i64 2067}
!1261 = !{!1247, !1242, i64 2069}
!1262 = !{!1247, !1242, i64 2071}
!1263 = !{!1247, !1242, i64 2073}
!1264 = !{!1247, !1242, i64 2077}
!1265 = !{!1266}
!1266 = distinct !{!1266, !1267, !"ext_609678_printf: argument 0"}
!1267 = distinct !{!1267, !"ext_609678_printf"}
!1268 = !{!1269}
!1269 = distinct !{!1269, !1267, !"ext_609678_printf: argument 1"}
!1270 = !{!1271}
!1271 = distinct !{!1271, !1272, !"ext_609678_printf: argument 0"}
!1272 = distinct !{!1272, !"ext_609678_printf"}
!1273 = !{!1274}
!1274 = distinct !{!1274, !1272, !"ext_609678_printf: argument 1"}
!1275 = !{!1276}
!1276 = distinct !{!1276, !1277, !"ext_609678_printf: argument 0"}
!1277 = distinct !{!1277, !"ext_609678_printf"}
!1278 = !{!1279}
!1279 = distinct !{!1279, !1277, !"ext_609678_printf: argument 1"}
!1280 = !{!1281}
!1281 = distinct !{!1281, !1282, !"ext_609678_printf: argument 0"}
!1282 = distinct !{!1282, !"ext_609678_printf"}
!1283 = !{!1284}
!1284 = distinct !{!1284, !1282, !"ext_609678_printf: argument 1"}
!1285 = !{!1286}
!1286 = distinct !{!1286, !1287, !"ext_609678_printf: argument 0"}
!1287 = distinct !{!1287, !"ext_609678_printf"}
!1288 = !{!1289}
!1289 = distinct !{!1289, !1287, !"ext_609678_printf: argument 1"}
!1290 = !{!1291}
!1291 = distinct !{!1291, !1292, !"ext_609678_printf: argument 0"}
!1292 = distinct !{!1292, !"ext_609678_printf"}
!1293 = !{!1294}
!1294 = distinct !{!1294, !1292, !"ext_609678_printf: argument 1"}
!1295 = !{!1296}
!1296 = distinct !{!1296, !1297, !"ext_609678_printf: argument 0"}
!1297 = distinct !{!1297, !"ext_609678_printf"}
!1298 = !{!1299}
!1299 = distinct !{!1299, !1297, !"ext_609678_printf: argument 1"}
!1300 = !{!1301}
!1301 = distinct !{!1301, !1302, !"ext_609678_printf: argument 0"}
!1302 = distinct !{!1302, !"ext_609678_printf"}
!1303 = !{!1304}
!1304 = distinct !{!1304, !1302, !"ext_609678_printf: argument 1"}
!1305 = !{!1306}
!1306 = distinct !{!1306, !1307, !"ext_609678_printf: argument 0"}
!1307 = distinct !{!1307, !"ext_609678_printf"}
!1308 = !{!1309}
!1309 = distinct !{!1309, !1307, !"ext_609678_printf: argument 1"}
!1310 = !{!1311}
!1311 = distinct !{!1311, !1312, !"ext_609678_printf: argument 0"}
!1312 = distinct !{!1312, !"ext_609678_printf"}
!1313 = !{!1314}
!1314 = distinct !{!1314, !1312, !"ext_609678_printf: argument 1"}
!1315 = !{!1316}
!1316 = distinct !{!1316, !1317, !"ext_609678_printf: argument 0"}
!1317 = distinct !{!1317, !"ext_609678_printf"}
!1318 = !{!1319}
!1319 = distinct !{!1319, !1317, !"ext_609678_printf: argument 1"}
!1320 = !{!1321}
!1321 = distinct !{!1321, !1322, !"ext_609678_printf: argument 0"}
!1322 = distinct !{!1322, !"ext_609678_printf"}
!1323 = !{!1324}
!1324 = distinct !{!1324, !1322, !"ext_609678_printf: argument 1"}
!1325 = !{!1326}
!1326 = distinct !{!1326, !1327, !"ext_609678_printf: argument 0"}
!1327 = distinct !{!1327, !"ext_609678_printf"}
!1328 = !{!1329}
!1329 = distinct !{!1329, !1327, !"ext_609678_printf: argument 1"}
!1330 = !{!1331}
!1331 = distinct !{!1331, !1332, !"ext_609678_printf: argument 0"}
!1332 = distinct !{!1332, !"ext_609678_printf"}
!1333 = !{!1334}
!1334 = distinct !{!1334, !1332, !"ext_609678_printf: argument 1"}
!1335 = !{!1336}
!1336 = distinct !{!1336, !1337, !"ext_609678_printf: argument 0"}
!1337 = distinct !{!1337, !"ext_609678_printf"}
!1338 = !{!1339}
!1339 = distinct !{!1339, !1337, !"ext_609678_printf: argument 1"}
!1340 = !{!1341}
!1341 = distinct !{!1341, !1342, !"ext_609678_printf: argument 0"}
!1342 = distinct !{!1342, !"ext_609678_printf"}
!1343 = !{!1344}
!1344 = distinct !{!1344, !1342, !"ext_609678_printf: argument 1"}
!1345 = !{!1346}
!1346 = distinct !{!1346, !1347, !"ext_609678_printf: argument 0"}
!1347 = distinct !{!1347, !"ext_609678_printf"}
!1348 = !{!1349}
!1349 = distinct !{!1349, !1347, !"ext_609678_printf: argument 1"}
!1350 = !{!1351}
!1351 = distinct !{!1351, !1352, !"ext_609678_printf: argument 0"}
!1352 = distinct !{!1352, !"ext_609678_printf"}
!1353 = !{!1354}
!1354 = distinct !{!1354, !1352, !"ext_609678_printf: argument 1"}
!1355 = !{!1356}
!1356 = distinct !{!1356, !1357, !"ext_609678_printf: argument 0"}
!1357 = distinct !{!1357, !"ext_609678_printf"}
!1358 = !{!1359}
!1359 = distinct !{!1359, !1357, !"ext_609678_printf: argument 1"}
!1360 = !{!1361}
!1361 = distinct !{!1361, !1362, !"ext_609678_printf: argument 0"}
!1362 = distinct !{!1362, !"ext_609678_printf"}
!1363 = !{!1364}
!1364 = distinct !{!1364, !1362, !"ext_609678_printf: argument 1"}
!1365 = !{!1366}
!1366 = distinct !{!1366, !1367, !"ext_609678_printf: argument 0"}
!1367 = distinct !{!1367, !"ext_609678_printf"}
!1368 = !{!1369}
!1369 = distinct !{!1369, !1367, !"ext_609678_printf: argument 1"}
!1370 = !{!1371}
!1371 = distinct !{!1371, !1372, !"ext_609678_printf: argument 0"}
!1372 = distinct !{!1372, !"ext_609678_printf"}
!1373 = !{!1374}
!1374 = distinct !{!1374, !1372, !"ext_609678_printf: argument 1"}
!1375 = !{!1376}
!1376 = distinct !{!1376, !1377, !"ext_609678_printf: argument 0"}
!1377 = distinct !{!1377, !"ext_609678_printf"}
!1378 = !{!1379}
!1379 = distinct !{!1379, !1377, !"ext_609678_printf: argument 1"}
!1380 = !{!1381}
!1381 = distinct !{!1381, !1382, !"ext_609678_printf: argument 0"}
!1382 = distinct !{!1382, !"ext_609678_printf"}
!1383 = !{!1384}
!1384 = distinct !{!1384, !1382, !"ext_609678_printf: argument 1"}
!1385 = !{!1386}
!1386 = distinct !{!1386, !1387, !"ext_609678_printf: argument 0"}
!1387 = distinct !{!1387, !"ext_609678_printf"}
!1388 = !{!1389}
!1389 = distinct !{!1389, !1387, !"ext_609678_printf: argument 1"}
!1390 = !{!1391}
!1391 = distinct !{!1391, !1392, !"ext_609678_printf: argument 0"}
!1392 = distinct !{!1392, !"ext_609678_printf"}
!1393 = !{!1394}
!1394 = distinct !{!1394, !1392, !"ext_609678_printf: argument 1"}
!1395 = !{!1396}
!1396 = distinct !{!1396, !1397, !"ext_609678_printf: argument 0"}
!1397 = distinct !{!1397, !"ext_609678_printf"}
!1398 = !{!1399}
!1399 = distinct !{!1399, !1397, !"ext_609678_printf: argument 1"}
!1400 = !{!1401}
!1401 = distinct !{!1401, !1402, !"ext_609678_printf: argument 0"}
!1402 = distinct !{!1402, !"ext_609678_printf"}
!1403 = !{!1404}
!1404 = distinct !{!1404, !1402, !"ext_609678_printf: argument 1"}
!1405 = !{!1406}
!1406 = distinct !{!1406, !1407, !"ext_609678_printf: argument 0"}
!1407 = distinct !{!1407, !"ext_609678_printf"}
!1408 = !{!1409}
!1409 = distinct !{!1409, !1407, !"ext_609678_printf: argument 1"}
!1410 = !{!1411}
!1411 = distinct !{!1411, !1412, !"ext_609678_printf: argument 0"}
!1412 = distinct !{!1412, !"ext_609678_printf"}
!1413 = !{!1414}
!1414 = distinct !{!1414, !1412, !"ext_609678_printf: argument 1"}
!1415 = !{!1416}
!1416 = distinct !{!1416, !1417, !"ext_609678_printf: argument 0"}
!1417 = distinct !{!1417, !"ext_609678_printf"}
!1418 = !{!1419}
!1419 = distinct !{!1419, !1417, !"ext_609678_printf: argument 1"}
!1420 = !{!1421}
!1421 = distinct !{!1421, !1422, !"ext_609660_free: argument 0"}
!1422 = distinct !{!1422, !"ext_609660_free"}
!1423 = !{!1424}
!1424 = distinct !{!1424, !1425, !"ext_609660_free: argument 0"}
!1425 = distinct !{!1425, !"ext_609660_free"}
!1426 = !{!1427}
!1427 = distinct !{!1427, !1428, !"ext_609660_free: argument 0"}
!1428 = distinct !{!1428, !"ext_609660_free"}
!1429 = !{!1430}
!1430 = distinct !{!1430, !1428, !"ext_609660_free: argument 1"}
!1431 = !{!1432}
!1432 = distinct !{!1432, !1433, !"ext_609678_printf: argument 0"}
!1433 = distinct !{!1433, !"ext_609678_printf"}
!1434 = !{!1435}
!1435 = distinct !{!1435, !1433, !"ext_609678_printf: argument 1"}
!1436 = !{!1437}
!1437 = distinct !{!1437, !1438, !"ext_609678_printf: argument 0"}
!1438 = distinct !{!1438, !"ext_609678_printf"}
!1439 = !{!1440}
!1440 = distinct !{!1440, !1438, !"ext_609678_printf: argument 1"}
!1441 = !{!1442}
!1442 = distinct !{!1442, !1443, !"ext_609678_printf: argument 0"}
!1443 = distinct !{!1443, !"ext_609678_printf"}
!1444 = !{!1445}
!1445 = distinct !{!1445, !1443, !"ext_609678_printf: argument 1"}
!1446 = !{!1447}
!1447 = distinct !{!1447, !1448, !"ext_609668___isoc99_fscanf: argument 0"}
!1448 = distinct !{!1448, !"ext_609668___isoc99_fscanf"}
!1449 = !{!1450}
!1450 = distinct !{!1450, !1448, !"ext_609668___isoc99_fscanf: argument 1"}
!1451 = !{!1452}
!1452 = distinct !{!1452, !1453, !"ext_609670_fclose: argument 0"}
!1453 = distinct !{!1453, !"ext_609670_fclose"}
!1454 = !{!1455}
!1455 = distinct !{!1455, !1453, !"ext_609670_fclose: argument 1"}
!1456 = !{!1457}
!1457 = distinct !{!1457, !1458, !"ext_609678_printf: argument 0"}
!1458 = distinct !{!1458, !"ext_609678_printf"}
!1459 = !{!1460}
!1460 = distinct !{!1460, !1458, !"ext_609678_printf: argument 1"}
!1461 = !{!1462}
!1462 = distinct !{!1462, !1463, !"ext_609678_printf: argument 0"}
!1463 = distinct !{!1463, !"ext_609678_printf"}
!1464 = !{!1465}
!1465 = distinct !{!1465, !1463, !"ext_609678_printf: argument 1"}
!1466 = !{!1467}
!1467 = distinct !{!1467, !1468, !"ext_609678_printf: argument 0"}
!1468 = distinct !{!1468, !"ext_609678_printf"}
!1469 = !{!1470}
!1470 = distinct !{!1470, !1468, !"ext_609678_printf: argument 1"}
!1471 = !{!1472}
!1472 = distinct !{!1472, !1473, !"ext_609690_fgetc: argument 0"}
!1473 = distinct !{!1473, !"ext_609690_fgetc"}
!1474 = !{!1475}
!1475 = distinct !{!1475, !1473, !"ext_609690_fgetc: argument 1"}
!1476 = !{!1477}
!1477 = distinct !{!1477, !1478, !"ext_6096b0_fopen: argument 0"}
!1478 = distinct !{!1478, !"ext_6096b0_fopen"}
!1479 = !{!1480}
!1480 = distinct !{!1480, !1478, !"ext_6096b0_fopen: argument 1"}
!1481 = !{!1259, !1259, i64 0}
!1482 = !{!1483}
!1483 = distinct !{!1483, !1484, !"ext_609668___isoc99_fscanf: argument 0"}
!1484 = distinct !{!1484, !"ext_609668___isoc99_fscanf"}
!1485 = !{!1486}
!1486 = distinct !{!1486, !1484, !"ext_609668___isoc99_fscanf: argument 1"}
!1487 = !{!1488}
!1488 = distinct !{!1488, !1489, !"ext_609678_printf: argument 0"}
!1489 = distinct !{!1489, !"ext_609678_printf"}
!1490 = !{!1491}
!1491 = distinct !{!1491, !1489, !"ext_609678_printf: argument 1"}
!1492 = !{!1493, !1493, i64 0}
!1493 = !{!"float", !1242, i64 0}
!1494 = !{!1242, !1242, i64 0}
!1495 = !{!1496}
!1496 = distinct !{!1496, !1497, !"ext_400740_fprintf: argument 0"}
!1497 = distinct !{!1497, !"ext_400740_fprintf"}
!1498 = !{!1499}
!1499 = distinct !{!1499, !1497, !"ext_400740_fprintf: argument 1"}
!1500 = !{!1501}
!1501 = distinct !{!1501, !1502, !"ext_609678_printf: argument 0"}
!1502 = distinct !{!1502, !"ext_609678_printf"}
!1503 = !{!1504}
!1504 = distinct !{!1504, !1502, !"ext_609678_printf: argument 1"}
!1505 = !{!1506}
!1506 = distinct !{!1506, !1507, !"ext_609678_printf: argument 0"}
!1507 = distinct !{!1507, !"ext_609678_printf"}
!1508 = !{!1509}
!1509 = distinct !{!1509, !1507, !"ext_609678_printf: argument 1"}
!1510 = !{!1511}
!1511 = distinct !{!1511, !1512, !"ext_609678_printf: argument 0"}
!1512 = distinct !{!1512, !"ext_609678_printf"}
!1513 = !{!1514}
!1514 = distinct !{!1514, !1512, !"ext_609678_printf: argument 1"}
!1515 = !{!1516}
!1516 = distinct !{!1516, !1517, !"ext_609678_printf: argument 0"}
!1517 = distinct !{!1517, !"ext_609678_printf"}
!1518 = !{!1519}
!1519 = distinct !{!1519, !1517, !"ext_609678_printf: argument 1"}
!1520 = !{!1521}
!1521 = distinct !{!1521, !1522, !"ext_609668___isoc99_fscanf: argument 0"}
!1522 = distinct !{!1522, !"ext_609668___isoc99_fscanf"}
!1523 = !{!1524}
!1524 = distinct !{!1524, !1522, !"ext_609668___isoc99_fscanf: argument 1"}
!1525 = !{!1526}
!1526 = distinct !{!1526, !1527, !"ext_609678_printf: argument 0"}
!1527 = distinct !{!1527, !"ext_609678_printf"}
!1528 = !{!1529}
!1529 = distinct !{!1529, !1527, !"ext_609678_printf: argument 1"}
!1530 = !{!1531}
!1531 = distinct !{!1531, !1532, !"ext_609678_printf: argument 0"}
!1532 = distinct !{!1532, !"ext_609678_printf"}
!1533 = !{!1534}
!1534 = distinct !{!1534, !1532, !"ext_609678_printf: argument 1"}
!1535 = !{!1536}
!1536 = distinct !{!1536, !1537, !"ext_6096b0_fopen: argument 0"}
!1537 = distinct !{!1537, !"ext_6096b0_fopen"}
!1538 = !{!1539}
!1539 = distinct !{!1539, !1537, !"ext_6096b0_fopen: argument 1"}
!1540 = !{!1541}
!1541 = distinct !{!1541, !1542, !"ext_609678_printf: argument 0"}
!1542 = distinct !{!1542, !"ext_609678_printf"}
!1543 = !{!1544}
!1544 = distinct !{!1544, !1542, !"ext_609678_printf: argument 1"}
!1545 = !{!1546}
!1546 = distinct !{!1546, !1547, !"ext_609678_printf: argument 0"}
!1547 = distinct !{!1547, !"ext_609678_printf"}
!1548 = !{!1549}
!1549 = distinct !{!1549, !1547, !"ext_609678_printf: argument 1"}
!1550 = !{!1551}
!1551 = distinct !{!1551, !1552, !"ext_609678_printf: argument 0"}
!1552 = distinct !{!1552, !"ext_609678_printf"}
!1553 = !{!1554}
!1554 = distinct !{!1554, !1552, !"ext_609678_printf: argument 1"}
!1555 = !{!1556}
!1556 = distinct !{!1556, !1557, !"ext_609678_printf: argument 0"}
!1557 = distinct !{!1557, !"ext_609678_printf"}
!1558 = !{!1559}
!1559 = distinct !{!1559, !1557, !"ext_609678_printf: argument 1"}
!1560 = !{!1561}
!1561 = distinct !{!1561, !1562, !"ext_609678_printf: argument 0"}
!1562 = distinct !{!1562, !"ext_609678_printf"}
!1563 = !{!1564}
!1564 = distinct !{!1564, !1562, !"ext_609678_printf: argument 1"}
!1565 = !{!1566}
!1566 = distinct !{!1566, !1567, !"ext_609678_printf: argument 0"}
!1567 = distinct !{!1567, !"ext_609678_printf"}
!1568 = !{!1569}
!1569 = distinct !{!1569, !1567, !"ext_609678_printf: argument 1"}
!1570 = !{!1571}
!1571 = distinct !{!1571, !1572, !"ext_609690_fgetc: argument 0"}
!1572 = distinct !{!1572, !"ext_609690_fgetc"}
!1573 = !{!1574}
!1574 = distinct !{!1574, !1572, !"ext_609690_fgetc: argument 1"}
!1575 = !{!1576}
!1576 = distinct !{!1576, !1577, !"ext_609678_printf: argument 0"}
!1577 = distinct !{!1577, !"ext_609678_printf"}
!1578 = !{!1579}
!1579 = distinct !{!1579, !1577, !"ext_609678_printf: argument 1"}
!1580 = !{!1581}
!1581 = distinct !{!1581, !1582, !"ext_609670_fclose: argument 0"}
!1582 = distinct !{!1582, !"ext_609670_fclose"}
!1583 = !{!1584}
!1584 = distinct !{!1584, !1582, !"ext_609670_fclose: argument 1"}
!1585 = !{!1586}
!1586 = distinct !{!1586, !1587, !"ext_609678_printf: argument 0"}
!1587 = distinct !{!1587, !"ext_609678_printf"}
!1588 = !{!1589}
!1589 = distinct !{!1589, !1587, !"ext_609678_printf: argument 1"}
!1590 = !{!1591}
!1591 = distinct !{!1591, !1592, !"ext_609678_printf: argument 0"}
!1592 = distinct !{!1592, !"ext_609678_printf"}
!1593 = !{!1594}
!1594 = distinct !{!1594, !1592, !"ext_609678_printf: argument 1"}
!1595 = !{!1596}
!1596 = distinct !{!1596, !1597, !"ext_609678_printf: argument 0"}
!1597 = distinct !{!1597, !"ext_609678_printf"}
!1598 = !{!1599}
!1599 = distinct !{!1599, !1597, !"ext_609678_printf: argument 1"}
!1600 = !{!1601}
!1601 = distinct !{!1601, !1602, !"ext_609678_printf: argument 0"}
!1602 = distinct !{!1602, !"ext_609678_printf"}
!1603 = !{!1604}
!1604 = distinct !{!1604, !1602, !"ext_609678_printf: argument 1"}
!1605 = !{!1606}
!1606 = distinct !{!1606, !1607, !"ext_609690_fgetc: argument 0"}
!1607 = distinct !{!1607, !"ext_609690_fgetc"}
!1608 = !{!1609}
!1609 = distinct !{!1609, !1607, !"ext_609690_fgetc: argument 1"}
!1610 = !{!1611}
!1611 = distinct !{!1611, !1612, !"ext_609668___isoc99_fscanf: argument 0"}
!1612 = distinct !{!1612, !"ext_609668___isoc99_fscanf"}
!1613 = !{!1614}
!1614 = distinct !{!1614, !1612, !"ext_609668___isoc99_fscanf: argument 1"}
!1615 = !{!1616}
!1616 = distinct !{!1616, !1617, !"ext_609678_printf: argument 0"}
!1617 = distinct !{!1617, !"ext_609678_printf"}
!1618 = !{!1619}
!1619 = distinct !{!1619, !1617, !"ext_609678_printf: argument 1"}
!1620 = !{!1621}
!1621 = distinct !{!1621, !1622, !"ext_609678_printf: argument 0"}
!1622 = distinct !{!1622, !"ext_609678_printf"}
!1623 = !{!1624}
!1624 = distinct !{!1624, !1622, !"ext_609678_printf: argument 1"}
!1625 = !{!1626}
!1626 = distinct !{!1626, !1627, !"ext_609678_printf: argument 0"}
!1627 = distinct !{!1627, !"ext_609678_printf"}
!1628 = !{!1629}
!1629 = distinct !{!1629, !1627, !"ext_609678_printf: argument 1"}
!1630 = !{!1631}
!1631 = distinct !{!1631, !1632, !"ext_609678_printf: argument 0"}
!1632 = distinct !{!1632, !"ext_609678_printf"}
!1633 = !{!1634}
!1634 = distinct !{!1634, !1632, !"ext_609678_printf: argument 1"}
!1635 = !{!1636}
!1636 = distinct !{!1636, !1637, !"ext_609678_printf: argument 0"}
!1637 = distinct !{!1637, !"ext_609678_printf"}
!1638 = !{!1639}
!1639 = distinct !{!1639, !1637, !"ext_609678_printf: argument 1"}
!1640 = !{!1641}
!1641 = distinct !{!1641, !1642, !"ext_609678_printf: argument 0"}
!1642 = distinct !{!1642, !"ext_609678_printf"}
!1643 = !{!1644}
!1644 = distinct !{!1644, !1642, !"ext_609678_printf: argument 1"}
!1645 = !{!1646}
!1646 = distinct !{!1646, !1647, !"ext_609678_printf: argument 0"}
!1647 = distinct !{!1647, !"ext_609678_printf"}
!1648 = !{!1649}
!1649 = distinct !{!1649, !1647, !"ext_609678_printf: argument 1"}
!1650 = !{!1651}
!1651 = distinct !{!1651, !1652, !"ext_609678_printf: argument 0"}
!1652 = distinct !{!1652, !"ext_609678_printf"}
!1653 = !{!1654}
!1654 = distinct !{!1654, !1652, !"ext_609678_printf: argument 1"}
!1655 = !{!1656}
!1656 = distinct !{!1656, !1657, !"ext_609678_printf: argument 0"}
!1657 = distinct !{!1657, !"ext_609678_printf"}
!1658 = !{!1659}
!1659 = distinct !{!1659, !1657, !"ext_609678_printf: argument 1"}
!1660 = !{!1661}
!1661 = distinct !{!1661, !1662, !"ext_609678_printf: argument 0"}
!1662 = distinct !{!1662, !"ext_609678_printf"}
!1663 = !{!1664}
!1664 = distinct !{!1664, !1662, !"ext_609678_printf: argument 1"}
!1665 = !{!1666}
!1666 = distinct !{!1666, !1667, !"ext_609678_printf: argument 0"}
!1667 = distinct !{!1667, !"ext_609678_printf"}
!1668 = !{!1669}
!1669 = distinct !{!1669, !1667, !"ext_609678_printf: argument 1"}
!1670 = !{!1671}
!1671 = distinct !{!1671, !1672, !"ext_609678_printf: argument 0"}
!1672 = distinct !{!1672, !"ext_609678_printf"}
!1673 = !{!1674}
!1674 = distinct !{!1674, !1672, !"ext_609678_printf: argument 1"}
!1675 = !{!1676}
!1676 = distinct !{!1676, !1677, !"ext_609678_printf: argument 0"}
!1677 = distinct !{!1677, !"ext_609678_printf"}
!1678 = !{!1679}
!1679 = distinct !{!1679, !1677, !"ext_609678_printf: argument 1"}
!1680 = !{!1681}
!1681 = distinct !{!1681, !1682, !"ext_609678_printf: argument 0"}
!1682 = distinct !{!1682, !"ext_609678_printf"}
!1683 = !{!1684}
!1684 = distinct !{!1684, !1682, !"ext_609678_printf: argument 1"}
!1685 = !{!1686}
!1686 = distinct !{!1686, !1687, !"ext_609678_printf: argument 0"}
!1687 = distinct !{!1687, !"ext_609678_printf"}
!1688 = !{!1689}
!1689 = distinct !{!1689, !1687, !"ext_609678_printf: argument 1"}
!1690 = !{!1691}
!1691 = distinct !{!1691, !1692, !"ext_609678_printf: argument 0"}
!1692 = distinct !{!1692, !"ext_609678_printf"}
!1693 = !{!1694}
!1694 = distinct !{!1694, !1692, !"ext_609678_printf: argument 1"}
!1695 = !{!1696}
!1696 = distinct !{!1696, !1697, !"ext_609678_printf: argument 0"}
!1697 = distinct !{!1697, !"ext_609678_printf"}
!1698 = !{!1699}
!1699 = distinct !{!1699, !1697, !"ext_609678_printf: argument 1"}
!1700 = !{!1701}
!1701 = distinct !{!1701, !1702, !"ext_609678_printf: argument 0"}
!1702 = distinct !{!1702, !"ext_609678_printf"}
!1703 = !{!1704}
!1704 = distinct !{!1704, !1702, !"ext_609678_printf: argument 1"}
!1705 = !{!1706}
!1706 = distinct !{!1706, !1707, !"ext_609678_printf: argument 0"}
!1707 = distinct !{!1707, !"ext_609678_printf"}
!1708 = !{!1709}
!1709 = distinct !{!1709, !1707, !"ext_609678_printf: argument 1"}
!1710 = !{!1711}
!1711 = distinct !{!1711, !1712, !"ext_609678_printf: argument 0"}
!1712 = distinct !{!1712, !"ext_609678_printf"}
!1713 = !{!1714}
!1714 = distinct !{!1714, !1712, !"ext_609678_printf: argument 1"}
!1715 = !{!1716}
!1716 = distinct !{!1716, !1717, !"ext_400720_pow: argument 0"}
!1717 = distinct !{!1717, !"ext_400720_pow"}
!1718 = !{!1719}
!1719 = distinct !{!1719, !1717, !"ext_400720_pow: argument 1"}
!1720 = !{!1721}
!1721 = distinct !{!1721, !1722, !"ext_6096b8_sprintf: argument 0"}
!1722 = distinct !{!1722, !"ext_6096b8_sprintf"}
!1723 = !{!1724}
!1724 = distinct !{!1724, !1722, !"ext_6096b8_sprintf: argument 1"}
!1725 = !{!1726}
!1726 = distinct !{!1726, !1727, !"ext_609678_printf: argument 0"}
!1727 = distinct !{!1727, !"ext_609678_printf"}
!1728 = !{!1729}
!1729 = distinct !{!1729, !1727, !"ext_609678_printf: argument 1"}
!1730 = !{!1731}
!1731 = distinct !{!1731, !1732, !"ext_400720_pow: argument 0"}
!1732 = distinct !{!1732, !"ext_400720_pow"}
!1733 = !{!1734}
!1734 = distinct !{!1734, !1732, !"ext_400720_pow: argument 1"}
!1735 = !{!1736}
!1736 = distinct !{!1736, !1737, !"ext_6096c0_sqrt: argument 0"}
!1737 = distinct !{!1737, !"ext_6096c0_sqrt"}
!1738 = !{!1739}
!1739 = distinct !{!1739, !1737, !"ext_6096c0_sqrt: argument 1"}
!1740 = !{!1741}
!1741 = distinct !{!1741, !1742, !"ext_400750_malloc: argument 0"}
!1742 = distinct !{!1742, !"ext_400750_malloc"}
!1743 = !{!1744}
!1744 = distinct !{!1744, !1742, !"ext_400750_malloc: argument 1"}
!1745 = !{!1746}
!1746 = distinct !{!1746, !1747, !"ext_400750_malloc: argument 0"}
!1747 = distinct !{!1747, !"ext_400750_malloc"}
!1748 = !{!1749}
!1749 = distinct !{!1749, !1747, !"ext_400750_malloc: argument 1"}
!1750 = !{!1751}
!1751 = distinct !{!1751, !1752, !"ext_400750_malloc: argument 0"}
!1752 = distinct !{!1752, !"ext_400750_malloc"}
!1753 = !{!1754}
!1754 = distinct !{!1754, !1752, !"ext_400750_malloc: argument 1"}
!1755 = !{!1756}
!1756 = distinct !{!1756, !1757, !"ext_609678_printf: argument 0"}
!1757 = distinct !{!1757, !"ext_609678_printf"}
!1758 = !{!1759}
!1759 = distinct !{!1759, !1757, !"ext_609678_printf: argument 1"}
!1760 = !{!1761}
!1761 = distinct !{!1761, !1762, !"ext_400720_pow: argument 0"}
!1762 = distinct !{!1762, !"ext_400720_pow"}
!1763 = !{!1764}
!1764 = distinct !{!1764, !1762, !"ext_400720_pow: argument 1"}
!1765 = !{!1766}
!1766 = distinct !{!1766, !1767, !"ext_400710_gettimeofday: argument 0"}
!1767 = distinct !{!1767, !"ext_400710_gettimeofday"}
!1768 = !{!1769}
!1769 = distinct !{!1769, !1767, !"ext_400710_gettimeofday: argument 1"}
!1770 = !{!1771}
!1771 = distinct !{!1771, !1772, !"ext_609698___libc_start_main: argument 0"}
!1772 = distinct !{!1772, !"ext_609698___libc_start_main"}
!1773 = !{!1774}
!1774 = distinct !{!1774, !1772, !"ext_609698___libc_start_main: argument 1"}
